// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SR2PC

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SR2PCBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type SR2PCBlockHeader struct {
	Height *big.Int
	Root   [32]byte
}

// SR2PCCrossMessage is an auto generated low-level Go binding around an user-defined struct.
type SR2PCCrossMessage struct {
	SourceChainId  *big.Int
	TargetChainId  *big.Int
	Phase          uint8
	SourceHeight   *big.Int
	Nonce          *big.Int
	Payload        [][]byte
	CmInputHash    [32]byte
	CmInputHeight  *big.Int
	RespPayload    [32]byte
	ExpectedHeight *big.Int
}

// SR2PCShadowLock is an auto generated low-level Go binding around an user-defined struct.
type SR2PCShadowLock struct {
	ChainId *big.Int
	Height  *big.Int
}

// SR2PCMetaData contains all meta data concerning the SR2PC contract.
var SR2PCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedTrustDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.MetricsCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isConfirmed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byHeader\",\"type\":\"bool\"}],\"name\":\"Metrics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryPrepareConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryPrepareUnconfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryRollbackConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RollbackConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.CMStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SendCMHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"ShadowStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"SyncHeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Warning\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"CrossRetry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"calculateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"}],\"name\":\"cmToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"crossReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"crossSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"getCMByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getHeader\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShadowLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.ShadowLock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransSuccessNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getUncfmQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"}],\"name\":\"syncHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"test_updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040526001805460ff191681179055600060038190556007553480156200002757600080fd5b5060405162004641380380620046418339810160408190526200004a9162000081565b61271060009081556002929092556003829055600455604080518082019091528181526020018190526009819055600a55620000a5565b6000806040838503121562000094578182fd5b505080516020909101519092909150565b61458c80620000b56000396000f3fe6080604052600436106101025760003560e01c80636e53670a11610095578063ac676d3211610064578063ac676d321461030f578063cc38a4821461034a578063d3b4fbbb1461037c578063eb6724e41461039c578063f678f80d146103bc57610141565b80636e53670a1461024d5780638660c37614610288578063a1f2c288146102a8578063ab1e2689146102e257610141565b8063366c7d43116100d1578063366c7d43146101d05780633fa4f2451461020457806344b9bd891461021a5780634d522c511461023a57610141565b80630c8b9b1214610146578063111343841461017957806311ba08d71461019957806320965255146101bb57610141565b3661014157604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561015257600080fd5b50610166610161366004613b6f565b6103dc565b6040519081526020015b60405180910390f35b34801561018557600080fd5b50610166610194366004613a77565b610440565b3480156101a557600080fd5b506101b96101b4366004613aa7565b610460565b005b3480156101c757600080fd5b50600054610166565b3480156101dc57600080fd5b506101f46101eb366004613afd565b60019392505050565b6040519015158152602001610170565b34801561021057600080fd5b5061016660005481565b34801561022657600080fd5b50610166610235366004613baa565b610ae2565b6101b96102483660046139e1565b610af4565b34801561025957600080fd5b5061026d610268366004613c37565b610e5a565b60408051825181526020928301519281019290925201610170565b34801561029457600080fd5b506101b96102a3366004613baa565b610e9b565b3480156102b457600080fd5b50604080518082018252600080825260209182015281518083019092526009548252600a549082015261026d565b3480156102ee57600080fd5b506103026102fd366004613a77565b610f5c565b6040516101709190613ed9565b34801561031b57600080fd5b5061016661032a366004613c37565b6000918252600c6020908152604080842092845291905290206001015490565b34801561035657600080fd5b5061036a610365366004613a77565b6110fd565b60405160ff9091168152602001610170565b34801561038857600080fd5b506101b9610397366004613c0b565b61114d565b3480156103a857600080fd5b506101b96103b7366004613a77565b600055565b3480156103c857600080fd5b506101666103d7366004613a77565b61131a565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b6104229b909a9991016142ff565b6040516020818303038152906040528051906020012090505b919050565b600060025482604051602001610422929190918252602082015260400190565b6040517f526574727950726570617265556e636f6e6669726d434d000000000000000000602082015260370160405160208183030381529060405280519060200120826040516020016104b39190613d82565b60405160208183030381529060405280519060200120141561068b576000818152600d60205260408082208151610180810183528154928101928352600182015460608201526002820154909283918390608084019060ff16600481111561052b57634e487b7160e01b600052602160045260246000fd5b600481111561054a57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156106335783829060005260206000200180546105a69061445e565b80601f01602080910402602001604051908101604052809291908181526020018280546105d29061445e565b801561061f5780601f106105f45761010080835404028352916020019161061f565b820191906000526020600020905b81548152906001019060200180831161060257829003601f168201915b505050505081526020019060010190610587565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250508152602001600a8201548152505090506106858160000151826020015161136a565b50610ade565b60405174526574727950726570617265436f6e6669726d434d60581b602082015260350160405160208183030381529060405280519060200120826040516020016106d69190613d82565b60405160208183030381529060405280519060200120141561088b576000818152600e60209081526040808320815161014081018352815481526001820154938101939093526002810154909183019060ff16600481111561074857634e487b7160e01b600052602160045260246000fd5b600481111561076757634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156108505783829060005260206000200180546107c39061445e565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef9061445e565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b5050505050815260200190600101906107a4565b505050508152602001600682015481526020016007820154815260200160088201548152602001600982015481525050905061068581611915565b604051755265747279526f6c6c6261636b436f6e6669726d434d60501b602082015260360160405160208183030381529060405280519060200120826040516020016108d79190613d82565b604051602081830303815290604052805190602001201415610a8e576000818152600f60209081526040808320815161014081018352815481526001820154938101939093526002810154909183019060ff16600481111561094957634e487b7160e01b600052602160045260246000fd5b600481111561096857634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610a515783829060005260206000200180546109c49061445e565b80601f01602080910402602001604051908101604052809291908181526020018280546109f09061445e565b8015610a3d5780601f10610a1257610100808354040283529160200191610a3d565b820191906000526020600020905b815481529060010190602001808311610a2057829003601f168201915b5050505050815260200190600101906109a5565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050610685816000611e1e565b610a9661359a565b6000805160206144f78339815191528183604051602001610ab991815260200190565b60408051601f1981840301815290829052610ad49291613f9e565b60405180910390a1505b5050565b6000610aed826120e0565b9392505050565b600160076000828254610b079190614403565b909155505060025460075460408051602081019390935282015260009060600160408051601f198184030181529181528151602092830120855160008281526008909452918320600180820193909355805460ff191690921790915591505b8351811015610e54576000848281518110610b9157634e487b7160e01b600052603260045260246000fd5b60200260200101519050610ba361359a565b6002548152602081018290524360608201526003805460019190600090610bcb908490614403565b90915550506003546080820152600060408201819052506040805160028082526060820190925290816020015b6060815260200190600190039081610bf85790505060a08201526040805160208101879052016040516020818303038152906040528160a00151600081518110610c5257634e487b7160e01b600052603260045260246000fd5b602002602001018190525083604051602001610c7091815260200190565b6040516020818303038152906040528160a00151600181518110610ca457634e487b7160e01b600052603260045260246000fd5b602002602001018190525060045443610cbd9190614403565b6101208201526000610cce826103dc565b90508160056000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836004811115610d3057634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051610d6491600584019160209091019061360b565b5060c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050508060066000600354815260200190815260200160002081905550600080516020614537833981519152816000604051610dcc929190613de2565b60405180910390a16000805160206145178339815191528582600254436000806000604051610e019796959493929190613d9e565b60405180910390a160008581526008602090815260408083208784526003810183528184208590559383526004909301905220805460ff1916600117905550819050610e4c81614499565b915050610b66565b50505050565b604080518082018252600080825260209182018190529384526010815281842092845291825291829020825180840190935280548352600101549082015290565b600254826020015114610ef45760405162461bcd60e51b815260206004820152601960248201527f77726f6e6720746172676574436861696e496420696e20636d00000000000000604482015260640160405180910390fd5b6000610f098360000151846101200151610e5a565b61012084015181519192501415610f3f576001610f30565b60405180910390a15050610ade565b610f39846120fc565b50610f57565b6000610f4b8484610ae2565b9050610e54848261223c565b505050565b610f6461359a565b600082815260056020908152604091829020825161014081018452815481526001820154928101929092526002810154919290919083019060ff166004811115610fbe57634e487b7160e01b600052602160045260246000fd5b6004811115610fdd57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156110c65783829060005260206000200180546110399061445e565b80601f01602080910402602001604051908101604052809291908181526020018280546110659061445e565b80156110b25780601f10611087576101008083540402835291602001916110b2565b820191906000526020600020905b81548152906001019060200180831161109557829003601f168201915b50505050508152602001906001019061101a565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b6000806002548360405160200161111e929190918252602082015260400190565b60408051808303601f1901815291815281516020928301206000908152600890925290205460ff169392505050565b600061115d838360000151610e5a565b8051835191925014156111c35781516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7916111a991869190602001918252602082015260400190565b60408051601f1981840301815290829052610ad491613e48565b600083815260106020526040902060010154158015906111e35750815115155b156112635760006111ff8460018560000151610268919061441b565b80519091506112615782516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c79161124791879190602001918252602082015260400190565b60408051601f1981840301815290829052610f2191613e87565b505b600083815260106020818152604080842086518552808352908420865181558287015160019182015593879052919052015482518110156112b35782516000858152601060205260409020600101555b6112c68484600001518560200151612281565b825160208401516040517f22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b919261130c928883526020830191909152604082015260600190565b60405180910390a150505050565b6000806002548360405160200161133b929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600090815260089092529020600201549392505050565b60095415801561137a5750600a54155b156113d65781516009819055610120830151600a8190556040805160208101939093528201526060810182905260009060800160408051601f19818403018152918152815160209283012060008054918152600b909352912055505b60006113e1836103dc565b83516009549192501415806113fd5750610120830151600a5414155b156115075760408051808201825284815260208082018590526000848152600d8252839020825180518255918201516001808301919091559382015160028201805494959294859360ff199091169083600481111561146c57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516114a091600584019160209091019061360b565b5060c0820151600682015560e08201516007820155610100820151600882015561012090910151600990910155602091820151600a909101556040518281527f2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b439101610ad4565b6000818152600d602052604081208181556001810182905560028101805460ff1916905560038101829055600481018290559081816115496005830182613668565b5060006006820181905560078201819055600882018190556009909101819055600a929092018290555083516101208501516040805160208101939093528201526060810184905260800160405160208183030381529060405280519060200120905060008460a001516000815181106115d357634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906115ee9190613a8f565b6000838152600b602052604090205490915060019082111561161257506000611636565b6000838152600b60205260408120805484929061163090849061441b565b90915550505b61163e61359a565b60028054825287516020830152604080518281526060810190915290816020015b606081526020019060019003908161165f5790505060a08201526040805160208101859052016040516020818303038152906040528160a001516000815181106116b957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508660a001516001815181106116e957634e487b7160e01b600052603260045260246000fd5b60200260200101518160a0015160018151811061171657634e487b7160e01b600052603260045260246000fd5b60200260200101819052508115611733576001604082015261173b565b600260408201525b60016003600082825461174e9190614403565b90915550506003546080820152611764876103dc565b60c082015260608088015160e08301524390820181905260045461178791614403565b6101208201526000611798826103dc565b60035460009081526006602090815260408083208490558383526005825291829020855181559085015160018083019190915591850151600282018054949550869492939192909160ff199091169083600481111561180757634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a0820151805161183b91600584019160209091019061360b565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020614537833981519152816001604051611889929190613de2565b60405180910390a160008860a001516001815181106118b857634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906118d39190613a8f565b905060008051602061451783398151915281836002544360016000806040516119029796959493929190613d9e565b60405180910390a1505050505050505050565b6000611920826103dc565b600954909150158015906119355750600a5415155b15611a695781516009541480156119525750610120820151600a54145b15611982576000805160206144f78339815191528260405161197491906141b4565b60405180910390a150611e1b565b6000818152600e6020908152604091829020845181559084015160018083019190915591840151600282018054869460ff19909116908360048111156119d857634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611a0c91600584019160209091019061360b565b5060c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101556040518181527f345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e90602001611974565b6000818152600e602052604081208181556001810182905560028101805460ff19169055600381018290556004810182905590611aa96005830182613668565b6006820160009055600782016000905560088201600090556009820160009055505060006001905060008360a00151600081518110611af857634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611b139190613a8f565b9050806000541015611b285760009150611b3f565b80600080828254611b39919061441b565b90915550505b611b4761359a565b60028054825285516020830152604080518281526060810190915290816020015b6060815260200190600190039081611b685790505060a08201526040805160208101849052016040516020818303038152906040528160a00151600081518110611bc257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508460a00151600181518110611bf257634e487b7160e01b600052603260045260246000fd5b60200260200101518160a00151600181518110611c1f57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508215611c3c5760016040820152611c44565b600260408201525b600160036000828254611c579190614403565b90915550506003546080820152611c6d856103dc565b60c082015260608086015160e083015243908201819052600454611c9091614403565b6101208201526000611ca1826103dc565b60035460009081526006602090815260408083208490558383526005825291829020855181559085015160018083019190915591850151600282018054949550869492939192909160ff1990911690836004811115611d1057634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611d4491600584019160209091019061360b565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020614537833981519152816001604051611d92929190613de2565b60405180910390a160008660a00151600181518110611dc157634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611ddc9190613a8f565b9050600080516020614517833981519152818360025443600260016000604051611e0c9796959493929190613d9e565b60405180910390a15050505050505b50565b6000611e29836103dc565b60095490915015801590611e3e5750600a5415155b15611f64578251600954148015611e5b5750610120830151600a54145b15611e7d576000805160206144f783398151915283604051610ad4919061425a565b6000818152600f6020908152604091829020855181559085015160018083019190915591850151600282018054879460ff1990911690836004811115611ed357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611f0791600584019160209091019061360b565b5060c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101556040518181527f4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d1264590602001610ad4565b6000818152600f602052604081208181556001810182905560028101805460ff19169055600381018290556004810182905590611fa46005830182613668565b6006820160009055600782016000905560088201600090556009820160009055505060008360a00151600081518110611fed57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906120089190613a8f565b90508060008082825461201b9190614403565b909155507f43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5905061204b856103dc565b60408051918252602082018490520160405180910390a160008460a0015160018151811061208957634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906120a49190613a8f565b90506000805160206145178339815191528160025443600c6001896040516120d196959493929190613e06565b60405180910390a15050505050565b60008151600014156120f45750600061043b565b506020015190565b60008160400151600481111561212257634e487b7160e01b600052602160045260246000fd5b14156121365761213181611915565b611e1b565b60018160400151600481111561215c57634e487b7160e01b600052602160045260246000fd5b141561216d576121318160006126f7565b60028160400151600481111561219357634e487b7160e01b600052602160045260246000fd5b14156121a457612131816000612d44565b6003816040015160048111156121ca57634e487b7160e01b600052602160045260246000fd5b14156121db57612131816000613379565b60048160400151600481111561220157634e487b7160e01b600052602160045260246000fd5b141561221257612131816000611e1e565b6000805160206144f78339815191528160405161222f9190613eec565b60405180910390a1611e1b565b60008260400151600481111561226257634e487b7160e01b600052602160045260246000fd5b141561227757612272828261136a565b610ade565b610ade82826133e8565b600954831480156122935750600a5482145b156123285760006009819055600a81905560408051602081018690529081018490526060810183905260800160408051808303601f1901815282825280516020918201206000818152600b8352838120805482555587845290830186905290820184905291507f4878afe8bf21812f17301038432841207b83956c9cb783f12cbf95a873246d599060600160405180910390a1505b6000838152600c602090815260408083208584529091528120905b60018201548110156126b957600082600101828154811061237457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016040518061014001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660048111156123d457634e487b7160e01b600052602160045260246000fd5b60048111156123f357634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156124dc57838290600052602060002001805461244f9061445e565b80601f016020809104026020016040519081016040528092919081815260200182805461247b9061445e565b80156124c85780601f1061249d576101008083540402835291602001916124c8565b820191906000526020600020905b8154815290600101906020018083116124ab57829003601f168201915b505050505081526020019060010190612430565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050600083600201838154811061253357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905084811461254e5750506126a7565b60018260400151600481111561257457634e487b7160e01b600052602160045260246000fd5b141561258a576125858260016126f7565b6126a4565b6002826040015160048111156125b057634e487b7160e01b600052602160045260246000fd5b14156125c157612585826001612d44565b6004826040015160048111156125e757634e487b7160e01b600052602160045260246000fd5b14156125f857612585826001611e1e565b60038260400151600481111561261e57634e487b7160e01b600052602160045260246000fd5b141561262f57612585826001613379565b60008260400151600481111561265557634e487b7160e01b600052602160045260246000fd5b1415612687576000805160206144f78339815191528260405161267891906140c1565b60405180910390a150506126a7565b6000805160206144f7833981519152826040516126789190613eec565b50505b806126b181614499565b915050612343565b506000848152600c602090815260408083208684529091528120906126e16001830182613686565b6126ef6002830160006136a7565b505050505050565b60008260a0015160018151811061271e57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906127399190613a8f565b60008181526008602052604090205490915060ff1661276f576000805160206144f783398151915283604051610ad49190613f3f565b600081815260086020908152604080832060c0870151845260040190915290205460ff166127b4576000805160206144f783398151915283604051610ad4919061404f565b600081815260086020908152604080832060c08701518452600401909152902054600160ff90911611156127ff576000805160206144f783398151915283604051610ad49190613ff7565b600081815260086020526040902054600160ff9091161115612838576000805160206144f783398151915283604051610ad4919061413d565b600081815260086020818152604080842060c08801518552600481018352908420805460ff191660029081179091558585529290915201805460019290612880908490614403565b9091555050600254604051600080516020614517833981519152916128b19184919043906004906001908990613e06565b60405180910390a1600081815260086020526040902060018101546002909101541415610f57576000818152600860205260408120805460ff191660021790555b600082815260086020526040902060010154811015610e54576000828152600860209081526040808320848452600301825280832054808452600583528184208251610140810184528154815260018201549481019490945260028101549194939290919083019060ff16600481111561297c57634e487b7160e01b600052602160045260246000fd5b600481111561299b57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015612a845783829060005260206000200180546129f79061445e565b80601f0160208091040260200160405190810160405280929190818152602001828054612a239061445e565b8015612a705780601f10612a4557610100808354040283529160200191612a70565b820191906000526020600020905b815481529060010190602001808311612a5357829003601f168201915b5050505050815260200190600101906129d8565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050612abe61359a565b6002548152602082810151908201526003604082018181525050600160036000828254612aeb9190614403565b909155505060035460808201526040805160028082526060820190925290816020015b6060815260200190600190039081612b0e579050508160a001819052508160a00151600081518110612b5057634e487b7160e01b600052603260045260246000fd5b60200260200101518160a00151600081518110612b7d57634e487b7160e01b600052603260045260246000fd5b602002602001018190525084604051602001612b9b91815260200190565b6040516020818303038152906040528160a00151600181518110612bcf57634e487b7160e01b600052603260045260246000fd5b60209081029190910101524360608201819052600454612bee91614403565b6101208201526000612bff826103dc565b60035460009081526006602090815260408083208490558383526005825291829020855181559085015160018083019190915591850151600282018054949550869492939192909160ff1990911690836004811115612c6e57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051612ca291600584019160209091019061360b565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020614537833981519152816002604051612cf0929190613de2565b60405180910390a1600080516020614517833981519152868260025443600660018d604051612d259796959493929190613d9e565b60405180910390a1505050508080612d3c90614499565b9150506128f2565b60008260a00151600181518110612d6b57634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190612d869190613a8f565b60008181526008602052604090205490915060ff16612dbc576000805160206144f783398151915283604051610ad49190613f3f565b600081815260086020908152604080832060c0870151845260040190915290205460ff16612e01576000805160206144f783398151915283604051610ad4919061404f565b600081815260086020908152604080832060c08701518452600401909152902054600160ff9091161115612e4c576000805160206144f783398151915283604051610ad49190613ff7565b600081815260086020526040902054600160ff9091161115612e85576000805160206144f783398151915283604051610ad4919061413d565b60008181526008602090815260408083208054600360ff199182168117835560c089015186526004928301909452938290208054909416909217909255600254915160008051602061451783398151915292612eea9285924391906001908990613e06565b60405180910390a160005b600082815260086020526040902060010154811015610e5457600082815260086020908152604080832084845260030190915290205460c0850151811415612f3d5750613367565b600083815260086020908152604080832084845260049081018352818420805460ff19168217905560058352818420825161014081018452815481526001820154948101949094526002810154909284019160ff90911690811115612fb257634e487b7160e01b600052602160045260246000fd5b6004811115612fd157634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156130ba57838290600052602060002001805461302d9061445e565b80601f01602080910402602001604051908101604052809291908181526020018280546130599061445e565b80156130a65780601f1061307b576101008083540402835291602001916130a6565b820191906000526020600020905b81548152906001019060200180831161308957829003601f168201915b50505050508152602001906001019061300e565b50505050815260200160068201548152602001600782015481526020016008820154815260200160098201548152505090506130f461359a565b600254815260208281015190820152600460408201819052506040805160028082526060820190925290816020015b6060815260200190600190039081613123579050508160a001819052508160a0015160008151811061316557634e487b7160e01b600052603260045260246000fd5b60200260200101518160a0015160008151811061319257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250846040516020016131b091815260200190565b6040516020818303038152906040528160a001516001815181106131e457634e487b7160e01b600052603260045260246000fd5b60200260200101819052506001600360008282546132029190614403565b90915550506003546080820152436060820181905260045461322391614403565b6101208201526000613234826103dc565b60035460009081526006602090815260408083208490558383526005825291829020855181559085015160018083019190915591850151600282018054949550869492939192909160ff19909116908360048111156132a357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516132d791600584019160209091019061360b565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020614537833981519152816002604051613325929190613de2565b60405180910390a1600080516020614517833981519152868260025443600860018d60405161335a9796959493929190613d9e565b60405180910390a1505050505b8061337181614499565b915050612ef5565b60008260a001516001815181106133a057634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906133bb9190613a8f565b90506000805160206145178339815191528160025443600a600187604051610ad496959493929190613e06565b60006133f3836103dc565b83516000908152600c60209081526040808320610120880151845282528083208484529091529020549091501561342a5750610ade565b82516000908152600c6020908152604080832061012087015184528252808320600190810180548083018255908552938390208751600a90950201938455918601518383015585015160028301805487949360ff19909116908360048111156134a357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516134d791600584019160209091019061360b565b5060c0820151600682015560e0820151600782015561010082015160088201556101209182015160099091015583516000908152600c60208181526040808420948801805185529482528084206002018054600180820183559186528386200188905588518552838352818520865186528352818520015488518552928252808420945184529381528383208584528152918390205590518281527fce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab9101610ad4565b6040518061014001604052806000815260200160008152602001600060048111156135d557634e487b7160e01b600052602160045260246000fd5b8152600060208201819052604082018190526060808301526080820181905260a0820181905260c0820181905260e09091015290565b828054828255906000526020600020908101928215613658579160200282015b8281111561365857825180516136489184916020909101906136c5565b509160200191906001019061362b565b50613664929150613745565b5090565b5080546000825590600052602060002090810190611e1b9190613745565b50805460008255600a0290600052602060002090810190611e1b9190613762565b5080546000825590600052602060002090810190611e1b91906137c2565b8280546136d19061445e565b90600052602060002090601f0160209004810192826136f35760008555613739565b82601f1061370c57805160ff1916838001178555613739565b82800160010185558215613739579182015b8281111561373957825182559160200191906001019061371e565b506136649291506137c2565b8082111561366457600061375982826137d7565b50600101613745565b808211156136645760008082556001820181905560028201805460ff19169055600382018190556004820181905561379d6005830182613668565b5060006006820181905560078201819055600882018190556009820155600a01613762565b5b8082111561366457600081556001016137c3565b5080546137e39061445e565b6000825580601f106137f55750611e1b565b601f016020900490600052602060002090810190611e1b91906137c2565b600067ffffffffffffffff83111561382d5761382d6144e0565b613840601f8401601f19166020016143ae565b905082815283838301111561385457600080fd5b828260208301376000602084830101529392505050565b600082601f83011261387b578081fd5b8135602061389061388b836143df565b6143ae565b82815281810190858301855b858110156138c5576138b3898684358b01016138d2565b8452928401929084019060010161389c565b5090979650505050505050565b600082601f8301126138e2578081fd5b610aed83833560208501613813565b80356005811061043b57600080fd5b600060408284031215613911578081fd5b61391b60406143ae565b9050813581526020820135602082015292915050565b6000610140808385031215613944578182fd5b61394d816143ae565b915050813581526020820135602082015261396a604083016138f1565b6040820152606082013560608201526080820135608082015260a082013567ffffffffffffffff81111561399d57600080fd5b6139a98482850161386b565b60a08301525060c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b600080604083850312156139f3578182fd5b823567ffffffffffffffff811115613a09578283fd5b8301601f81018513613a19578283fd5b80356020613a2961388b836143df565b82815281810190848301838502860184018a1015613a45578788fd5b8795505b84861015613a67578035835260019590950194918301918301613a49565b5098969091013596505050505050565b600060208284031215613a88578081fd5b5035919050565b600060208284031215613aa0578081fd5b5051919050565b60008060408385031215613ab9578182fd5b823567ffffffffffffffff811115613acf578283fd5b8301601f81018513613adf578283fd5b613aee85823560208401613813565b95602094909401359450505050565b600080600060808486031215613b11578081fd5b613b1b8585613900565b9250604084013567ffffffffffffffff80821115613b37578283fd5b613b4387838801613931565b93506060860135915080821115613b58578283fd5b50613b65868287016138d2565b9150509250925092565b600060208284031215613b80578081fd5b813567ffffffffffffffff811115613b96578182fd5b613ba284828501613931565b949350505050565b60008060408385031215613bbc578182fd5b823567ffffffffffffffff80821115613bd3578384fd5b613bdf86838701613931565b93506020850135915080821115613bf4578283fd5b50613c01858286016138d2565b9150509250929050565b60008060608385031215613c1d578182fd5b82359150613c2e8460208501613900565b90509250929050565b60008060408385031215613c49578182fd5b50508035926020909101359150565b6000815180845260208085018081965082840281019150828601855b85811015613c9e578284038952613c8c848351613cab565b98850198935090840190600101613c74565b5091979650505050505050565b60008151808452613cc3816020860160208601614432565b601f01601f19169290920160200192915050565b60058110613ce757613ce76144ca565b9052565b600d8110613ce757613ce76144ca565b600061014082518452602083015160208501526040830151613d206040860182613cd7565b50606083015160608501526080830151608085015260a08301518160a0860152613d4c82860182613c58565b60c0858101519087015260e080860151908701526101008086015190870152610120948501519490950193909352509192915050565b60008251613d94818460208701614432565b9190910192915050565b600060e082019050888252876020830152866040830152856060830152613dc86080830186613ceb565b92151560a082015290151560c09091015295945050505050565b8281526040810160048310613df957613df96144ca565b8260208301529392505050565b86815260006020820152604081018690526060810185905260e08101613e2f6080830186613ceb565b92151560a082015290151560c090910152949350505050565b60006040825260156040830152741d1a19481a195859195c881a5cc8195e1a5cdd1959605a1b606083015260806020830152610aed6080830184613cab565b600060408252602260408301527f7468652070726576696f757320686561646572206973206e6f74206578697374606083015261195960f21b608083015260a06020830152610aed60a0830184613cab565b600060208252610aed6020830184613cfb565b600060608252613eff6060830184613cfb565b8281036020808501829052601183527077726f6e6720706861736520696e20636d60781b9083015260409081019381019390935291820152606001919050565b600060608252613f526060830184613cfb565b8281036020808501829052601a83527f746865207472616e73616374696f6e20697320696e76616c69640000000000009083015260409081019381019390935291820152606001919050565b600060608252613fb16060830185613cfb565b828103806020850152601082526f3bb937b7339034b232b73a34b334b2b960811b602083015260408101604085015250613fee6040820185613cab565b95945050505050565b60006060825261400a6060830184613cfb565b828103602080850182905260168352751d1a194818db481a185cc81899595b881919585b195960521b9083015260409081019381019390935291820152606001919050565b6000606082526140626060830184613cfb565b828103806020850152602682527f74686520636d206973206e6f7420696e20746865207472616e73616374696f6e60208301526502067726f75760d41b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526140d46060830184613cfb565b828103806020850152603082527f50524550415245206d657373616765206d757374206e6f7420626520696e207560208301526f6e636f6e6669726d656420717565756560801b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526141506060830184613cfb565b828103806020850152602b82527f746865207472616e73616374696f6e20686173206265656e20636f6d6d69742060208301526a6f7220726f6c6c6261636b60a81b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526141c76060830184613cfb565b828103806020850152605482527f496c6c6567616c2120736861646f774c6f636b2073686f756c64206e6f74206260208301527f65206f776e656420627920636d2e6578706563746564486569676874207768656040830152736e207072657061726528636f6e6669726d65642960601b60608301526080810160408501525081608082015260a0810191505092915050565b60006060825261426d6060830184613cfb565b828103806020850152605382527f50414e49432120736861646f774c6f636b2073686f756c64206e6f742062652060208301527f6f776e656420627920636d2e6578706563746564486569676874207768656e20604083015272726f6c6c6261636b28636f6e6669726d65642960681b60608301526080810160408501525081608082015260a0810191505092915050565b60006101408083018d845260208d8186015261431e604086018e613cd7565b606085018c9052608085018b905260a085019290925288519081905261016080850192808302860190910191818b01855b8281101561437e5761015f1988860301865261436c858351613cab565b9584019594509083019060010161434f565b5050505060c0840197909752505060e0810193909352610100830191909152610120909101529695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156143d7576143d76144e0565b604052919050565b600067ffffffffffffffff8211156143f9576143f96144e0565b5060209081020190565b60008219821115614416576144166144b4565b500190565b60008282101561442d5761442d6144b4565b500390565b60005b8381101561444d578181015183820152602001614435565b83811115610e545750506000910152565b60028104600182168061447257607f821691505b6020821081141561449357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156144ad576144ad6144b4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfee224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99ef2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb823abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9a2646970667358221220d945525b73ef6cf7710e59f100a97bc9718cea58c8f83b9588817aa417c7f72c64736f6c63430008020033",
}

// SR2PCABI is the input ABI used to generate the binding from.
// Deprecated: Use SR2PCMetaData.ABI instead.
var SR2PCABI = SR2PCMetaData.ABI

// SR2PCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SR2PCMetaData.Bin instead.
var SR2PCBin = SR2PCMetaData.Bin

// DeploySR2PC deploys a new Ethereum contract, binding an instance of SR2PC to it.
func DeploySR2PC(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId *big.Int, _expectedTrustDelta *big.Int) (common.Address, *types.Transaction, *SR2PC, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SR2PCBin), backend, _chainId, _expectedTrustDelta)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// SR2PC is an auto generated Go binding around an Ethereum contract.
type SR2PC struct {
	SR2PCCaller     // Read-only binding to the contract
	SR2PCTransactor // Write-only binding to the contract
	SR2PCFilterer   // Log filterer for contract events
}

// SR2PCCaller is an auto generated read-only Go binding around an Ethereum contract.
type SR2PCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SR2PCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SR2PCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SR2PCSession struct {
	Contract     *SR2PC            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SR2PCCallerSession struct {
	Contract *SR2PCCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SR2PCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SR2PCTransactorSession struct {
	Contract     *SR2PCTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCRaw is an auto generated low-level Go binding around an Ethereum contract.
type SR2PCRaw struct {
	Contract *SR2PC // Generic contract binding to access the raw methods on
}

// SR2PCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SR2PCCallerRaw struct {
	Contract *SR2PCCaller // Generic read-only contract binding to access the raw methods on
}

// SR2PCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SR2PCTransactorRaw struct {
	Contract *SR2PCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSR2PC creates a new instance of SR2PC, bound to a specific deployed contract.
func NewSR2PC(address common.Address, backend bind.ContractBackend) (*SR2PC, error) {
	contract, err := bindSR2PC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// NewSR2PCCaller creates a new read-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCCaller(address common.Address, caller bind.ContractCaller) (*SR2PCCaller, error) {
	contract, err := bindSR2PC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCCaller{contract: contract}, nil
}

// NewSR2PCTransactor creates a new write-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCTransactor(address common.Address, transactor bind.ContractTransactor) (*SR2PCTransactor, error) {
	contract, err := bindSR2PC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCTransactor{contract: contract}, nil
}

// NewSR2PCFilterer creates a new log filterer instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCFilterer(address common.Address, filterer bind.ContractFilterer) (*SR2PCFilterer, error) {
	contract, err := bindSR2PC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SR2PCFilterer{contract: contract}, nil
}

// bindSR2PC binds a generic wrapper to an already deployed contract.
func bindSR2PC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.SR2PCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transact(opts, method, params...)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x44b9bd89.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CalculateRoot(opts *bind.CallOpts, cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "calculateRoot", cm, proof)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateRoot is a free data retrieval call binding the contract method 0x44b9bd89.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CalculateRoot(cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x44b9bd89.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CalculateRoot(cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CmToHash is a free data retrieval call binding the contract method 0x0c8b9b12.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CmToHash(opts *bind.CallOpts, cm SR2PCCrossMessage) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "cmToHash", cm)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CmToHash is a free data retrieval call binding the contract method 0x0c8b9b12.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CmToHash(cm SR2PCCrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// CmToHash is a free data retrieval call binding the contract method 0x0c8b9b12.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CmToHash(cm SR2PCCrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256))
func (_SR2PC *SR2PCCaller) GetCMByHash(opts *bind.CallOpts, cmHash [32]byte) (SR2PCCrossMessage, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getCMByHash", cmHash)

	if err != nil {
		return *new(SR2PCCrossMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCCrossMessage)).(*SR2PCCrossMessage)

	return out0, err

}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256))
func (_SR2PC *SR2PCSession) GetCMByHash(cmHash [32]byte) (SR2PCCrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256))
func (_SR2PC *SR2PCCallerSession) GetCMByHash(cmHash [32]byte) (SR2PCCrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetHeader(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getHeader", _chainId, _height)

	if err != nil {
		return *new(SR2PCBlockHeader), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCBlockHeader)).(*SR2PCBlockHeader)

	return out0, err

}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCCaller) GetShadowLock(opts *bind.CallOpts) (SR2PCShadowLock, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getShadowLock")

	if err != nil {
		return *new(SR2PCShadowLock), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCShadowLock)).(*SR2PCShadowLock)

	return out0, err

}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCSession) GetShadowLock() (SR2PCShadowLock, error) {
	return _SR2PC.Contract.GetShadowLock(&_SR2PC.CallOpts)
}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCCallerSession) GetShadowLock() (SR2PCShadowLock, error) {
	return _SR2PC.Contract.GetShadowLock(&_SR2PC.CallOpts)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTransStatus(opts *bind.CallOpts, _transactionPoint *big.Int) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransStatus", _transactionPoint)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetTransSuccessNumber(opts *bind.CallOpts, _transactionPoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransSuccessNumber", _transactionPoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCaller) GetTransactionHash(opts *bind.CallOpts, _point *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransactionHash", _point)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCallerSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetUncfmQueueLength(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUncfmQueueLength", _chainId, _height)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCCaller) GetValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCSession) GetValue() (*big.Int, error) {
	return _SR2PC.Contract.GetValue(&_SR2PC.CallOpts)
}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetValue() (*big.Int, error) {
	return _SR2PC.Contract.GetValue(&_SR2PC.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCCaller) Value(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "value")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCSession) Value() (*big.Int, error) {
	return _SR2PC.Contract.Value(&_SR2PC.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCCallerSession) Value() (*big.Int, error) {
	return _SR2PC.Contract.Value(&_SR2PC.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0x366c7d43.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCaller) Verify(opts *bind.CallOpts, header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "verify", header, cm, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x366c7d43.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCSession) Verify(header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// Verify is a free data retrieval call binding the contract method 0x366c7d43.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCallerSession) Verify(header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x11ba08d7.
//
// Solidity: function CrossRetry(string identifier, bytes32 cmHash) returns()
func (_SR2PC *SR2PCTransactor) CrossRetry(opts *bind.TransactOpts, identifier string, cmHash [32]byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "CrossRetry", identifier, cmHash)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x11ba08d7.
//
// Solidity: function CrossRetry(string identifier, bytes32 cmHash) returns()
func (_SR2PC *SR2PCSession) CrossRetry(identifier string, cmHash [32]byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossRetry(&_SR2PC.TransactOpts, identifier, cmHash)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x11ba08d7.
//
// Solidity: function CrossRetry(string identifier, bytes32 cmHash) returns()
func (_SR2PC *SR2PCTransactorSession) CrossRetry(identifier string, cmHash [32]byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossRetry(&_SR2PC.TransactOpts, identifier, cmHash)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactor) CrossReceive(opts *bind.TransactOpts, cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossReceive", cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCSession) CrossReceive(cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactorSession) CrossReceive(cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCTransactor) CrossSend(opts *bind.TransactOpts, _targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossSend", _targetChainIds, _value)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCTransactorSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactor) SyncHeader(opts *bind.TransactOpts, _chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "syncHeader", _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactorSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCTransactor) TestUpdateValue(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "test_updateValue", _value)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCSession) TestUpdateValue(_value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.TestUpdateValue(&_SR2PC.TransactOpts, _value)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCTransactorSession) TestUpdateValue(_value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.TestUpdateValue(&_SR2PC.TransactOpts, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactorSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// SR2PCErrorIterator is returned from FilterError and is used to iterate over the raw logs and unpacked data for Error events raised by the SR2PC contract.
type SR2PCErrorIterator struct {
	Event *SR2PCError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCError represents a Error event raised by the SR2PC contract.
type SR2PCError struct {
	Cm     SR2PCCrossMessage
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterError is a free log retrieval operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterError(opts *bind.FilterOpts) (*SR2PCErrorIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return &SR2PCErrorIterator{contract: _SR2PC.contract, event: "Error", logs: logs, sub: sub}, nil
}

// WatchError is a free log subscription operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchError(opts *bind.WatchOpts, sink chan<- *SR2PCError) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCError)
				if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseError is a log parse operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseError(log types.Log) (*SR2PCError, error) {
	event := new(SR2PCError)
	if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCMetricsIterator is returned from FilterMetrics and is used to iterate over the raw logs and unpacked data for Metrics events raised by the SR2PC contract.
type SR2PCMetricsIterator struct {
	Event *SR2PCMetrics // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCMetricsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCMetrics)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCMetrics)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCMetricsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCMetricsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCMetrics represents a Metrics event raised by the SR2PC contract.
type SR2PCMetrics struct {
	TransactionHash [32]byte
	CmHash          [32]byte
	ChainId         *big.Int
	Height          *big.Int
	Phase           uint8
	IsConfirmed     bool
	ByHeader        bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMetrics is a free log retrieval operation binding the contract event 0xf2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb8.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, uint256 chainId, uint256 height, uint8 phase, bool isConfirmed, bool byHeader)
func (_SR2PC *SR2PCFilterer) FilterMetrics(opts *bind.FilterOpts) (*SR2PCMetricsIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Metrics")
	if err != nil {
		return nil, err
	}
	return &SR2PCMetricsIterator{contract: _SR2PC.contract, event: "Metrics", logs: logs, sub: sub}, nil
}

// WatchMetrics is a free log subscription operation binding the contract event 0xf2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb8.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, uint256 chainId, uint256 height, uint8 phase, bool isConfirmed, bool byHeader)
func (_SR2PC *SR2PCFilterer) WatchMetrics(opts *bind.WatchOpts, sink chan<- *SR2PCMetrics) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Metrics")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCMetrics)
				if err := _SR2PC.contract.UnpackLog(event, "Metrics", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetrics is a log parse operation binding the contract event 0xf2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb8.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, uint256 chainId, uint256 height, uint8 phase, bool isConfirmed, bool byHeader)
func (_SR2PC *SR2PCFilterer) ParseMetrics(log types.Log) (*SR2PCMetrics, error) {
	event := new(SR2PCMetrics)
	if err := _SR2PC.contract.UnpackLog(event, "Metrics", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the SR2PC contract.
type SR2PCReceivedIterator struct {
	Event *SR2PCReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCReceived represents a Received event raised by the SR2PC contract.
type SR2PCReceived struct {
	User  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) FilterReceived(opts *bind.FilterOpts) (*SR2PCReceivedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &SR2PCReceivedIterator{contract: _SR2PC.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *SR2PCReceived) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCReceived)
				if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) ParseReceived(log types.Log) (*SR2PCReceived, error) {
	event := new(SR2PCReceived)
	if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryPrepareConfirmCMIterator is returned from FilterRetryPrepareConfirmCM and is used to iterate over the raw logs and unpacked data for RetryPrepareConfirmCM events raised by the SR2PC contract.
type SR2PCRetryPrepareConfirmCMIterator struct {
	Event *SR2PCRetryPrepareConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryPrepareConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryPrepareConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryPrepareConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryPrepareConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryPrepareConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryPrepareConfirmCM represents a RetryPrepareConfirmCM event raised by the SR2PC contract.
type SR2PCRetryPrepareConfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryPrepareConfirmCM is a free log retrieval operation binding the contract event 0x345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e.
//
// Solidity: event RetryPrepareConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryPrepareConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryPrepareConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryPrepareConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryPrepareConfirmCMIterator{contract: _SR2PC.contract, event: "RetryPrepareConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryPrepareConfirmCM is a free log subscription operation binding the contract event 0x345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e.
//
// Solidity: event RetryPrepareConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryPrepareConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryPrepareConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryPrepareConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryPrepareConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryPrepareConfirmCM is a log parse operation binding the contract event 0x345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e.
//
// Solidity: event RetryPrepareConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryPrepareConfirmCM(log types.Log) (*SR2PCRetryPrepareConfirmCM, error) {
	event := new(SR2PCRetryPrepareConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryPrepareUnconfirmCMIterator is returned from FilterRetryPrepareUnconfirmCM and is used to iterate over the raw logs and unpacked data for RetryPrepareUnconfirmCM events raised by the SR2PC contract.
type SR2PCRetryPrepareUnconfirmCMIterator struct {
	Event *SR2PCRetryPrepareUnconfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryPrepareUnconfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryPrepareUnconfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryPrepareUnconfirmCM represents a RetryPrepareUnconfirmCM event raised by the SR2PC contract.
type SR2PCRetryPrepareUnconfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryPrepareUnconfirmCM is a free log retrieval operation binding the contract event 0x2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43.
//
// Solidity: event RetryPrepareUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryPrepareUnconfirmCM(opts *bind.FilterOpts) (*SR2PCRetryPrepareUnconfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryPrepareUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryPrepareUnconfirmCMIterator{contract: _SR2PC.contract, event: "RetryPrepareUnconfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryPrepareUnconfirmCM is a free log subscription operation binding the contract event 0x2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43.
//
// Solidity: event RetryPrepareUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryPrepareUnconfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryPrepareUnconfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryPrepareUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryPrepareUnconfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareUnconfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryPrepareUnconfirmCM is a log parse operation binding the contract event 0x2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43.
//
// Solidity: event RetryPrepareUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryPrepareUnconfirmCM(log types.Log) (*SR2PCRetryPrepareUnconfirmCM, error) {
	event := new(SR2PCRetryPrepareUnconfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareUnconfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryRollbackConfirmCMIterator is returned from FilterRetryRollbackConfirmCM and is used to iterate over the raw logs and unpacked data for RetryRollbackConfirmCM events raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCMIterator struct {
	Event *SR2PCRetryRollbackConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryRollbackConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryRollbackConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryRollbackConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryRollbackConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryRollbackConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryRollbackConfirmCM represents a RetryRollbackConfirmCM event raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryRollbackConfirmCM is a free log retrieval operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryRollbackConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryRollbackConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryRollbackConfirmCMIterator{contract: _SR2PC.contract, event: "RetryRollbackConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryRollbackConfirmCM is a free log subscription operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryRollbackConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryRollbackConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryRollbackConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryRollbackConfirmCM is a log parse operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryRollbackConfirmCM(log types.Log) (*SR2PCRetryRollbackConfirmCM, error) {
	event := new(SR2PCRetryRollbackConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRollbackConfirmedIterator is returned from FilterRollbackConfirmed and is used to iterate over the raw logs and unpacked data for RollbackConfirmed events raised by the SR2PC contract.
type SR2PCRollbackConfirmedIterator struct {
	Event *SR2PCRollbackConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRollbackConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRollbackConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRollbackConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRollbackConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRollbackConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRollbackConfirmed represents a RollbackConfirmed event raised by the SR2PC contract.
type SR2PCRollbackConfirmed struct {
	CmHash [32]byte
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollbackConfirmed is a free log retrieval operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) FilterRollbackConfirmed(opts *bind.FilterOpts) (*SR2PCRollbackConfirmedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return &SR2PCRollbackConfirmedIterator{contract: _SR2PC.contract, event: "RollbackConfirmed", logs: logs, sub: sub}, nil
}

// WatchRollbackConfirmed is a free log subscription operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) WatchRollbackConfirmed(opts *bind.WatchOpts, sink chan<- *SR2PCRollbackConfirmed) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRollbackConfirmed)
				if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollbackConfirmed is a log parse operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) ParseRollbackConfirmed(log types.Log) (*SR2PCRollbackConfirmed, error) {
	event := new(SR2PCRollbackConfirmed)
	if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSendCMHashIterator is returned from FilterSendCMHash and is used to iterate over the raw logs and unpacked data for SendCMHash events raised by the SR2PC contract.
type SR2PCSendCMHashIterator struct {
	Event *SR2PCSendCMHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSendCMHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSendCMHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSendCMHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSendCMHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSendCMHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSendCMHash represents a SendCMHash event raised by the SR2PC contract.
type SR2PCSendCMHash struct {
	CmHash [32]byte
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSendCMHash is a free log retrieval operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) FilterSendCMHash(opts *bind.FilterOpts) (*SR2PCSendCMHashIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return &SR2PCSendCMHashIterator{contract: _SR2PC.contract, event: "SendCMHash", logs: logs, sub: sub}, nil
}

// WatchSendCMHash is a free log subscription operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) WatchSendCMHash(opts *bind.WatchOpts, sink chan<- *SR2PCSendCMHash) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSendCMHash)
				if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCMHash is a log parse operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) ParseSendCMHash(log types.Log) (*SR2PCSendCMHash, error) {
	event := new(SR2PCSendCMHash)
	if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCShadowStoreIterator is returned from FilterShadowStore and is used to iterate over the raw logs and unpacked data for ShadowStore events raised by the SR2PC contract.
type SR2PCShadowStoreIterator struct {
	Event *SR2PCShadowStore // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCShadowStoreIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCShadowStore)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCShadowStore)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCShadowStoreIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCShadowStoreIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCShadowStore represents a ShadowStore event raised by the SR2PC contract.
type SR2PCShadowStore struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterShadowStore is a free log retrieval operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterShadowStore(opts *bind.FilterOpts) (*SR2PCShadowStoreIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return &SR2PCShadowStoreIterator{contract: _SR2PC.contract, event: "ShadowStore", logs: logs, sub: sub}, nil
}

// WatchShadowStore is a free log subscription operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchShadowStore(opts *bind.WatchOpts, sink chan<- *SR2PCShadowStore) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCShadowStore)
				if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShadowStore is a log parse operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseShadowStore(log types.Log) (*SR2PCShadowStore, error) {
	event := new(SR2PCShadowStore)
	if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSyncHeaderIterator is returned from FilterSyncHeader and is used to iterate over the raw logs and unpacked data for SyncHeader events raised by the SR2PC contract.
type SR2PCSyncHeaderIterator struct {
	Event *SR2PCSyncHeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSyncHeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSyncHeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSyncHeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSyncHeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSyncHeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSyncHeader represents a SyncHeader event raised by the SR2PC contract.
type SR2PCSyncHeader struct {
	ChainId *big.Int
	Height  *big.Int
	Root    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSyncHeader is a free log retrieval operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) FilterSyncHeader(opts *bind.FilterOpts) (*SR2PCSyncHeaderIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return &SR2PCSyncHeaderIterator{contract: _SR2PC.contract, event: "SyncHeader", logs: logs, sub: sub}, nil
}

// WatchSyncHeader is a free log subscription operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) WatchSyncHeader(opts *bind.WatchOpts, sink chan<- *SR2PCSyncHeader) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSyncHeader)
				if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncHeader is a log parse operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) ParseSyncHeader(log types.Log) (*SR2PCSyncHeader, error) {
	event := new(SR2PCSyncHeader)
	if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCUnlockedIterator is returned from FilterUnlocked and is used to iterate over the raw logs and unpacked data for Unlocked events raised by the SR2PC contract.
type SR2PCUnlockedIterator struct {
	Event *SR2PCUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCUnlocked represents a Unlocked event raised by the SR2PC contract.
type SR2PCUnlocked struct {
	ChainId *big.Int
	Height  *big.Int
	Root    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnlocked is a free log retrieval operation binding the contract event 0x4878afe8bf21812f17301038432841207b83956c9cb783f12cbf95a873246d59.
//
// Solidity: event Unlocked(uint256 chainId, uint256 height, bytes32 root)
func (_SR2PC *SR2PCFilterer) FilterUnlocked(opts *bind.FilterOpts) (*SR2PCUnlockedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Unlocked")
	if err != nil {
		return nil, err
	}
	return &SR2PCUnlockedIterator{contract: _SR2PC.contract, event: "Unlocked", logs: logs, sub: sub}, nil
}

// WatchUnlocked is a free log subscription operation binding the contract event 0x4878afe8bf21812f17301038432841207b83956c9cb783f12cbf95a873246d59.
//
// Solidity: event Unlocked(uint256 chainId, uint256 height, bytes32 root)
func (_SR2PC *SR2PCFilterer) WatchUnlocked(opts *bind.WatchOpts, sink chan<- *SR2PCUnlocked) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Unlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCUnlocked)
				if err := _SR2PC.contract.UnpackLog(event, "Unlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlocked is a log parse operation binding the contract event 0x4878afe8bf21812f17301038432841207b83956c9cb783f12cbf95a873246d59.
//
// Solidity: event Unlocked(uint256 chainId, uint256 height, bytes32 root)
func (_SR2PC *SR2PCFilterer) ParseUnlocked(log types.Log) (*SR2PCUnlocked, error) {
	event := new(SR2PCUnlocked)
	if err := _SR2PC.contract.UnpackLog(event, "Unlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCWarningIterator is returned from FilterWarning and is used to iterate over the raw logs and unpacked data for Warning events raised by the SR2PC contract.
type SR2PCWarningIterator struct {
	Event *SR2PCWarning // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCWarningIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCWarning)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCWarning)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCWarningIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCWarningIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCWarning represents a Warning event raised by the SR2PC contract.
type SR2PCWarning struct {
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWarning is a free log retrieval operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterWarning(opts *bind.FilterOpts) (*SR2PCWarningIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return &SR2PCWarningIterator{contract: _SR2PC.contract, event: "Warning", logs: logs, sub: sub}, nil
}

// WatchWarning is a free log subscription operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchWarning(opts *bind.WatchOpts, sink chan<- *SR2PCWarning) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCWarning)
				if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWarning is a log parse operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseWarning(log types.Log) (*SR2PCWarning, error) {
	event := new(SR2PCWarning)
	if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
