// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SR2PC

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SR2PCBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type SR2PCBlockHeader struct {
	Height *big.Int
	Root   [32]byte
}

// SR2PCCrossMessage is an auto generated low-level Go binding around an user-defined struct.
type SR2PCCrossMessage struct {
	SourceChainId *big.Int
	TargetChainId *big.Int
	Phase         uint8
	SourceHeight  *big.Int
	Nonce         *big.Int
	Payload       [][]byte
	CmInputHash   [32]byte
	CmInputHeight *big.Int
	RespPayload   [32]byte
}

// SR2PCShadowLock is an auto generated low-level Go binding around an user-defined struct.
type SR2PCShadowLock struct {
	ChainId *big.Int
	Height  *big.Int
}

// SR2PCMetaData contains all meta data concerning the SR2PC contract.
var SR2PCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byHeader\",\"type\":\"bool\"}],\"name\":\"MetricsCm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"MetricsUncfms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryReceiveConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryReceiveUnconfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryRollbackConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RollbackConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.CMStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SendCMHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"ShadowStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"SyncHeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Warning\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"calculateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"}],\"name\":\"cmToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"crossReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"crossSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"getCMByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getHeader\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShadowLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.ShadowLock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransSuccessNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getUncfmQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"}],\"name\":\"syncHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"test_updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60806040526001805460ff191681179055600060038190556006553480156200002757600080fd5b506040516200376f3803806200376f8339810160408190526200004a916200007e565b6127106000908155600291909155600381905560408051808201909152818152602001819052600881905560095562000097565b60006020828403121562000090578081fd5b5051919050565b6136c880620000a76000396000f3fe6080604052600436106100f75760003560e01c8063a1f2c2881161008a578063d3b4fbbb11610059578063d3b4fbbb14610331578063e7f2e57314610351578063eb6724e414610371578063f678f80d1461039157610136565b8063a1f2c2881461025d578063ab1e268914610297578063ac676d32146102c4578063cc38a482146102ff57610136565b80633fa4f245116100c65780633fa4f245146101c35780634d522c51146101d95780636e53670a146101ee57806373edc6c71461022957610136565b8063111343841461013b578063209652551461016e5780632a8c56461461018357806334e7d36b146101a357610136565b3661013657604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561014757600080fd5b5061015b610156366004612d63565b6103b1565b6040519081526020015b60405180910390f35b34801561017a57600080fd5b5060005461015b565b34801561018f57600080fd5b5061015b61019e366004612e05565b6103ef565b3480156101af57600080fd5b5061015b6101be366004612e40565b61042f565b3480156101cf57600080fd5b5061015b60005481565b6101ec6101e7366004612ccd565b610441565b005b3480156101fa57600080fd5b5061020e610209366004612ecd565b61074a565b60408051825181526020928301519281019290925201610165565b34801561023557600080fd5b5061024d610244366004612d93565b60019392505050565b6040519015158152602001610165565b34801561026957600080fd5b506040805180820182526000808252602091820152815180830190925260085482526009549082015261020e565b3480156102a357600080fd5b506102b76102b2366004612d63565b61078b565b60405161016591906130c7565b3480156102d057600080fd5b5061015b6102df366004612ecd565b6000918252600b6020908152604080842092845291905290206001015490565b34801561030b57600080fd5b5061031f61031a366004612d63565b610921565b60405160ff9091168152602001610165565b34801561033d57600080fd5b506101ec61034c366004612ea1565b610971565b34801561035d57600080fd5b506101ec61036c366004612e40565b610b5c565b34801561037d57600080fd5b506101ec61038c366004612d63565b600055565b34801561039d57600080fd5b5061015b6103ac366004612d63565b610c07565b6000600254826040516020016103d1929190918252602082015260400190565b6040516020818303038152906040528051906020012090505b919050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0151965160009a6103d19a9099989101613490565b600061043a82610c57565b9392505050565b600160066000828254610454919061358b565b909155505060025460065460408051602081019390935282015260009060600160408051601f198184030181529181528151602092830120855160008281526007909452918320600180820193909355805460ff191690921790915591505b83518110156107445760008482815181106104de57634e487b7160e01b600052603260045260246000fd5b602002602001015190506104f06128ac565b600254815260208101829052436060820152600380546001919060009061051890849061358b565b90915550506003546080820152600060408201819052506040805160028082526060820190925290816020015b60608152602001906001900390816105455790505060a08201526040805160208101879052016040516020818303038152906040528160a0015160008151811061059f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250836040516020016105bd91815260200190565b6040516020818303038152906040528160a001516001815181106105f157634e487b7160e01b600052603260045260246000fd5b60200260200101819052506000610607826103ef565b90508160046000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600481111561066957634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a0820151805161069d916005840191602090910190612916565b5060c0820151600682015560e082015160078201556101009091015160089091015560035460009081526005602052604080822083905551600080516020613673833981519152916106f191849190613012565b60405180910390a160008581526007602090815260408083208784526003810183528184208590559383526004909301905220805460ff191660011790555081905061073c816135f5565b9150506104b3565b50505050565b60408051808201825260008082526020918201819052938452600f815281842092845291825291829020825180840190935280548352600101549082015290565b6107936128ac565b600082815260046020818152604092839020835161012081018552815481526001820154928101929092526002810154919390929084019160ff16908111156107ec57634e487b7160e01b600052602160045260246000fd5b600481111561080b57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156108f4578382906000526020600020018054610867906135ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610893906135ba565b80156108e05780601f106108b5576101008083540402835291602001916108e0565b820191906000526020600020905b8154815290600101906020018083116108c357829003601f168201915b505050505081526020019060010190610848565b50505050815260200160068201548152602001600782015481526020016008820154815250509050919050565b60008060025483604051602001610942929190918252602082015260400190565b60408051808303601f1901815291815281516020928301206000908152600790925290205460ff169392505050565b600061098183836000015161074a565b8051835191925014156109f55781516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7916109cd91869190602001918252602082015260400190565b60408051601f19818403018152908290526109e791613036565b60405180910390a150610b58565b6000838152600f602052604090206001015415801590610a155750815115155b15610aa4576000610a31846001856000015161020991906135a3565b8051909150610aa25782516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c791610a7991879190602001918252602082015260400190565b60408051601f1981840301815290829052610a9391613075565b60405180910390a15050610b58565b505b6000838152600f602081815260408084208651855280835290842086518155828701516001918201559387905291905201548251811015610af45782516000858152600f60205260409020600101555b610b078484600001518560200151610c73565b825160208401516040517f22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b9192610b4d928883526020830191909152604082015260600190565b60405180910390a150505b5050565b600254826020015114610bb55760405162461bcd60e51b815260206004820152601960248201527f77726f6e6720746172676574436861696e496420696e20636d00000000000000604482015260640160405180910390fd5b6000610bc98360000151846060015161074a565b606084015181519192501415610bea576001610be484611095565b50610c02565b6000610bf6848461042f565b905061074484826111c8565b505050565b60008060025483604051602001610c28929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600090815260079092529020600201549392505050565b6000815160001415610c6b575060006103ea565b506020015190565b60085483148015610c85575060095482145b15610cdc5760006008819055600981905560408051602081018690529081018490526060810183905260800160408051601f1981840301815291815281516020928301206000908152600a90925281208054825555505b6000838152600b602090815260408083208584529091528120905b6001820154811015611057576000826001018281548110610d2857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600902016040518061012001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166004811115610d8857634e487b7160e01b600052602160045260246000fd5b6004811115610da757634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610e90578382906000526020600020018054610e03906135ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2f906135ba565b8015610e7c5780601f10610e5157610100808354040283529160200191610e7c565b820191906000526020600020905b815481529060010190602001808311610e5f57829003601f168201915b505050505081526020019060010190610de4565b505050508152602001600682015481526020016007820154815260200160088201548152505090506000836002018381548110610edd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050848114610ef8575050611045565b600182604001516004811115610f1e57634e487b7160e01b600052602160045260246000fd5b1415610f3257610f2d8261120d565b611042565b600282604001516004811115610f5857634e487b7160e01b600052602160045260246000fd5b1415610f6757610f2d826116f6565b600482604001516004811115610f8d57634e487b7160e01b600052602160045260246000fd5b1415610f9c57610f2d82611c96565b600382604001516004811115610fc257634e487b7160e01b600052602160045260246000fd5b1415610fcd57610f2d565b600082604001516004811115610ff357634e487b7160e01b600052602160045260246000fd5b1415611025576000805160206136538339815191528260405161101691906132fa565b60405180910390a15050611045565b6000805160206136538339815191528260405161101691906130da565b50505b8061104f816135f5565b915050610cf7565b506000848152600b6020908152604080832086845290915281209061107f6001830182612973565b61108d600283016000612994565b505050505050565b6000816040015160048111156110bb57634e487b7160e01b600052602160045260246000fd5b14156110cf576110ca81611e79565b6111c5565b6001816040015160048111156110f557634e487b7160e01b600052602160045260246000fd5b1415611104576110ca8161120d565b60028160400151600481111561112a57634e487b7160e01b600052602160045260246000fd5b1415611139576110ca816116f6565b60038160400151600481111561115f57634e487b7160e01b600052602160045260246000fd5b141561116a576110ca565b60048160400151600481111561119057634e487b7160e01b600052602160045260246000fd5b141561119f576110ca81611c96565b600080516020613653833981519152816040516111bc91906130da565b60405180910390a15b50565b6000826040015160048111156111ee57634e487b7160e01b600052602160045260246000fd5b1415611203576111fe8282612273565b610b58565b610b5882826126f6565b60008160a0015160018151811061123457634e487b7160e01b600052603260045260246000fd5b602002602001015180602001905181019061124f9190612d7b565b60008181526007602052604090205490915060ff166112935760008051602061365383398151915282604051611285919061312d565b60405180910390a1506111c5565b600081815260076020908152604080832060c0860151845260040190915290205460ff166112d8576000805160206136538339815191528260405161128591906131e4565b600081815260076020908152604080832060c08601518452600401909152902054600160ff90911611156113235760008051602061365383398151915282604051611285919061318c565b600081815260076020526040902054600160ff909116111561135c57600080516020613653833981519152826040516112859190613376565b600081815260076020818152604080842060c08701518552600481018352908420805460ff1916600290811790915585855292909152018054600192906113a490849061358b565b9091555050600081815260076020526040902060018101546002909101541415610b58576000818152600760205260408120805460ff191660021790555b600082815260076020526040902060010154811015610c0257600082815260076020908152604080832084845260030182528083205480845260048084528285208351610120810185528154815260018201549581019590955260028101549295949390929084019160ff9091169081111561146e57634e487b7160e01b600052602160045260246000fd5b600481111561148d57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156115765783829060005260206000200180546114e9906135ba565b80601f0160208091040260200160405190810160405280929190818152602001828054611515906135ba565b80156115625780601f1061153757610100808354040283529160200191611562565b820191906000526020600020905b81548152906001019060200180831161154557829003601f168201915b5050505050815260200190600101906114ca565b505050508152602001600682015481526020016007820154815260200160088201548152505090506115a66128ac565b60025481526020828101519082015260036040820181815250506001600360008282546115d3919061358b565b9091555050600354608082015243606082015260006115f1826103ef565b6003546000908152600560209081526040808320849055838352600480835292819020865181559186015160018084019190915590860151600283018054959650879593949193909260ff1990911691849081111561166057634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611694916005840191602090910190612916565b5060c0820151816006015560e0820151816007015561010082015181600801559050506000805160206136738339815191528160026040516116d7929190613012565b60405180910390a15050505080806116ee906135f5565b9150506113e2565b60008160a0015160018151811061171d57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906117389190612d7b565b60008181526007602052604090205490915060ff1661176e5760008051602061365383398151915282604051611285919061312d565b600081815260076020908152604080832060c0860151845260040190915290205460ff166117b3576000805160206136538339815191528260405161128591906131e4565b600081815260076020908152604080832060c08601518452600401909152902054600160ff90911611156117fe5760008051602061365383398151915282604051611285919061318c565b600081815260076020526040902054600160ff909116111561183757600080516020613653833981519152826040516112859190613376565b60008181526007602090815260408083208054600360ff199182168117835560c08801518652600490920190935290832080549092161790555b600082815260076020526040902060010154811015610c0257600082815260076020908152604080832084845260030190915290205460c08401518114156118b95750611c84565b600083815260076020908152604080832084845260049081018352818420805460ff191682179055808352818420825161012081018452815481526001820154948101949094526002810154909284019160ff9091169081111561192d57634e487b7160e01b600052602160045260246000fd5b600481111561194c57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015611a355783829060005260206000200180546119a8906135ba565b80601f01602080910402602001604051908101604052809291908181526020018280546119d4906135ba565b8015611a215780601f106119f657610100808354040283529160200191611a21565b820191906000526020600020905b815481529060010190602001808311611a0457829003601f168201915b505050505081526020019060010190611989565b50505050815260200160068201548152602001600782015481526020016008820154815250509050611a656128ac565b600254815260208281015190820152600460408201819052506040805160028082526060820190925290816020015b6060815260200190600190039081611a94579050508160a001819052508160a00151600081518110611ad657634e487b7160e01b600052603260045260246000fd5b60200260200101518160a00151600081518110611b0357634e487b7160e01b600052603260045260246000fd5b602002602001018190525084604051602001611b2191815260200190565b6040516020818303038152906040528160a00151600181518110611b5557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600160036000828254611b73919061358b565b909155505060035460808201524360608201526000611b91826103ef565b6003546000908152600560209081526040808320849055838352600480835292819020865181559186015160018084019190915590860151600283018054959650879593949193909260ff19909116918490811115611c0057634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611c34916005840191602090910190612916565b5060c0820151816006015560e082015181600701556101008201518160080155905050600080516020613673833981519152816002604051611c77929190613012565b60405180910390a1505050505b80611c8e816135f5565b915050611871565b60085415801590611ca8575060095415155b15611dd9578051600854148015611cc457506060810151600954145b15611ce657600080516020613653833981519152816040516111bc91906133ed565b6000611cf1826103ef565b905081600e6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836004811115611d5357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611d87916005840191602090910190612916565b5060c0820151600682015560e08201516007820155610100909101516008909101556040518181527f4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d1264590602001611285565b60008160a00151600081518110611e0057634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611e1b9190612d7b565b905080600080828254611e2e919061358b565b909155507f43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f59050611e5e836103ef565b60408051918252602082018490520160405180910390a15050565b60085415801590611e8b575060095415155b15611fbc578051600854148015611ea757506060810151600954145b15611ec957600080516020613653833981519152816040516111bc9190613256565b6000611ed4826103ef565b905081600d6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836004811115611f3657634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611f6a916005840191602090910190612916565b5060c0820151600682015560e08201516007820155610100909101516008909101556040518181527f25e7e654271d69e4a4d40c38a6c9ac5bf0ccbcd56a59c2a9d37167af82c8e67690602001611285565b60006001905060008260a00151600081518110611fe957634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906120049190612d7b565b90508060005410156120195760009150612030565b8060008082825461202a91906135a3565b90915550505b6120386128ac565b60028054825284516020830152604080518281526060810190915290816020015b60608152602001906001900390816120595790505060a08201526040805160208101849052016040516020818303038152906040528160a001516000815181106120b357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508360a001516001815181106120e357634e487b7160e01b600052603260045260246000fd5b60200260200101518160a0015160018151811061211057634e487b7160e01b600052603260045260246000fd5b6020026020010181905250821561212d5760016040820152612135565b600260408201525b600160036000828254612148919061358b565b9091555050600354608082015261215e846103ef565b60c082015260608085015160e08301524390820152600061217e826103ef565b6003546000908152600560209081526040808320849055838352600480835292819020865181559186015160018084019190915590860151600283018054959650879593949193909260ff199091169184908111156121ed57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051612221916005840191602090910190612916565b5060c0820151816006015560e082015181600701556101008201518160080155905050600080516020613673833981519152816001604051612264929190613012565b60405180910390a15050505050565b6008541580156122835750600954155b156122dd57815160088190556060808401516009819055604080516020810194909452830152810182905260009060800160408051601f19818403018152918152815160209283012060008054918152600a909352912055505b81516008541415806122f55750606082015160095414155b156123ed576000612305836103ef565b905082600c6000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600481111561236757634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a0820151805161239b916005840191602090910190612916565b5060c0820151600682015560e08201516007820155610100909101516008909101556040518181527fd13cc16a5ddd74d364eb819e8148109f9c582780de0ae3a096c980acabe23158906020016109e7565b8151606080840151604080516020810194909452830152810182905260009060800160405160208183030381529060405280519060200120905060008360a0015160008151811061244e57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906124699190612d7b565b6000838152600a602052604090205490915060019082111561248d575060006124b1565b6000838152600a6020526040812080548492906124ab9084906135a3565b90915550505b6124b96128ac565b60028054825286516020830152604080518281526060810190915290816020015b60608152602001906001900390816124da5790505060a08201526040805160208101859052016040516020818303038152906040528160a0015160008151811061253457634e487b7160e01b600052603260045260246000fd5b60200260200101819052508560a0015160018151811061256457634e487b7160e01b600052603260045260246000fd5b60200260200101518160a0015160018151811061259157634e487b7160e01b600052603260045260246000fd5b602002602001018190525081156125ae57600160408201526125b6565b600260408201525b6001600360008282546125c9919061358b565b909155505060035460808201526125df866103ef565b60c082015260608087015160e0830152439082015260006125ff826103ef565b6003546000908152600560209081526040808320849055838352600480835292819020865181559186015160018084019190915590860151600283018054959650879593949193909260ff1990911691849081111561266e57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516126a2916005840191602090910190612916565b5060c0820151816006015560e0820151816007015561010082015181600801559050506000805160206136738339815191528160016040516126e5929190613012565b60405180910390a150505050505050565b6000612701836103ef565b83516000908152600b60209081526040808320606088015184528252808320848452909152902054909150156127375750610b58565b82516000908152600b60209081526040808320606087015184528252808320600190810180548083018255908552938390208751600990950201938455918601518383015585015160028301805487949360ff19909116908360048111156127af57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516127e3916005840191602090910190612916565b5060c0820151600682015560e082015160078201556101009091015160089091015582516000908152600b60208181526040808420606088018051865290835281852060020180546001818101835591875284872001889055885186528484528286208251875284528286200154885186529383528185209051855282528084208585529091529182902055517fce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab9061289f9083815260200190565b60405180910390a1505050565b6040518061012001604052806000815260200160008152602001600060048111156128e757634e487b7160e01b600052602160045260246000fd5b8152600060208201819052604082018190526060808301526080820181905260a0820181905260c09091015290565b828054828255906000526020600020908101928215612963579160200282015b8281111561296357825180516129539184916020909101906129b2565b5091602001919060010190612936565b5061296f929150612a32565b5090565b50805460008255600902906000526020600020908101906111c59190612a4f565b50805460008255906000526020600020908101906111c59190612aa8565b8280546129be906135ba565b90600052602060002090601f0160209004810192826129e05760008555612a26565b82601f106129f957805160ff1916838001178555612a26565b82800160010185558215612a26579182015b82811115612a26578251825591602001919060010190612a0b565b5061296f929150612aa8565b8082111561296f576000612a468282612abd565b50600101612a32565b8082111561296f5760008082556001820181905560028201805460ff191690556003820181905560048201819055612a8a6005830182612af9565b50600060068201819055600782018190556008820155600901612a4f565b5b8082111561296f5760008155600101612aa9565b508054612ac9906135ba565b6000825580601f10612adb57506111c5565b601f0160209004906000526020600020908101906111c59190612aa8565b50805460008255906000526020600020908101906111c59190612a32565b600082601f830112612b27578081fd5b81356020612b3c612b3783613567565b613536565b82815281810190858301855b85811015612b7157612b5f898684358b0101612b7e565b84529284019290840190600101612b48565b5090979650505050505050565b600082601f830112612b8e578081fd5b813567ffffffffffffffff811115612ba857612ba861363c565b612bbb601f8201601f1916602001613536565b818152846020838601011115612bcf578283fd5b816020850160208301379081016020019190915292915050565b8035600581106103ea57600080fd5b600060408284031215612c09578081fd5b612c136040613536565b9050813581526020820135602082015292915050565b6000610120808385031215612c3c578182fd5b612c4581613536565b9150508135815260208201356020820152612c6260408301612be9565b6040820152606082013560608201526080820135608082015260a082013567ffffffffffffffff811115612c9557600080fd5b612ca184828501612b17565b60a08301525060c082013560c082015260e082013560e082015261010080830135818301525092915050565b60008060408385031215612cdf578182fd5b823567ffffffffffffffff811115612cf5578283fd5b8301601f81018513612d05578283fd5b80356020612d15612b3783613567565b82815281810190848301838502860184018a1015612d31578788fd5b8795505b84861015612d53578035835260019590950194918301918301612d35565b5098969091013596505050505050565b600060208284031215612d74578081fd5b5035919050565b600060208284031215612d8c578081fd5b5051919050565b600080600060808486031215612da7578081fd5b612db18585612bf8565b9250604084013567ffffffffffffffff80821115612dcd578283fd5b612dd987838801612c29565b93506060860135915080821115612dee578283fd5b50612dfb86828701612b7e565b9150509250925092565b600060208284031215612e16578081fd5b813567ffffffffffffffff811115612e2c578182fd5b612e3884828501612c29565b949350505050565b60008060408385031215612e52578182fd5b823567ffffffffffffffff80821115612e69578384fd5b612e7586838701612c29565b93506020850135915080821115612e8a578283fd5b50612e9785828601612b7e565b9150509250929050565b60008060608385031215612eb3578182fd5b82359150612ec48460208501612bf8565b90509250929050565b60008060408385031215612edf578182fd5b50508035926020909101359150565b60008151808452815b81811015612f1357602081850181015186830182015201612ef7565b81811115612f245782602083870101525b50601f01601f19169290920160200192915050565b60058110612f4957612f49613626565b9052565b600061012080840183518552602080850151818701526040850151612f756040880182612f39565b50606085810151908701526080808601519087015260a080860151908701939093528251918290526101408087019382840288019091019290820190855b81811015612fe25761013f19898603018652612fd0858451612eee565b95840195945091830191600101612fb3565b5050505060c084015160c086015260e084015160e086015261010091508184015182860152809250505092915050565b828152604081016004831061302957613029613626565b8260208301529392505050565b60006040825260156040830152741d1a19481a195859195c881a5cc8195e1a5cdd1959605a1b60608301526080602083015261043a6080830184612eee565b600060408252602260408301527f7468652070726576696f757320686561646572206973206e6f74206578697374606083015261195960f21b608083015260a0602083015261043a60a0830184612eee565b60006020825261043a6020830184612f4d565b6000606082526130ed6060830184612f4d565b8281036020808501829052601183527077726f6e6720706861736520696e20636d60781b9083015260409081019381019390935291820152606001919050565b6000606082526131406060830184612f4d565b8281036020808501829052601a83527f746865207472616e73616374696f6e20697320696e76616c69640000000000009083015260409081019381019390935291820152606001919050565b60006060825261319f6060830184612f4d565b828103602080850182905260168352751d1a194818db481a185cc81899595b881919585b195960521b9083015260409081019381019390935291820152606001919050565b6000606082526131f76060830184612f4d565b828103806020850152602682527f74686520636d206973206e6f7420696e20746865207472616e73616374696f6e60208301526502067726f75760d41b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526132696060830184612f4d565b828103806020850152605282527f496c6c6567616c2120736861646f774c6f636b2073686f756c64206e6f74206260208301527f65206f776e656420627920636d2e736f75726365486569676874207768656e206040830152717072657061726528636f6e6669726d65642960701b60608301526080810160408501525081608082015260a0810191505092915050565b60006060825261330d6060830184612f4d565b828103806020850152603082527f50524550415245206d657373616765206d757374206e6f7420626520696e207560208301526f6e636f6e6669726d656420717565756560801b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526133896060830184612f4d565b828103806020850152602b82527f746865207472616e73616374696f6e20686173206265656e20636f6d6d69742060208301526a6f7220726f6c6c6261636b60a81b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526134006060830184612f4d565b828103806020850152605182527f50414e49432120736861646f774c6f636b2073686f756c64206e6f742062652060208301527f6f776e656420627920636d2e736f75726365486569676874207768656e20726f6040830152706c6c6261636b28636f6e6669726d65642960781b60608301526080810160408501525081608082015260a0810191505092915050565b60006101208083018c845260208c818601526134af604086018d612f39565b606085018b9052608085018a905260a085019290925287519081905261014080850192808302860190910191818a01855b8281101561350f5761013f198886030186526134fd858351612eee565b958401959450908301906001016134e0565b5050505060c0840196909652505060e0810192909252610100909101529695505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561355f5761355f61363c565b604052919050565b600067ffffffffffffffff8211156135815761358161363c565b5060209081020190565b6000821982111561359e5761359e613610565b500190565b6000828210156135b5576135b5613610565b500390565b6002810460018216806135ce57607f821691505b602082108114156135ef57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561360957613609613610565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfeec5f2aca5743643fb0b334881b5ddffd637a3f612f0e3182a8487511ca3c43c023abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9a26469706673582212206938de8615da5e014b70342c20776cea69076ace565c26f6f0d0fe19b365d37a64736f6c63430008020033",
}

// SR2PCABI is the input ABI used to generate the binding from.
// Deprecated: Use SR2PCMetaData.ABI instead.
var SR2PCABI = SR2PCMetaData.ABI

// SR2PCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SR2PCMetaData.Bin instead.
var SR2PCBin = SR2PCMetaData.Bin

// DeploySR2PC deploys a new Ethereum contract, binding an instance of SR2PC to it.
func DeploySR2PC(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId *big.Int) (common.Address, *types.Transaction, *SR2PC, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SR2PCBin), backend, _chainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// SR2PC is an auto generated Go binding around an Ethereum contract.
type SR2PC struct {
	SR2PCCaller     // Read-only binding to the contract
	SR2PCTransactor // Write-only binding to the contract
	SR2PCFilterer   // Log filterer for contract events
}

// SR2PCCaller is an auto generated read-only Go binding around an Ethereum contract.
type SR2PCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SR2PCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SR2PCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SR2PCSession struct {
	Contract     *SR2PC            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SR2PCCallerSession struct {
	Contract *SR2PCCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SR2PCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SR2PCTransactorSession struct {
	Contract     *SR2PCTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCRaw is an auto generated low-level Go binding around an Ethereum contract.
type SR2PCRaw struct {
	Contract *SR2PC // Generic contract binding to access the raw methods on
}

// SR2PCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SR2PCCallerRaw struct {
	Contract *SR2PCCaller // Generic read-only contract binding to access the raw methods on
}

// SR2PCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SR2PCTransactorRaw struct {
	Contract *SR2PCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSR2PC creates a new instance of SR2PC, bound to a specific deployed contract.
func NewSR2PC(address common.Address, backend bind.ContractBackend) (*SR2PC, error) {
	contract, err := bindSR2PC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// NewSR2PCCaller creates a new read-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCCaller(address common.Address, caller bind.ContractCaller) (*SR2PCCaller, error) {
	contract, err := bindSR2PC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCCaller{contract: contract}, nil
}

// NewSR2PCTransactor creates a new write-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCTransactor(address common.Address, transactor bind.ContractTransactor) (*SR2PCTransactor, error) {
	contract, err := bindSR2PC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCTransactor{contract: contract}, nil
}

// NewSR2PCFilterer creates a new log filterer instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCFilterer(address common.Address, filterer bind.ContractFilterer) (*SR2PCFilterer, error) {
	contract, err := bindSR2PC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SR2PCFilterer{contract: contract}, nil
}

// bindSR2PC binds a generic wrapper to an already deployed contract.
func bindSR2PC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.SR2PCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transact(opts, method, params...)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x34e7d36b.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CalculateRoot(opts *bind.CallOpts, cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "calculateRoot", cm, proof)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateRoot is a free data retrieval call binding the contract method 0x34e7d36b.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CalculateRoot(cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x34e7d36b.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CalculateRoot(cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CmToHash is a free data retrieval call binding the contract method 0x2a8c5646.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CmToHash(opts *bind.CallOpts, cm SR2PCCrossMessage) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "cmToHash", cm)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CmToHash is a free data retrieval call binding the contract method 0x2a8c5646.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CmToHash(cm SR2PCCrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// CmToHash is a free data retrieval call binding the contract method 0x2a8c5646.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CmToHash(cm SR2PCCrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetCMByHash(opts *bind.CallOpts, cmHash [32]byte) (SR2PCCrossMessage, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getCMByHash", cmHash)

	if err != nil {
		return *new(SR2PCCrossMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCCrossMessage)).(*SR2PCCrossMessage)

	return out0, err

}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32))
func (_SR2PC *SR2PCSession) GetCMByHash(cmHash [32]byte) (SR2PCCrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetCMByHash(cmHash [32]byte) (SR2PCCrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetHeader(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getHeader", _chainId, _height)

	if err != nil {
		return *new(SR2PCBlockHeader), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCBlockHeader)).(*SR2PCBlockHeader)

	return out0, err

}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCCaller) GetShadowLock(opts *bind.CallOpts) (SR2PCShadowLock, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getShadowLock")

	if err != nil {
		return *new(SR2PCShadowLock), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCShadowLock)).(*SR2PCShadowLock)

	return out0, err

}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCSession) GetShadowLock() (SR2PCShadowLock, error) {
	return _SR2PC.Contract.GetShadowLock(&_SR2PC.CallOpts)
}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCCallerSession) GetShadowLock() (SR2PCShadowLock, error) {
	return _SR2PC.Contract.GetShadowLock(&_SR2PC.CallOpts)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTransStatus(opts *bind.CallOpts, _transactionPoint *big.Int) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransStatus", _transactionPoint)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetTransSuccessNumber(opts *bind.CallOpts, _transactionPoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransSuccessNumber", _transactionPoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCaller) GetTransactionHash(opts *bind.CallOpts, _point *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransactionHash", _point)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCallerSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetUncfmQueueLength(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUncfmQueueLength", _chainId, _height)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCCaller) GetValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCSession) GetValue() (*big.Int, error) {
	return _SR2PC.Contract.GetValue(&_SR2PC.CallOpts)
}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetValue() (*big.Int, error) {
	return _SR2PC.Contract.GetValue(&_SR2PC.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCCaller) Value(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "value")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCSession) Value() (*big.Int, error) {
	return _SR2PC.Contract.Value(&_SR2PC.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCCallerSession) Value() (*big.Int, error) {
	return _SR2PC.Contract.Value(&_SR2PC.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0x73edc6c7.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCaller) Verify(opts *bind.CallOpts, header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "verify", header, cm, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x73edc6c7.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCSession) Verify(header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// Verify is a free data retrieval call binding the contract method 0x73edc6c7.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCallerSession) Verify(header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0xe7f2e573.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactor) CrossReceive(opts *bind.TransactOpts, cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossReceive", cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0xe7f2e573.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) returns()
func (_SR2PC *SR2PCSession) CrossReceive(cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0xe7f2e573.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactorSession) CrossReceive(cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCTransactor) CrossSend(opts *bind.TransactOpts, _targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossSend", _targetChainIds, _value)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCTransactorSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactor) SyncHeader(opts *bind.TransactOpts, _chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "syncHeader", _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactorSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCTransactor) TestUpdateValue(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "test_updateValue", _value)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCSession) TestUpdateValue(_value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.TestUpdateValue(&_SR2PC.TransactOpts, _value)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCTransactorSession) TestUpdateValue(_value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.TestUpdateValue(&_SR2PC.TransactOpts, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactorSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// SR2PCErrorIterator is returned from FilterError and is used to iterate over the raw logs and unpacked data for Error events raised by the SR2PC contract.
type SR2PCErrorIterator struct {
	Event *SR2PCError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCError represents a Error event raised by the SR2PC contract.
type SR2PCError struct {
	Cm     SR2PCCrossMessage
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterError is a free log retrieval operation binding the contract event 0xec5f2aca5743643fb0b334881b5ddffd637a3f612f0e3182a8487511ca3c43c0.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterError(opts *bind.FilterOpts) (*SR2PCErrorIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return &SR2PCErrorIterator{contract: _SR2PC.contract, event: "Error", logs: logs, sub: sub}, nil
}

// WatchError is a free log subscription operation binding the contract event 0xec5f2aca5743643fb0b334881b5ddffd637a3f612f0e3182a8487511ca3c43c0.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchError(opts *bind.WatchOpts, sink chan<- *SR2PCError) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCError)
				if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseError is a log parse operation binding the contract event 0xec5f2aca5743643fb0b334881b5ddffd637a3f612f0e3182a8487511ca3c43c0.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseError(log types.Log) (*SR2PCError, error) {
	event := new(SR2PCError)
	if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCMetricsCmIterator is returned from FilterMetricsCm and is used to iterate over the raw logs and unpacked data for MetricsCm events raised by the SR2PC contract.
type SR2PCMetricsCmIterator struct {
	Event *SR2PCMetricsCm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCMetricsCmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCMetricsCm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCMetricsCm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCMetricsCmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCMetricsCmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCMetricsCm represents a MetricsCm event raised by the SR2PC contract.
type SR2PCMetricsCm struct {
	ChainId         *big.Int
	Height          *big.Int
	TransactionHash [32]byte
	CmHash          [32]byte
	Status          uint8
	ByHeader        bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMetricsCm is a free log retrieval operation binding the contract event 0xdfeb95d36ed0e99f979e464fbdd19bafa8a378796e0fc9ff1b71d926854f2503.
//
// Solidity: event MetricsCm(uint256 chainId, uint256 height, bytes32 transactionHash, bytes32 cmHash, uint8 status, bool byHeader)
func (_SR2PC *SR2PCFilterer) FilterMetricsCm(opts *bind.FilterOpts) (*SR2PCMetricsCmIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "MetricsCm")
	if err != nil {
		return nil, err
	}
	return &SR2PCMetricsCmIterator{contract: _SR2PC.contract, event: "MetricsCm", logs: logs, sub: sub}, nil
}

// WatchMetricsCm is a free log subscription operation binding the contract event 0xdfeb95d36ed0e99f979e464fbdd19bafa8a378796e0fc9ff1b71d926854f2503.
//
// Solidity: event MetricsCm(uint256 chainId, uint256 height, bytes32 transactionHash, bytes32 cmHash, uint8 status, bool byHeader)
func (_SR2PC *SR2PCFilterer) WatchMetricsCm(opts *bind.WatchOpts, sink chan<- *SR2PCMetricsCm) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "MetricsCm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCMetricsCm)
				if err := _SR2PC.contract.UnpackLog(event, "MetricsCm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetricsCm is a log parse operation binding the contract event 0xdfeb95d36ed0e99f979e464fbdd19bafa8a378796e0fc9ff1b71d926854f2503.
//
// Solidity: event MetricsCm(uint256 chainId, uint256 height, bytes32 transactionHash, bytes32 cmHash, uint8 status, bool byHeader)
func (_SR2PC *SR2PCFilterer) ParseMetricsCm(log types.Log) (*SR2PCMetricsCm, error) {
	event := new(SR2PCMetricsCm)
	if err := _SR2PC.contract.UnpackLog(event, "MetricsCm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCMetricsUncfmsIterator is returned from FilterMetricsUncfms and is used to iterate over the raw logs and unpacked data for MetricsUncfms events raised by the SR2PC contract.
type SR2PCMetricsUncfmsIterator struct {
	Event *SR2PCMetricsUncfms // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCMetricsUncfmsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCMetricsUncfms)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCMetricsUncfms)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCMetricsUncfmsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCMetricsUncfmsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCMetricsUncfms represents a MetricsUncfms event raised by the SR2PC contract.
type SR2PCMetricsUncfms struct {
	ChainId         *big.Int
	Height          *big.Int
	TransactionHash [32]byte
	CmHash          [32]byte
	Status          uint8
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMetricsUncfms is a free log retrieval operation binding the contract event 0x219f126451472acbe5dd2bab11a95f4fee8e2f21fb1d856c67a98a9c95818af5.
//
// Solidity: event MetricsUncfms(uint256 chainId, uint256 height, bytes32 transactionHash, bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) FilterMetricsUncfms(opts *bind.FilterOpts) (*SR2PCMetricsUncfmsIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "MetricsUncfms")
	if err != nil {
		return nil, err
	}
	return &SR2PCMetricsUncfmsIterator{contract: _SR2PC.contract, event: "MetricsUncfms", logs: logs, sub: sub}, nil
}

// WatchMetricsUncfms is a free log subscription operation binding the contract event 0x219f126451472acbe5dd2bab11a95f4fee8e2f21fb1d856c67a98a9c95818af5.
//
// Solidity: event MetricsUncfms(uint256 chainId, uint256 height, bytes32 transactionHash, bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) WatchMetricsUncfms(opts *bind.WatchOpts, sink chan<- *SR2PCMetricsUncfms) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "MetricsUncfms")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCMetricsUncfms)
				if err := _SR2PC.contract.UnpackLog(event, "MetricsUncfms", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetricsUncfms is a log parse operation binding the contract event 0x219f126451472acbe5dd2bab11a95f4fee8e2f21fb1d856c67a98a9c95818af5.
//
// Solidity: event MetricsUncfms(uint256 chainId, uint256 height, bytes32 transactionHash, bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) ParseMetricsUncfms(log types.Log) (*SR2PCMetricsUncfms, error) {
	event := new(SR2PCMetricsUncfms)
	if err := _SR2PC.contract.UnpackLog(event, "MetricsUncfms", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the SR2PC contract.
type SR2PCReceivedIterator struct {
	Event *SR2PCReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCReceived represents a Received event raised by the SR2PC contract.
type SR2PCReceived struct {
	User  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) FilterReceived(opts *bind.FilterOpts) (*SR2PCReceivedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &SR2PCReceivedIterator{contract: _SR2PC.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *SR2PCReceived) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCReceived)
				if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) ParseReceived(log types.Log) (*SR2PCReceived, error) {
	event := new(SR2PCReceived)
	if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryReceiveConfirmCMIterator is returned from FilterRetryReceiveConfirmCM and is used to iterate over the raw logs and unpacked data for RetryReceiveConfirmCM events raised by the SR2PC contract.
type SR2PCRetryReceiveConfirmCMIterator struct {
	Event *SR2PCRetryReceiveConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryReceiveConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryReceiveConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryReceiveConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryReceiveConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryReceiveConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryReceiveConfirmCM represents a RetryReceiveConfirmCM event raised by the SR2PC contract.
type SR2PCRetryReceiveConfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryReceiveConfirmCM is a free log retrieval operation binding the contract event 0x25e7e654271d69e4a4d40c38a6c9ac5bf0ccbcd56a59c2a9d37167af82c8e676.
//
// Solidity: event RetryReceiveConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryReceiveConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryReceiveConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryReceiveConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryReceiveConfirmCMIterator{contract: _SR2PC.contract, event: "RetryReceiveConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryReceiveConfirmCM is a free log subscription operation binding the contract event 0x25e7e654271d69e4a4d40c38a6c9ac5bf0ccbcd56a59c2a9d37167af82c8e676.
//
// Solidity: event RetryReceiveConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryReceiveConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryReceiveConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryReceiveConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryReceiveConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryReceiveConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryReceiveConfirmCM is a log parse operation binding the contract event 0x25e7e654271d69e4a4d40c38a6c9ac5bf0ccbcd56a59c2a9d37167af82c8e676.
//
// Solidity: event RetryReceiveConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryReceiveConfirmCM(log types.Log) (*SR2PCRetryReceiveConfirmCM, error) {
	event := new(SR2PCRetryReceiveConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryReceiveConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryReceiveUnconfirmCMIterator is returned from FilterRetryReceiveUnconfirmCM and is used to iterate over the raw logs and unpacked data for RetryReceiveUnconfirmCM events raised by the SR2PC contract.
type SR2PCRetryReceiveUnconfirmCMIterator struct {
	Event *SR2PCRetryReceiveUnconfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryReceiveUnconfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryReceiveUnconfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryReceiveUnconfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryReceiveUnconfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryReceiveUnconfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryReceiveUnconfirmCM represents a RetryReceiveUnconfirmCM event raised by the SR2PC contract.
type SR2PCRetryReceiveUnconfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryReceiveUnconfirmCM is a free log retrieval operation binding the contract event 0xd13cc16a5ddd74d364eb819e8148109f9c582780de0ae3a096c980acabe23158.
//
// Solidity: event RetryReceiveUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryReceiveUnconfirmCM(opts *bind.FilterOpts) (*SR2PCRetryReceiveUnconfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryReceiveUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryReceiveUnconfirmCMIterator{contract: _SR2PC.contract, event: "RetryReceiveUnconfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryReceiveUnconfirmCM is a free log subscription operation binding the contract event 0xd13cc16a5ddd74d364eb819e8148109f9c582780de0ae3a096c980acabe23158.
//
// Solidity: event RetryReceiveUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryReceiveUnconfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryReceiveUnconfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryReceiveUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryReceiveUnconfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryReceiveUnconfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryReceiveUnconfirmCM is a log parse operation binding the contract event 0xd13cc16a5ddd74d364eb819e8148109f9c582780de0ae3a096c980acabe23158.
//
// Solidity: event RetryReceiveUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryReceiveUnconfirmCM(log types.Log) (*SR2PCRetryReceiveUnconfirmCM, error) {
	event := new(SR2PCRetryReceiveUnconfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryReceiveUnconfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryRollbackConfirmCMIterator is returned from FilterRetryRollbackConfirmCM and is used to iterate over the raw logs and unpacked data for RetryRollbackConfirmCM events raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCMIterator struct {
	Event *SR2PCRetryRollbackConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryRollbackConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryRollbackConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryRollbackConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryRollbackConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryRollbackConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryRollbackConfirmCM represents a RetryRollbackConfirmCM event raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryRollbackConfirmCM is a free log retrieval operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryRollbackConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryRollbackConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryRollbackConfirmCMIterator{contract: _SR2PC.contract, event: "RetryRollbackConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryRollbackConfirmCM is a free log subscription operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryRollbackConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryRollbackConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryRollbackConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryRollbackConfirmCM is a log parse operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryRollbackConfirmCM(log types.Log) (*SR2PCRetryRollbackConfirmCM, error) {
	event := new(SR2PCRetryRollbackConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRollbackConfirmedIterator is returned from FilterRollbackConfirmed and is used to iterate over the raw logs and unpacked data for RollbackConfirmed events raised by the SR2PC contract.
type SR2PCRollbackConfirmedIterator struct {
	Event *SR2PCRollbackConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRollbackConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRollbackConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRollbackConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRollbackConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRollbackConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRollbackConfirmed represents a RollbackConfirmed event raised by the SR2PC contract.
type SR2PCRollbackConfirmed struct {
	CmHash [32]byte
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollbackConfirmed is a free log retrieval operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) FilterRollbackConfirmed(opts *bind.FilterOpts) (*SR2PCRollbackConfirmedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return &SR2PCRollbackConfirmedIterator{contract: _SR2PC.contract, event: "RollbackConfirmed", logs: logs, sub: sub}, nil
}

// WatchRollbackConfirmed is a free log subscription operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) WatchRollbackConfirmed(opts *bind.WatchOpts, sink chan<- *SR2PCRollbackConfirmed) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRollbackConfirmed)
				if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollbackConfirmed is a log parse operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) ParseRollbackConfirmed(log types.Log) (*SR2PCRollbackConfirmed, error) {
	event := new(SR2PCRollbackConfirmed)
	if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSendCMHashIterator is returned from FilterSendCMHash and is used to iterate over the raw logs and unpacked data for SendCMHash events raised by the SR2PC contract.
type SR2PCSendCMHashIterator struct {
	Event *SR2PCSendCMHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSendCMHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSendCMHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSendCMHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSendCMHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSendCMHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSendCMHash represents a SendCMHash event raised by the SR2PC contract.
type SR2PCSendCMHash struct {
	CmHash [32]byte
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSendCMHash is a free log retrieval operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) FilterSendCMHash(opts *bind.FilterOpts) (*SR2PCSendCMHashIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return &SR2PCSendCMHashIterator{contract: _SR2PC.contract, event: "SendCMHash", logs: logs, sub: sub}, nil
}

// WatchSendCMHash is a free log subscription operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) WatchSendCMHash(opts *bind.WatchOpts, sink chan<- *SR2PCSendCMHash) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSendCMHash)
				if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCMHash is a log parse operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) ParseSendCMHash(log types.Log) (*SR2PCSendCMHash, error) {
	event := new(SR2PCSendCMHash)
	if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCShadowStoreIterator is returned from FilterShadowStore and is used to iterate over the raw logs and unpacked data for ShadowStore events raised by the SR2PC contract.
type SR2PCShadowStoreIterator struct {
	Event *SR2PCShadowStore // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCShadowStoreIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCShadowStore)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCShadowStore)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCShadowStoreIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCShadowStoreIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCShadowStore represents a ShadowStore event raised by the SR2PC contract.
type SR2PCShadowStore struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterShadowStore is a free log retrieval operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterShadowStore(opts *bind.FilterOpts) (*SR2PCShadowStoreIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return &SR2PCShadowStoreIterator{contract: _SR2PC.contract, event: "ShadowStore", logs: logs, sub: sub}, nil
}

// WatchShadowStore is a free log subscription operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchShadowStore(opts *bind.WatchOpts, sink chan<- *SR2PCShadowStore) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCShadowStore)
				if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShadowStore is a log parse operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseShadowStore(log types.Log) (*SR2PCShadowStore, error) {
	event := new(SR2PCShadowStore)
	if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSyncHeaderIterator is returned from FilterSyncHeader and is used to iterate over the raw logs and unpacked data for SyncHeader events raised by the SR2PC contract.
type SR2PCSyncHeaderIterator struct {
	Event *SR2PCSyncHeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSyncHeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSyncHeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSyncHeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSyncHeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSyncHeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSyncHeader represents a SyncHeader event raised by the SR2PC contract.
type SR2PCSyncHeader struct {
	ChainId *big.Int
	Height  *big.Int
	Root    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSyncHeader is a free log retrieval operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) FilterSyncHeader(opts *bind.FilterOpts) (*SR2PCSyncHeaderIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return &SR2PCSyncHeaderIterator{contract: _SR2PC.contract, event: "SyncHeader", logs: logs, sub: sub}, nil
}

// WatchSyncHeader is a free log subscription operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) WatchSyncHeader(opts *bind.WatchOpts, sink chan<- *SR2PCSyncHeader) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSyncHeader)
				if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncHeader is a log parse operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) ParseSyncHeader(log types.Log) (*SR2PCSyncHeader, error) {
	event := new(SR2PCSyncHeader)
	if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCWarningIterator is returned from FilterWarning and is used to iterate over the raw logs and unpacked data for Warning events raised by the SR2PC contract.
type SR2PCWarningIterator struct {
	Event *SR2PCWarning // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCWarningIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCWarning)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCWarning)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCWarningIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCWarningIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCWarning represents a Warning event raised by the SR2PC contract.
type SR2PCWarning struct {
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWarning is a free log retrieval operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterWarning(opts *bind.FilterOpts) (*SR2PCWarningIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return &SR2PCWarningIterator{contract: _SR2PC.contract, event: "Warning", logs: logs, sub: sub}, nil
}

// WatchWarning is a free log subscription operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchWarning(opts *bind.WatchOpts, sink chan<- *SR2PCWarning) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCWarning)
				if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWarning is a log parse operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseWarning(log types.Log) (*SR2PCWarning, error) {
	event := new(SR2PCWarning)
	if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
