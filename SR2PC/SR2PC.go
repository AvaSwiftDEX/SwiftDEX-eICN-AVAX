// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SR2PC

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CrossMessage is an auto generated low-level Go binding around an user-defined struct.
type CrossMessage struct {
	SourceChainId  *big.Int
	TargetChainId  *big.Int
	Phase          uint8
	SourceHeight   *big.Int
	Nonce          *big.Int
	Payload        [][]byte
	CmInputHash    [32]byte
	CmInputHeight  *big.Int
	RespPayload    [32]byte
	ExpectedHeight *big.Int
}

// SR2PCBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type SR2PCBlockHeader struct {
	Height *big.Int
	Root   [32]byte
}

// SR2PCMetaData contains all meta data concerning the SR2PC contract.
var SR2PCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedTrustDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.MetricsCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isConfirmed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byHeader\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"retry\",\"type\":\"bool\"}],\"name\":\"Metrics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lockHash\",\"type\":\"bytes32\"}],\"name\":\"RetryPrepareConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lockHash\",\"type\":\"bytes32\"}],\"name\":\"RetryPrepareUnconfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lockHash\",\"type\":\"bytes32\"}],\"name\":\"RetryRollbackConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RollbackConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.CMStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"}],\"name\":\"SendCMHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"ShadowStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"SyncHeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lockHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"UnlockShadowLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Warning\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"CrossRetry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"crossReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_appIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_appValueId\",\"type\":\"uint256\"}],\"name\":\"crossSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getHeader\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"}],\"name\":\"getTranStatus\",\"outputs\":[{\"internalType\":\"enumWorkerStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransSuccessNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"}],\"name\":\"getUcfStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getUncfmQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"registerApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"}],\"name\":\"syncHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052600060035560006006553480156200001b57600080fd5b5060405162005689380380620056898339810160408190526200003e9162000052565b600291909155600060035560045562000076565b6000806040838503121562000065578182fd5b505080516020909101519092909150565b61560380620000866000396000f3fe6080604052600436106100c65760003560e01c8063a2ed31221161007f578063cc38a48211610059578063cc38a4821461029a578063d3b4fbbb146102cc578063d4be7935146102ec578063f678f80d1461032757610105565b8063a2ed31221461020d578063ac676d3214610245578063ca8bad911461027a57610105565b806301a09b051461010a578063111343841461012c5780634a6bc7021461015f5780636c55d0d41461019f5780636e53670a146101b25780638660c376146101ed57610105565b3661010557604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561011657600080fd5b5061012a6101253660046145f2565b610347565b005b34801561013857600080fd5b5061014c610147366004614529565b610755565b6040519081526020015b60405180910390f35b34801561016b57600080fd5b5061019261017a366004614529565b6000908152600b602052604090206001015460ff1690565b6040516101569190614c85565b61012a6101ad3660046143ba565b610793565b3480156101be57600080fd5b506101d26101cd3660046147c9565b610b4e565b60408051825181526020928301519281019290925201610156565b3480156101f957600080fd5b5061012a610208366004614773565b610b8f565b34801561021957600080fd5b5061014c6102283660046147c9565b6000918252600a6020908152604080842092845291905290205490565b34801561025157600080fd5b506102656102603660046147c9565b610c7b565b60408051928352602083019190915201610156565b34801561028657600080fd5b5061012a610295366004614559565b610d40565b3480156102a657600080fd5b506102ba6102b5366004614529565b610dbe565b60405160ff9091168152602001610156565b3480156102d857600080fd5b5061012a6102e73660046147ea565b610e0e565b3480156102f857600080fd5b5061014c6103073660046147c9565b600091825260106020908152604080842092845291905290206001015490565b34801561033357600080fd5b5061014c610342366004614529565b610fe9565b600061035a6103558461547a565b611039565b6040517f526574727950726570617265556e636f6e6669726d434d000000000000000000602082015290915060370160405160208183030381529060405280519060200120846040516020016103b09190614aab565b6040516020818303038152906040528051906020012014156105d757604080516020808201849052818301859052825180830384018152606090920183528151918101919091206000818152600d9092529190205460ff16610413575050610750565b60006104258535610120870135610b4e565b805190915061012086013514156105be578381602001511415610510576040517f31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470906104c2908735906060890135906101208a01359060808b01359060200160a0808252600a908201526943525252552d3e52524360b01b60c0820152602081019490945260408401929092526060830152608082015260e00190565b60408051601f19818403018152908290526104dc91614c72565b60405180910390a16000828152600d60205260409020805460ff1916905561050b6105068661547a565b61107f565b6105b9565b6040805160c060208201819052600d60e08301526c10d49494954b4f9193d491d151609a1b610100830152873592820192909252606080880135908201526101208088013560808084019190915288013560a08301529181018690527f31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470910160408051601f19818403018152908290526105a991614c72565b60405180910390a1505050610750565b6105d0565b6105d06105ca8661547a565b856115f8565b505061074e565b60405174526574727950726570617265436f6e6669726d434d60581b602082015260350160405160208183030381529060405280519060200120846040516020016106229190614aab565b60405160208183030381529060405280519060200120141561066b576000818152600e602052604090205460ff1661065a5750610750565b6106666105068461547a565b61074e565b604051755265747279526f6c6c6261636b436f6e6669726d434d60501b602082015260360160405160208183030381529060405280519060200120846040516020016106b79190614aab565b604051602081830303815290604052805190602001201415610702576000818152600f602052604090205460ff166106ef5750610750565b6106666106fb8461547a565b6000611b95565b60008051602061556e833981519152838260405160200161072591815260200190565b60408051601f19818403018152908290526107409291614d3d565b60405180910390a150610750565b505b505050565b600060025482604051602001610775929190918252602082015260400190565b6040516020818303038152906040528051906020012090505b919050565b6001600660008282546107a6919061544b565b909155505060025460065460408051602081019390935282015260009060600160408051601f1981840301815291815281516020928301206000818152600790935290822060018082018a9055815460ff191617905591505b86811015610b4457600088888381811061082957634e487b7160e01b600052603260045260246000fd5b90506020020135905061083a613dc0565b600254815260208101829052436060820152600380546001919060009061086290849061544b565b90915550506003546080820152600060408201819052506040805160038082526080820190925290816020015b606081526020019060019003908161088f5790505060a082015260408051602081018790529081018990526060016040516020818303038152906040528160a001516000815181106108f157634e487b7160e01b600052603260045260246000fd5b60200260200101819052508360405160200161090f91815260200190565b6040516020818303038152906040528160a0015160018151811061094357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508686604051602001610961929190614c98565b6040516020818303038152906040528160a0015160028151811061099557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600454436109ae919061544b565b61012082015260006109bf82611039565b905060405180606001604052808481526020018360a001516002815181106109f757634e487b7160e01b600052603260045260246000fd5b602002602001015181526020018360a00151600081518110610a2957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015190915260008381526008825260409020825181558282015180519192610a6392600185019290910190613e31565b5060408201518051610a7f916002840191602090910190613e31565b5050600354600090815260056020526040808220849055516000805160206155ae8339815191529250610ab59184918690614bd6565b60405180910390a160008051602061558e833981519152858260025443600080600080600080604051610af19a99989796959493929190614b72565b60405180910390a160008581526007602090815260408083208784526003810183528184208590559383526004909301905220805460ff1916600117905550819050610b3c816154f3565b9150506107ff565b5050505050505050565b604080518082018252600080825260209182018190529384526010815281842092845291825291829020825180840190935280548352600101549082015290565b600254826020015114610be85760405162461bcd60e51b815260206004820152601960248201527f77726f6e6720746172676574436861696e496420696e20636d00000000000000604482015260640160405180910390fd5b6000610bfd8360000151846101200151610b4e565b61012084015181519192501415610c5f576000610c1b82858561202f565b905080610c505760008051602061556e8339815191528484604051610c41929190615276565b60405180910390a15050610c77565b610c5984612039565b50610750565b6000610c6b8484612179565b905061074e8482612184565b5050565b600082815260096020908152604080832084845290915281206002015481908190815b81811015610d335760008781526009602090815260408083208984529091528120600201805483908110610ce257634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548a83526009825260408084208b85528352808420828552600101909252912054909150610d1d908561544b565b9350508080610d2b906154f3565b915050610c9e565b50925090505b9250929050565b8060008484604051610d53929190614a9b565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905560018054808201825560009190915261074e907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018484613eb5565b60008060025483604051602001610ddf929190918252602082015260400190565b60408051808303601f1901815291815281516020928301206000908152600790925290205460ff169392505050565b6000610e1e838360000151610b4e565b805183519192501415610e925781516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c791610e6a91869190602001918252602082015260400190565b60408051601f1981840301815290829052610e8491614cac565b60405180910390a150610c77565b60008381526010602052604090206001015415801590610eb25750815115155b15610f32576000610ece84600185600001516101cd9190615463565b8051909150610f305782516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c791610f1691879190602001918252602082015260400190565b60408051601f1981840301815290829052610c4191614ceb565b505b60008381526010602081815260408084208651855280835290842086518155828701516001918201559387905291905201548251811015610f825782516000858152601060205260409020600101555b610f9584846000015185602001516121c9565b825160208401516040517f22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b9192610fdb928883526020830191909152604082015260600190565b60405180910390a150505050565b6000806002548360405160200161100a929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600090815260079092529020600201549392505050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b6107759b909a999101615323565b60008160a001516001815181106110a657634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906110c19190614541565b9050600080735dcca90e39c746e46f26158e35d80c3802e60a3a631747fef4600a86600001518761012001516110f689611039565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810186905260a40160006040518083038186803b15801561114657600080fd5b505af415801561115a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261118291908101906144de565b91509150816111ba5760008051602061556e83398151915284826040516111aa929190614ea5565b60405180910390a15050506115f5565b60006111c585611039565b905060008560a001516002815181106111ee57634e487b7160e01b600052603260045260246000fd5b602002602001015180602001905181019061120991906145b8565b905060006001600160a01b03166000826040516112269190614aab565b908152604051908190036020019020546001600160a01b031614156112935760008051602061556e83398151915286826040516020016112669190614c72565b60408051601f19818403018152908290526112819291614ee2565b60405180910390a150505050506115f5565b6000806000806000856040516112a99190614aab565b90815260405190819003602001812054630296961d60e61b82526001600160a01b03169063a5a58740906112e1908d90600401614e1c565b600060405180830381600087803b1580156112fb57600080fd5b505af115801561130f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113379190810190614677565b935093509350935081156113e6576000868152600e602052604090205460ff16611375576000868152600e60205260409020805460ff191660011790555b7f9e65a0567c076077e687e74e4eed0b9db0bb2f5f81311e9a5d385b9e0ad189d68a8787846040516020016113ab929190614ac7565b604051602081830303815290604052805190602001206040516113d093929190614e51565b60405180910390a15050505050505050506115f5565b6000868152600e60209081526040909120805460ff1916905560025485528a5190850152821561141c5760016040850152611424565b600260408501525b600160036000828254611437919061544b565b9091555050600354608085015261144d8a611039565b60c08501526060808b015160e0860152439085018190526004546114709161544b565b610120850152600061148185611039565b60035460009081526005602052604090819020829055519091506000805160206155ae833981519152906114bb9083906001908990614bd6565b60405180910390a16002805460405160008051602061558e833981519152926114f5928e9286924391600091829160019083908190614b72565b60405180910390a160405180606001604052808c610120015181526020018561151f576002611522565b60015b600481111561154157634e487b7160e01b600052602160045260246000fd5b8152602090810183905260008c8152600b825260409020825181559082015160018281018054909160ff199091169083600481111561159057634e487b7160e01b600052602160045260246000fd5b02179055506040918201516002909101558b516000908152600a60209081528282208d835290529081206115c391613f29565b8a516000908152600a602090815260408083208d845260010190915281206115ea91613f29565b505050505050505050505b50565b60008260a0015160018151811061161f57634e487b7160e01b600052603260045260246000fd5b602002602001015180602001905181019061163a9190614541565b9050600061164784611039565b845161012086015160405163302c1e4360e21b8152600a600482015260248101929092526044820152606481018290526084810184905260a481018590529091506000908190735dcca90e39c746e46f26158e35d80c3802e60a3a9063c0b0790c9060c40160006040518083038186803b1580156116c457600080fd5b505af41580156116d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261170091908101906144de565b91509150816117395760008051602061556e8339815191528682604051611728929190614ea5565b60405180910390a150505050610c77565b505060008460a0015160028151811061176257634e487b7160e01b600052603260045260246000fd5b602002602001015180602001905181019061177d91906145b8565b905060006001600160a01b031660008260405161179a9190614aab565b908152604051908190036020019020546001600160a01b031614156118055760008051602061556e83398151915285826040516020016117da9190614c72565b60408051601f19818403018152908290526117f592916151ae565b60405180910390a1505050610c77565b600080826040516118169190614aab565b908152604051908190036020019020546001600160a01b03169050611839613dc0565b6000806000846001600160a01b031663febc046f8b8b6040518363ffffffff1660e01b815260040161186c929190614e2f565b600060405180830381600087803b15801561188657600080fd5b505af115801561189a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c29190810190614677565b60408051602081018d90529081018e90529397509195509350915060009060600160405160208183030381529060405280519060200120905082156119a4576000818152600d602052604090205460ff16611931576000818152600d60205260409020805460ff191660011790555b7f51179d47c490a3093a9124fa92819aa00f97bb2dbde51a9f3a06835d87d14f0a8b8b8a8a86604051602001611968929190614ac7565b6040516020818303038152906040528051906020012060405161198e9493929190614e76565b60405180910390a1505050505050505050610c77565b6000908152600d602090815260408220805460ff1916905560025486528b519086015260038054600194509092506119dd90849061544b565b9091555050600354608083015260c0820185905260608089015160e084015243908301819052600454611a0f9161544b565b6101208301528015611a275760016040830152611a2f565b600260408301525b6000611a3a83611039565b60035460009081526005602052604090819020829055519091506000805160206155ae83398151915290611a749083906001908790614bd6565b60405180910390a160025489516101208b015160405160008051602061558e83398151915293611ab8938c9387938f93924392909160019060009081908190614b0e565b60405180910390a1508015611b2c5787516000908152600a60209081526040808320898452825280832081516060810183526101208d015181528084018c81529281018a81528254600181810185559387529490952090516003909402019283559051908201559051600290910155610b44565b505085516000908152600a60209081526040808320968352600196870182528083208151606081018352610120909a01518a5289830198895290890195865280548088018255908352912096516003909102909601958655505091519083015551600290910155565b6000611ba083611039565b905060008360a00151600181518110611bc957634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611be49190614541565b84516000908152600a602090815260408083208484526003019091528120919250611c0f9190613f29565b83516101208501516040516380d0324760e01b8152600a600482015260248101929092526044820152606481018390526084810182905260009081908190735dcca90e39c746e46f26158e35d80c3802e60a3a906380d032479060a40160006040518083038186803b158015611c8457600080fd5b505af4158015611c98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cc09190810190614462565b92509250925082611cfc5760008051602061556e8339815191528782604051611cea929190614ea5565b60405180910390a15050505050610c77565b8115611f305760008760a00151600281518110611d2957634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611d4491906145b8565b905060006001600160a01b0316600082604051611d619190614aab565b908152604051908190036020019020546001600160a01b03161415611dcf5760008051602061556e8339815191528882604051602001611da19190614c72565b60408051601f1981840301815290829052611dbc9291615219565b60405180910390a1505050505050610c77565b600080600083604051611de29190614aab565b90815260405190819003602001812054632ca93d7560e21b82526001600160a01b03169063b2a4f5d490611e1a908d90600401614e1c565b6040805180830381600087803b158015611e3357600080fd5b505af1158015611e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6b91906144b3565b90925090508115611f16576000888152600f602052604090205460ff16611ea6576000888152600f60205260409020805460ff191660011790555b7f995c193329004d81b8fcb0be4e8400e9d069e11842fc6315ffcc6fbfb8419a728a898584604051602001611edc929190614ac7565b60405160208183030381529060405280519060200120604051611f0193929190614e51565b60405180910390a15050505050505050610c77565b5050506000858152600f60205260409020805460ff191690555b7f43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5611f5a88611039565b60408051918252600060208301520160405180910390a160008051602061558e8339815191528460025443600080600c60018d6000604051611fa499989796959493929190614c0e565b60405180910390a160408051606081019091526101208801518152602081016004815260209081018790526000868152600b825260409020825181559082015160018281018054909160ff199091169083600481111561201457634e487b7160e01b600052602160045260246000fd5b02179055506040820151816002015590505050505050505050565b60015b9392505050565b60008160400151600481111561205f57634e487b7160e01b600052602160045260246000fd5b14156120735761206e8161107f565b6115f5565b60018160400151600481111561209957634e487b7160e01b600052602160045260246000fd5b14156120aa5761206e8160006129e1565b6002816040015160048111156120d057634e487b7160e01b600052602160045260246000fd5b14156120e15761206e816000612f46565b60038160400151600481111561210757634e487b7160e01b600052602160045260246000fd5b14156121185761206e816000613495565b60048160400151600481111561213e57634e487b7160e01b600052602160045260246000fd5b141561214f5761206e816000611b95565b60008051602061556e8339815191528160405161216c9190614f3f565b60405180910390a16115f5565b6000612032826137bd565b6000826040015160048111156121aa57634e487b7160e01b600052602160045260246000fd5b14156121bf576121ba82826115f8565b610c77565b610c7782826137d9565b60005b60015481101561264957600080600183815481106121fa57634e487b7160e01b600052603260045260246000fd5b906000526020600020016040516122119190614ae9565b90815260405190819003602001812054637c656c9960e11b82526004820187905260248201869052604482018590526001600160a01b0316915060009081908190849063f8cad93290606401600060405180830381600087803b15801561227757600080fd5b505af115801561228b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122b39190810190614337565b92509250925060005b83518110156123d95787600a60010160008684815181106122ed57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600001819055506001600a600101600086848151811061233357634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060010160006101000a81548160ff0219169083600481111561237b57634e487b7160e01b600052602160045260246000fd5b02179055506000600a60010160008684815181106123a957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206002018190555080806123d1906154f3565b9150506122bc565b5060005b82518110156124fa5787600a600101600085848151811061240e57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600001819055506002600a600101600085848151811061245457634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060010160006101000a81548160ff0219169083600481111561249c57634e487b7160e01b600052602160045260246000fd5b02179055506000600a60010160008584815181106124ca57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206002018190555080806124f2906154f3565b9150506123dd565b5060005b81518110156125cd577f23ae5d541512dbced3ef578dd616af8f33a5821dbc76be5e420f995a9ebeb2726001878154811061254957634e487b7160e01b600052603260045260246000fd5b9060005260206000200183838151811061257357634e487b7160e01b600052603260045260246000fd5b602002602001015160405160200161258c929190614af5565b60408051601f198184030181528282528051602091820120835282018c905281018a905260600160405180910390a1806125c5816154f3565b9150506124fe565b5082518251825160408051602081019490945283019190915260608201527f31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec4709060800160408051601f198184030181529082905261262a91614c72565b60405180910390a1505050508080612641906154f3565b9150506121cc565b5060008381526009602090815260408083208584529091528120905b60008381526001830160205260409020548110156129b157600083815260018301602052604081208054839081106126ad57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016040518061014001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff16600481111561270d57634e487b7160e01b600052602160045260246000fd5b600481111561272c57634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015612815578382906000526020600020018054612788906154b8565b80601f01602080910402602001604051908101604052809291908181526020018280546127b4906154b8565b80156128015780601f106127d657610100808354040283529160200191612801565b820191906000526020600020905b8154815290600101906020018083116127e457829003601f168201915b505050505081526020019060010190612769565b50505090825250600682015460208201526007820154604082015260088201546060820152600990910154608090910152905060018160400151600481111561286e57634e487b7160e01b600052602160045260246000fd5b14156128845761287f8160016129e1565b61299d565b6002816040015160048111156128aa57634e487b7160e01b600052602160045260246000fd5b14156128bb5761287f816001612f46565b6004816040015160048111156128e157634e487b7160e01b600052602160045260246000fd5b14156128f25761287f816001611b95565b60038160400151600481111561291857634e487b7160e01b600052602160045260246000fd5b14156129295761287f816001613495565b60008160400151600481111561294f57634e487b7160e01b600052602160045260246000fd5b14156129805760008051602061556e8339815191528160405161297291906150bb565b60405180910390a15061299f565b60008051602061556e833981519152816040516129729190614f3f565b505b806129a9816154f3565b915050612665565b5060008481526009602090815260408083208684529091528120906129d96002830182613f4a565b505050505050565b60008260a00151600181518110612a0857634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190612a239190614541565b60008181526007602052604090205490915060ff16612a595760008051602061556e83398151915283604051610e849190614f92565b600081815260076020908152604080832060c0870151845260040190915290205460ff16612a9e5760008051602061556e83398151915283604051610e849190615049565b600081815260076020526040902054600160ff9091161115612ad75760008051602061556e83398151915283604051610e849190615137565b600081815260076020908152604080832060c0870151845260040190915290205460ff1660021415612b205760008051602061556e83398151915283604051610e849190614ff1565b600081815260076020818152604080842060c08801518552600481018352908420805460ff191660029081179091558585529290915201805460019290612b6890849061544b565b90915550506002548351606085015160405160008051602061558e83398151915293612ba593869391924392906004906001908b90600090614c0e565b60405180910390a1600081815260076020526040902060018101546002909101541415610750576000818152600760205260408120805460ff191660021790555b60008281526007602052604090206001015481101561074e5760008281526007602090815260408083208484526003018252808320548084526008835281842082516060810190935280548352600181018054929594919291840191612c4b906154b8565b80601f0160208091040260200160405190810160405280929190818152602001828054612c77906154b8565b8015612cc45780601f10612c9957610100808354040283529160200191612cc4565b820191906000526020600020905b815481529060010190602001808311612ca757829003601f168201915b50505050508152602001600282018054612cdd906154b8565b80601f0160208091040260200160405190810160405280929190818152602001828054612d09906154b8565b8015612d565780601f10612d2b57610100808354040283529160200191612d56565b820191906000526020600020905b815481529060010190602001808311612d3957829003601f168201915b5050505050815250509050612d69613dc0565b6002548152815160208201526003604082018181525050600160036000828254612d93919061544b565b90915550506003805460808381019190915260408051838152918201905290816020015b6060815260200190600190039081612db757505060a0820181905260408301518151909190600090612df957634e487b7160e01b600052603260045260246000fd5b602002602001018190525084604051602001612e1791815260200190565b6040516020818303038152906040528160a00151600181518110612e4b57634e487b7160e01b600052603260045260246000fd5b602002602001018190525081602001518160a00151600281518110612e8057634e487b7160e01b600052603260045260246000fd5b60209081029190910101524360608201819052600454612e9f9161544b565b6101208201526000612eb082611039565b60035460009081526005602052604090819020829055519091506000805160206155ae83398151915290612eea9083906002908690614bd6565b60405180910390a160008051602061558e833981519152868260025443600080600660018f6000604051612f279a99989796959493929190614b72565b60405180910390a1505050508080612f3e906154f3565b915050612be6565b60008260a00151600181518110612f6d57634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190612f889190614541565b60008181526007602052604090205490915060ff16612fbe5760008051602061556e83398151915283604051610e849190614f92565b600081815260076020908152604080832060c0870151845260040190915290205460ff166130035760008051602061556e83398151915283604051610e849190615049565b600081815260076020526040902054600160ff909116111561303c5760008051602061556e83398151915283604051610e849190615137565b600081815260076020908152604080832060c08701518452600401909152902054600160ff90911611156130875760008051602061556e83398151915283604051610e849190614ff1565b60008181526007602090815260408083208054600360ff199182168117835560c089015186526004928301909452828520805490911690931790925560025486516060880151925160008051602061558e833981519152956130f595889543949390926001918c9190614c0e565b60405180910390a160005b60008281526007602052604090206001015481101561074e57600082815260076020908152604080832084845260030190915290205460c08501518114156131485750613483565b600083815260076020908152604080832084845260049081018352818420805460ff191690911790556008825280832081516060810190925280548252600181018054929391929184019161319c906154b8565b80601f01602080910402602001604051908101604052809291908181526020018280546131c8906154b8565b80156132155780601f106131ea57610100808354040283529160200191613215565b820191906000526020600020905b8154815290600101906020018083116131f857829003601f168201915b5050505050815260200160028201805461322e906154b8565b80601f016020809104026020016040519081016040528092919081815260200182805461325a906154b8565b80156132a75780601f1061327c576101008083540402835291602001916132a7565b820191906000526020600020905b81548152906001019060200180831161328a57829003601f168201915b50505050508152505090506132ba613dc0565b600254815281516020820152600460408201819052506040805160038082526080820190925290816020015b60608152602001906001900390816132e657505060a082018190526040830151815190919060009061332857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508460405160200161334691815260200190565b6040516020818303038152906040528160a0015160018151811061337a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525081602001518160a001516002815181106133af57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506001600360008282546133cd919061544b565b9091555050600354608082015243606082018190526004546133ee9161544b565b61012082015260006133ff82611039565b60035460009081526005602052604090819020829055519091506000805160206155ae833981519152906134399083906002908690614bd6565b60405180910390a160008051602061558e833981519152868260025443600080600860018f60006040516134769a99989796959493929190614b72565b60405180910390a1505050505b8061348d816154f3565b915050613100565b60008260a001516001815181106134bc57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906134d79190614541565b905060006134e484611039565b84516000908152600a60209081526040808320868452600201909152812091925061350f9190613f29565b8351610120850151604051637997da9b60e01b8152600a60048201526024810192909252604482015260648101829052608481018390526000908190735dcca90e39c746e46f26158e35d80c3802e60a3a90637997da9b9060a40160006040518083038186803b15801561358257600080fd5b505af4158015613596573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135be91908101906144de565b91509150816135e65760008051602061556e8339815191528682604051611728929190614ea5565b60008660a0015160028151811061360d57634e487b7160e01b600052603260045260246000fd5b602002602001015180602001905181019061362891906145b8565b905060006001600160a01b03166000826040516136459190614aab565b908152604051908190036020019020546001600160a01b031614156136a05760008051602061556e83398151915287826040516020016136859190614c72565b60408051601f1981840301815290829052611cea92916152c6565b6000816040516136b09190614aab565b908152604051908190036020018120546364f3931d60e11b82526001600160a01b03169063c9e7263a906136e8908a90600401614e1c565b600060405180830381600087803b15801561370257600080fd5b505af1158015613716573d6000803e3d6000fd5b5050505060008051602061558e8339815191528560025443600080600a60018d600060405161374d99989796959493929190614c0e565b60405180910390a160408051606081019091526101208801518152602081016003815260209081018690526000878152600b825260409020825181559082015160018281018054909160ff199091169083600481111561201457634e487b7160e01b600052602160045260246000fd5b60008151600014156137d15750600061078e565b506020015190565b6000806137e68484613a21565b915091508161380e5760008051602061556e8339815191528482604051610c41929190614ea5565b600061381985611039565b855160009081526009602090815260408083206101208a01518452825280832088845282528083208484529091529020549091501561385a57505050610c77565b84516000908152600960209081526040808320610120890151845282528083208784526001908101835281842080548083018255908552938390208951600a90950201938455918801518383015587015160028301805489949360ff19909116908360048111156138db57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a0820151805161390f916005840191602090910190613f68565b5060c0820151600682015560e082015160078201556101008201516008820155610120918201516009918201558651600090815260208281526040808320948a0180518452948252808320600201805460018082018355918552838520018a90558a5184528483528184208651855283528184208a855281018352818420548b5185529483528184208651855283528184208a8552835281842087855283528184209490945589518352600c825280832094518352938152838220888352815290839020805460ff191690921790915590518281527fce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab910160405180910390a1613a1a858583613c5e565b5050505050565b6000606060008460a00151600181518110613a4c57634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190613a679190614541565b90506000613a7486611039565b6040805160208101909152600081526001955093509050600386604001516004811115613ab157634e487b7160e01b600052602160045260246000fd5b1415613b7257855161012087015160405163d029eff560e01b8152600a600482015260248101929092526044820152606481018290526084810183905260a48101869052735dcca90e39c746e46f26158e35d80c3802e60a3a9063d029eff59060c40160006040518083038186803b158015613b2c57600080fd5b505af4158015613b40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613b6891908101906144de565b9094509250613c55565b600486604001516004811115613b9857634e487b7160e01b600052602160045260246000fd5b1415613c55578551610120870151604051630535c60760e51b8152600a600482015260248101929092526044820152606481018290526084810183905260a48101869052735dcca90e39c746e46f26158e35d80c3802e60a3a9063a6b8c0e09060c40160006040518083038186803b158015613c1357600080fd5b505af4158015613c27573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613c4f91908101906144de565b90945092505b50509250929050565b60008360a00151600181518110613c8557634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190613ca09190614541565b60408051606081018252610120870151815260208101869052908101849052909150600385604001516004811115613ce857634e487b7160e01b600052602160045260246000fd5b1415613d3f5784516000908152600a60209081526040808320858452600290810183528184208054600181810183559186529484902086516003909602019485559285015192840192909255830151910155613a1a565b600485604001516004811115613d6557634e487b7160e01b600052602160045260246000fd5b1415613a1a5784516000908152600a6020908152604080832085845260039081018352818420805460018181018355918652948490208651959092029091019384559184015191830191909155820151600290910155613a1a565b604051806101400160405280600081526020016000815260200160006004811115613dfb57634e487b7160e01b600052602160045260246000fd5b8152600060208201819052604082018190526060808301526080820181905260a0820181905260c0820181905260e09091015290565b828054613e3d906154b8565b90600052602060002090601f016020900481019282613e5f5760008555613ea5565b82601f10613e7857805160ff1916838001178555613ea5565b82800160010185558215613ea5579182015b82811115613ea5578251825591602001919060010190613e8a565b50613eb1929150613fc1565b5090565b828054613ec1906154b8565b90600052602060002090601f016020900481019282613ee35760008555613ea5565b82601f10613efc5782800160ff19823516178555613ea5565b82800160010185558215613ea5579182015b82811115613ea5578235825591602001919060010190613f0e565b50805460008255600302906000526020600020908101906115f59190613fd6565b50805460008255906000526020600020908101906115f59190613fc1565b828054828255906000526020600020908101928215613fb5579160200282015b82811115613fb55782518051613fa5918491602090910190613e31565b5091602001919060010190613f88565b50613eb1929150613ff8565b5b80821115613eb15760008155600101613fc2565b5b80821115613eb1576000808255600182018190556002820155600301613fd7565b80821115613eb157600061400c8282614015565b50600101613ff8565b508054614021906154b8565b6000825580601f1061403357506115f5565b601f0160209004906000526020600020908101906115f59190613fc1565b600061406461405f846153dd565b61538a565b905082815283838301111561407857600080fd5b828260208301376000602084830101529392505050565b600061409d61405f846153dd565b90508281528383830111156140b157600080fd5b61203283602083018461548c565b600082601f8301126140cf578081fd5b815160206140df61405f836153ba565b82815281810190858301838502870184018810156140fb578586fd5b855b85811015614119578151845292840192908401906001016140fd565b5090979650505050505050565b600082601f830112614136578081fd5b8135602061414661405f836153ba565b82815281810190858301855b8581101561411957614169898684358b01016141f5565b84529284019290840190600101614152565b600082601f83011261418b578081fd5b8151602061419b61405f836153ba565b82815281810190858301855b85811015614119578151880189603f8201126141c1578788fd5b6141d28a878301516040840161408f565b85525092840192908401906001016141a7565b8051801515811461078e57600080fd5b600082601f830112614205578081fd5b61203283833560208501614051565b803561078e81615560565b805161078e81615560565b60008083601f84011261423b578182fd5b5081356001600160401b03811115614251578182fd5b602083019150836020828501011115610d3957600080fd5b600082601f830112614279578081fd5b6120328383516020850161408f565b600061014080838503121561429b578182fd5b6142a48161538a565b91505081358152602082013560208201526142c160408301614214565b6040820152606082013560608201526080820135608082015260a08201356001600160401b038111156142f357600080fd5b6142ff84828501614126565b60a08301525060c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b60008060006060848603121561434b578283fd5b83516001600160401b0380821115614361578485fd5b61436d878388016140bf565b94506020860151915080821115614382578384fd5b61438e878388016140bf565b935060408601519150808211156143a3578283fd5b506143b0868287016140bf565b9150509250925092565b600080600080600080608087890312156143d2578384fd5b86356001600160401b03808211156143e8578586fd5b818901915089601f8301126143fb578586fd5b813581811115614409578687fd5b8a6020808302850101111561441c578687fd5b6020928301985096509088013594506040880135908082111561443d578384fd5b5061444a89828a0161422a565b979a9699509497949695606090950135949350505050565b600080600060608486031215614476578081fd5b61447f846141e5565b925061448d602085016141e5565b915060408401516001600160401b038111156144a7578182fd5b6143b086828701614269565b600080604083850312156144c5578182fd5b6144ce836141e5565b9150602083015190509250929050565b600080604083850312156144f0578182fd5b6144f9836141e5565b915060208301516001600160401b03811115614513578182fd5b61451f85828601614269565b9150509250929050565b60006020828403121561453a578081fd5b5035919050565b600060208284031215614552578081fd5b5051919050565b60008060006040848603121561456d578081fd5b83356001600160401b03811115614582578182fd5b61458e8682870161422a565b90945092505060208401356001600160a01b03811681146145ad578182fd5b809150509250925092565b6000602082840312156145c9578081fd5b81516001600160401b038111156145de578182fd5b6145ea84828501614269565b949350505050565b600080600060608486031215614606578081fd5b83356001600160401b038082111561461c578283fd5b818601915086601f83011261462f578283fd5b61463e87833560208501614051565b94506020860135915080821115614653578283fd5b5084016101408187031215614666578182fd5b929592945050506040919091013590565b6000806000806080858703121561468c578182fd5b84516001600160401b03808211156146a2578384fd5b818701915061014080838a0312156146b8578485fd5b6146c18161538a565b905082518152602083015160208201526146dd6040840161421f565b6040820152606083015160608201526080830151608082015260a083015182811115614707578586fd5b6147138a82860161417b565b60a08301525060c0838101519082015260e0808401519082015261010080840151908201526101209283015192810192909252509350614755602086016141e5565b9250614763604086016141e5565b6060959095015193969295505050565b60008060408385031215614785578182fd5b82356001600160401b038082111561479b578384fd5b6147a786838701614288565b935060208501359150808211156147bc578283fd5b5061451f858286016141f5565b600080604083850312156147db578182fd5b50508035926020909101359150565b60008082840360608112156147fd578283fd5b833592506040601f1982011215614812578182fd5b5061481d604061538a565b6020840135815260408401356020820152809150509250929050565b818352602080840193600091908185020181018584845b878110156148b65782840389528135601e19883603018112614870578687fd5b870180356001600160401b03811115614887578788fd5b803603891315614895578788fd5b6148a28682898501614909565b9a87019a9550505090840190600101614850565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b858110156148b65782840389526148f7848351614933565b988501989350908401906001016148df565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000815180845261494b81602086016020860161548c565b601f01601f19169290920160200192915050565b61496881615550565b9052565b600d811061496857614968615524565b80546000906002810460018083168061499657607f831692505b60208084108214156149b657634e487b7160e01b86526022600452602486fd5b8180156149ca57600181146149db57614a08565b60ff19861689528489019650614a08565b60008881526020902060005b86811015614a005781548b8201529085019083016149e7565b505084890196505b50505050505092915050565b600061014082518452602083015160208501526040830151614a39604086018261495f565b50606083015160608501526080830151608085015260a08301518160a0860152614a65828601826148c3565b60c0858101519087015260e080860151908701526101008086015190870152610120948501519490950193909352509192915050565b6000828483379101908152919050565b60008251614abd81846020870161548c565b9190910192915050565b60008351614ad981846020880161548c565b9190910191825250602001919050565b6000612032828461497c565b6000614b01828561497c565b9283525050602001919050565b6000610160820190508c82528b60208301528a60408301528960608301528860808301528760a08301528660c0830152614b4b60e083018761496c565b93151561010082015291151561012083015215156101409091015298975050505050505050565b6000610160820190508b82528a6020830152600060408301528960608301528860808301528760a08301528660c0830152614bb060e083018761496c565b931515610100820152911515610120830152151561014090910152979650505050505050565b600084825260048410614beb57614beb615524565b83602083015260606040830152614c056060830184614a14565b95945050505050565b6000610160820190508a825260006020830152600060408301528960608301528860808301528760a08301528660c0830152614c4d60e083018761496c565b9315156101008201529115156101208301521515610140909101529695505050505050565b6000602082526120326020830184614933565b60208101614c9283615550565b91905290565b6000602082526145ea602083018486614909565b60006040825260156040830152741d1a19481a195859195c881a5cc8195e1a5cdd1959605a1b6060830152608060208301526120326080830184614933565b600060408252602260408301527f7468652070726576696f757320686561646572206973206e6f74206578697374606083015261195960f21b608083015260a0602083015261203260a0830184614933565b6000606082528335606083015260208401356080830152614d6060408501614214565b614d6d60a084018261495f565b50606084013560c0830152608084013560e0830152614d8f60a0850185615404565b6101406101008181870152614da96101a087018486614839565b9350610120925060c08801358387015260e08801358287015280880135610160870152505080860135610180850152508281036020840152614e0881601081526f3bb937b7339034b232b73a34b334b2b960811b602082015260400190565b90508281036040840152614c058185614933565b6000602082526120326020830184614a14565b600060408252614e426040830185614a14565b90508260208301529392505050565b600060608252614e646060830186614a14565b60208301949094525060400152919050565b600060808252614e896080830187614a14565b6020830195909552506040810192909252606090910152919050565b600060608252614eb86060830185614a14565b8281036020840152614eca8185614933565b83810360409094019390935250815260200192915050565b600060608252614ef56060830185614a14565b828103806020850152601a82527f617070206e6f7420666f756e64207768656e2050726570617265000000000000602083015260408101604085015250614c056040820185614933565b600060608252614f526060830184614a14565b8281036020808501829052601183527077726f6e6720706861736520696e20636d60781b9083015260409081019381019390935291820152606001919050565b600060608252614fa56060830184614a14565b8281036020808501829052601a83527f746865207472616e73616374696f6e20697320696e76616c69640000000000009083015260409081019381019390935291820152606001919050565b6000606082526150046060830184614a14565b828103602080850182905260168352751d1a194818db481a185cc81899595b881919585b195960521b9083015260409081019381019390935291820152606001919050565b60006060825261505c6060830184614a14565b828103806020850152602682527f74686520636d206973206e6f7420696e20746865207472616e73616374696f6e60208301526502067726f75760d41b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526150ce6060830184614a14565b828103806020850152603082527f50524550415245206d657373616765206d757374206e6f7420626520696e207560208301526f6e636f6e6669726d656420717565756560801b6040830152606081016040850152508160608201526080810191505092915050565b60006060825261514a6060830184614a14565b828103806020850152602b82527f746865207472616e73616374696f6e20686173206265656e20636f6d6d69742060208301526a6f7220726f6c6c6261636b60a81b6040830152606081016040850152508160608201526080810191505092915050565b6000606082526151c16060830185614a14565b828103806020850152602582527f617070206e6f7420666f756e64207768656e2050726570617265556e636f6e666020830152641a5c9b595960da1b604083015260608101604085015250614c056060820185614933565b60006060825261522c6060830185614a14565b828103806020850152601b82527f617070206e6f7420666f756e64207768656e20526f6c6c6261636b0000000000602083015260408101604085015250614c056040820185614933565b6000606082526152896060830185614a14565b828103806020850152601082526f18db481d995c9a599e4819985a5b195960821b602083015260408101604085015250614c056040820185614933565b6000606082526152d96060830185614a14565b828103806020850152601982527f617070206e6f7420666f756e64207768656e20436f6d6d697400000000000000602083015260408101604085015250614c056040820185614933565b60006101408c83528b602084015261533a8b615550565b8a60408401528960608401528860808401528060a084015261535e818401896148c3565b9150508560c08301528460e083015283610100830152826101208301529b9a5050505050505050505050565b604051601f8201601f191681016001600160401b03811182821017156153b2576153b261553a565b604052919050565b60006001600160401b038211156153d3576153d361553a565b5060209081020190565b60006001600160401b038211156153f6576153f661553a565b50601f01601f191660200190565b6000808335601e1984360301811261541a578283fd5b83016020810192503590506001600160401b0381111561543957600080fd5b602081023603831315610d3957600080fd5b6000821982111561545e5761545e61550e565b500190565b6000828210156154755761547561550e565b500390565b60006154863683614288565b92915050565b60005b838110156154a757818101518382015260200161548f565b8381111561074e5750506000910152565b6002810460018216806154cc57607f821691505b602082108114156154ed57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156155075761550761550e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600581106115f5576115f5615524565b600581106115f557600080fdfee224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e1ed0f12fccbaf66843fd55d96ed5b670ddc42e42e5dce1b6dec8dcf06552b8897fff4144471887d41c7129df4504c2a47dc58c4e883091e283b4989491dd4ac5a26469706673582212204d449c4f33899b8e4e0dbdda8e93f2130f73e2bf39ed751a54d2f5c1e10c9fb264736f6c63430008020033",
}

// SR2PCABI is the input ABI used to generate the binding from.
// Deprecated: Use SR2PCMetaData.ABI instead.
var SR2PCABI = SR2PCMetaData.ABI

// SR2PCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SR2PCMetaData.Bin instead.
var SR2PCBin = SR2PCMetaData.Bin

// DeploySR2PC deploys a new Ethereum contract, binding an instance of SR2PC to it.
func DeploySR2PC(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId *big.Int, _expectedTrustDelta *big.Int) (common.Address, *types.Transaction, *SR2PC, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SR2PCBin), backend, _chainId, _expectedTrustDelta)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// SR2PC is an auto generated Go binding around an Ethereum contract.
type SR2PC struct {
	SR2PCCaller     // Read-only binding to the contract
	SR2PCTransactor // Write-only binding to the contract
	SR2PCFilterer   // Log filterer for contract events
}

// SR2PCCaller is an auto generated read-only Go binding around an Ethereum contract.
type SR2PCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SR2PCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SR2PCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SR2PCSession struct {
	Contract     *SR2PC            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SR2PCCallerSession struct {
	Contract *SR2PCCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SR2PCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SR2PCTransactorSession struct {
	Contract     *SR2PCTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCRaw is an auto generated low-level Go binding around an Ethereum contract.
type SR2PCRaw struct {
	Contract *SR2PC // Generic contract binding to access the raw methods on
}

// SR2PCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SR2PCCallerRaw struct {
	Contract *SR2PCCaller // Generic read-only contract binding to access the raw methods on
}

// SR2PCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SR2PCTransactorRaw struct {
	Contract *SR2PCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSR2PC creates a new instance of SR2PC, bound to a specific deployed contract.
func NewSR2PC(address common.Address, backend bind.ContractBackend) (*SR2PC, error) {
	contract, err := bindSR2PC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// NewSR2PCCaller creates a new read-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCCaller(address common.Address, caller bind.ContractCaller) (*SR2PCCaller, error) {
	contract, err := bindSR2PC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCCaller{contract: contract}, nil
}

// NewSR2PCTransactor creates a new write-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCTransactor(address common.Address, transactor bind.ContractTransactor) (*SR2PCTransactor, error) {
	contract, err := bindSR2PC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCTransactor{contract: contract}, nil
}

// NewSR2PCFilterer creates a new log filterer instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCFilterer(address common.Address, filterer bind.ContractFilterer) (*SR2PCFilterer, error) {
	contract, err := bindSR2PC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SR2PCFilterer{contract: contract}, nil
}

// bindSR2PC binds a generic wrapper to an already deployed contract.
func bindSR2PC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.SR2PCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transact(opts, method, params...)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetHeader(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getHeader", _chainId, _height)

	if err != nil {
		return *new(SR2PCBlockHeader), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCBlockHeader)).(*SR2PCBlockHeader)

	return out0, err

}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetRoot is a free data retrieval call binding the contract method 0xd4be7935.
//
// Solidity: function getRoot(uint256 _chainId, uint256 _height) view returns(bytes32)
func (_SR2PC *SR2PCCaller) GetRoot(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getRoot", _chainId, _height)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoot is a free data retrieval call binding the contract method 0xd4be7935.
//
// Solidity: function getRoot(uint256 _chainId, uint256 _height) view returns(bytes32)
func (_SR2PC *SR2PCSession) GetRoot(_chainId *big.Int, _height *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetRoot(&_SR2PC.CallOpts, _chainId, _height)
}

// GetRoot is a free data retrieval call binding the contract method 0xd4be7935.
//
// Solidity: function getRoot(uint256 _chainId, uint256 _height) view returns(bytes32)
func (_SR2PC *SR2PCCallerSession) GetRoot(_chainId *big.Int, _height *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetRoot(&_SR2PC.CallOpts, _chainId, _height)
}

// GetTranStatus is a free data retrieval call binding the contract method 0x4a6bc702.
//
// Solidity: function getTranStatus(bytes32 _transactionHash) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTranStatus(opts *bind.CallOpts, _transactionHash [32]byte) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTranStatus", _transactionHash)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTranStatus is a free data retrieval call binding the contract method 0x4a6bc702.
//
// Solidity: function getTranStatus(bytes32 _transactionHash) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTranStatus(_transactionHash [32]byte) (uint8, error) {
	return _SR2PC.Contract.GetTranStatus(&_SR2PC.CallOpts, _transactionHash)
}

// GetTranStatus is a free data retrieval call binding the contract method 0x4a6bc702.
//
// Solidity: function getTranStatus(bytes32 _transactionHash) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTranStatus(_transactionHash [32]byte) (uint8, error) {
	return _SR2PC.Contract.GetTranStatus(&_SR2PC.CallOpts, _transactionHash)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTransStatus(opts *bind.CallOpts, _transactionPoint *big.Int) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransStatus", _transactionPoint)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetTransSuccessNumber(opts *bind.CallOpts, _transactionPoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransSuccessNumber", _transactionPoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCaller) GetTransactionHash(opts *bind.CallOpts, _point *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransactionHash", _point)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCallerSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetUcfStatus is a free data retrieval call binding the contract method 0xa2ed3122.
//
// Solidity: function getUcfStatus(uint256 _chainId, bytes32 _transactionHash) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetUcfStatus(opts *bind.CallOpts, _chainId *big.Int, _transactionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUcfStatus", _chainId, _transactionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUcfStatus is a free data retrieval call binding the contract method 0xa2ed3122.
//
// Solidity: function getUcfStatus(uint256 _chainId, bytes32 _transactionHash) view returns(uint256)
func (_SR2PC *SR2PCSession) GetUcfStatus(_chainId *big.Int, _transactionHash [32]byte) (*big.Int, error) {
	return _SR2PC.Contract.GetUcfStatus(&_SR2PC.CallOpts, _chainId, _transactionHash)
}

// GetUcfStatus is a free data retrieval call binding the contract method 0xa2ed3122.
//
// Solidity: function getUcfStatus(uint256 _chainId, bytes32 _transactionHash) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetUcfStatus(_chainId *big.Int, _transactionHash [32]byte) (*big.Int, error) {
	return _SR2PC.Contract.GetUcfStatus(&_SR2PC.CallOpts, _chainId, _transactionHash)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256, uint256)
func (_SR2PC *SR2PCCaller) GetUncfmQueueLength(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUncfmQueueLength", _chainId, _height)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256, uint256)
func (_SR2PC *SR2PCSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, *big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256, uint256)
func (_SR2PC *SR2PCCallerSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, *big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x01a09b05.
//
// Solidity: function CrossRetry(string identifier, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 root) returns()
func (_SR2PC *SR2PCTransactor) CrossRetry(opts *bind.TransactOpts, identifier string, cm CrossMessage, root [32]byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "CrossRetry", identifier, cm, root)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x01a09b05.
//
// Solidity: function CrossRetry(string identifier, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 root) returns()
func (_SR2PC *SR2PCSession) CrossRetry(identifier string, cm CrossMessage, root [32]byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossRetry(&_SR2PC.TransactOpts, identifier, cm, root)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x01a09b05.
//
// Solidity: function CrossRetry(string identifier, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 root) returns()
func (_SR2PC *SR2PCTransactorSession) CrossRetry(identifier string, cm CrossMessage, root [32]byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossRetry(&_SR2PC.TransactOpts, identifier, cm, root)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactor) CrossReceive(opts *bind.TransactOpts, cm CrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossReceive", cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCSession) CrossReceive(cm CrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactorSession) CrossReceive(cm CrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossSend is a paid mutator transaction binding the contract method 0x6c55d0d4.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value, string _appIdentifier, uint256 _appValueId) payable returns()
func (_SR2PC *SR2PCTransactor) CrossSend(opts *bind.TransactOpts, _targetChainIds []*big.Int, _value *big.Int, _appIdentifier string, _appValueId *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossSend", _targetChainIds, _value, _appIdentifier, _appValueId)
}

// CrossSend is a paid mutator transaction binding the contract method 0x6c55d0d4.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value, string _appIdentifier, uint256 _appValueId) payable returns()
func (_SR2PC *SR2PCSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int, _appIdentifier string, _appValueId *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value, _appIdentifier, _appValueId)
}

// CrossSend is a paid mutator transaction binding the contract method 0x6c55d0d4.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value, string _appIdentifier, uint256 _appValueId) payable returns()
func (_SR2PC *SR2PCTransactorSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int, _appIdentifier string, _appValueId *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value, _appIdentifier, _appValueId)
}

// RegisterApp is a paid mutator transaction binding the contract method 0xca8bad91.
//
// Solidity: function registerApp(string _identifier, address _app) returns()
func (_SR2PC *SR2PCTransactor) RegisterApp(opts *bind.TransactOpts, _identifier string, _app common.Address) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "registerApp", _identifier, _app)
}

// RegisterApp is a paid mutator transaction binding the contract method 0xca8bad91.
//
// Solidity: function registerApp(string _identifier, address _app) returns()
func (_SR2PC *SR2PCSession) RegisterApp(_identifier string, _app common.Address) (*types.Transaction, error) {
	return _SR2PC.Contract.RegisterApp(&_SR2PC.TransactOpts, _identifier, _app)
}

// RegisterApp is a paid mutator transaction binding the contract method 0xca8bad91.
//
// Solidity: function registerApp(string _identifier, address _app) returns()
func (_SR2PC *SR2PCTransactorSession) RegisterApp(_identifier string, _app common.Address) (*types.Transaction, error) {
	return _SR2PC.Contract.RegisterApp(&_SR2PC.TransactOpts, _identifier, _app)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactor) SyncHeader(opts *bind.TransactOpts, _chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "syncHeader", _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactorSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactorSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// SR2PCDebugIterator is returned from FilterDebug and is used to iterate over the raw logs and unpacked data for Debug events raised by the SR2PC contract.
type SR2PCDebugIterator struct {
	Event *SR2PCDebug // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCDebugIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCDebug)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCDebug)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCDebugIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCDebugIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCDebug represents a Debug event raised by the SR2PC contract.
type SR2PCDebug struct {
	Msg []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDebug is a free log retrieval operation binding the contract event 0x31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470.
//
// Solidity: event Debug(bytes msg)
func (_SR2PC *SR2PCFilterer) FilterDebug(opts *bind.FilterOpts) (*SR2PCDebugIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return &SR2PCDebugIterator{contract: _SR2PC.contract, event: "Debug", logs: logs, sub: sub}, nil
}

// WatchDebug is a free log subscription operation binding the contract event 0x31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470.
//
// Solidity: event Debug(bytes msg)
func (_SR2PC *SR2PCFilterer) WatchDebug(opts *bind.WatchOpts, sink chan<- *SR2PCDebug) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCDebug)
				if err := _SR2PC.contract.UnpackLog(event, "Debug", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDebug is a log parse operation binding the contract event 0x31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470.
//
// Solidity: event Debug(bytes msg)
func (_SR2PC *SR2PCFilterer) ParseDebug(log types.Log) (*SR2PCDebug, error) {
	event := new(SR2PCDebug)
	if err := _SR2PC.contract.UnpackLog(event, "Debug", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCErrorIterator is returned from FilterError and is used to iterate over the raw logs and unpacked data for Error events raised by the SR2PC contract.
type SR2PCErrorIterator struct {
	Event *SR2PCError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCError represents a Error event raised by the SR2PC contract.
type SR2PCError struct {
	Cm     CrossMessage
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterError is a free log retrieval operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterError(opts *bind.FilterOpts) (*SR2PCErrorIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return &SR2PCErrorIterator{contract: _SR2PC.contract, event: "Error", logs: logs, sub: sub}, nil
}

// WatchError is a free log subscription operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchError(opts *bind.WatchOpts, sink chan<- *SR2PCError) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCError)
				if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseError is a log parse operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseError(log types.Log) (*SR2PCError, error) {
	event := new(SR2PCError)
	if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCMetricsIterator is returned from FilterMetrics and is used to iterate over the raw logs and unpacked data for Metrics events raised by the SR2PC contract.
type SR2PCMetricsIterator struct {
	Event *SR2PCMetrics // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCMetricsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCMetrics)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCMetrics)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCMetricsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCMetricsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCMetrics represents a Metrics event raised by the SR2PC contract.
type SR2PCMetrics struct {
	TransactionHash [32]byte
	CmHash          [32]byte
	Root            [32]byte
	ChainId         *big.Int
	Height          *big.Int
	FromChainId     *big.Int
	FromHeight      *big.Int
	Phase           uint8
	IsConfirmed     bool
	ByHeader        bool
	Retry           bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMetrics is a free log retrieval operation binding the contract event 0x1ed0f12fccbaf66843fd55d96ed5b670ddc42e42e5dce1b6dec8dcf06552b889.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, bytes32 root, uint256 chainId, uint256 height, uint256 fromChainId, uint256 fromHeight, uint8 phase, bool isConfirmed, bool byHeader, bool retry)
func (_SR2PC *SR2PCFilterer) FilterMetrics(opts *bind.FilterOpts) (*SR2PCMetricsIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Metrics")
	if err != nil {
		return nil, err
	}
	return &SR2PCMetricsIterator{contract: _SR2PC.contract, event: "Metrics", logs: logs, sub: sub}, nil
}

// WatchMetrics is a free log subscription operation binding the contract event 0x1ed0f12fccbaf66843fd55d96ed5b670ddc42e42e5dce1b6dec8dcf06552b889.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, bytes32 root, uint256 chainId, uint256 height, uint256 fromChainId, uint256 fromHeight, uint8 phase, bool isConfirmed, bool byHeader, bool retry)
func (_SR2PC *SR2PCFilterer) WatchMetrics(opts *bind.WatchOpts, sink chan<- *SR2PCMetrics) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Metrics")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCMetrics)
				if err := _SR2PC.contract.UnpackLog(event, "Metrics", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetrics is a log parse operation binding the contract event 0x1ed0f12fccbaf66843fd55d96ed5b670ddc42e42e5dce1b6dec8dcf06552b889.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, bytes32 root, uint256 chainId, uint256 height, uint256 fromChainId, uint256 fromHeight, uint8 phase, bool isConfirmed, bool byHeader, bool retry)
func (_SR2PC *SR2PCFilterer) ParseMetrics(log types.Log) (*SR2PCMetrics, error) {
	event := new(SR2PCMetrics)
	if err := _SR2PC.contract.UnpackLog(event, "Metrics", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the SR2PC contract.
type SR2PCReceivedIterator struct {
	Event *SR2PCReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCReceived represents a Received event raised by the SR2PC contract.
type SR2PCReceived struct {
	User  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) FilterReceived(opts *bind.FilterOpts) (*SR2PCReceivedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &SR2PCReceivedIterator{contract: _SR2PC.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *SR2PCReceived) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCReceived)
				if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) ParseReceived(log types.Log) (*SR2PCReceived, error) {
	event := new(SR2PCReceived)
	if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryPrepareConfirmCMIterator is returned from FilterRetryPrepareConfirmCM and is used to iterate over the raw logs and unpacked data for RetryPrepareConfirmCM events raised by the SR2PC contract.
type SR2PCRetryPrepareConfirmCMIterator struct {
	Event *SR2PCRetryPrepareConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryPrepareConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryPrepareConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryPrepareConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryPrepareConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryPrepareConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryPrepareConfirmCM represents a RetryPrepareConfirmCM event raised by the SR2PC contract.
type SR2PCRetryPrepareConfirmCM struct {
	Cm       CrossMessage
	CmHash   [32]byte
	LockHash [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRetryPrepareConfirmCM is a free log retrieval operation binding the contract event 0x9e65a0567c076077e687e74e4eed0b9db0bb2f5f81311e9a5d385b9e0ad189d6.
//
// Solidity: event RetryPrepareConfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) FilterRetryPrepareConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryPrepareConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryPrepareConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryPrepareConfirmCMIterator{contract: _SR2PC.contract, event: "RetryPrepareConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryPrepareConfirmCM is a free log subscription operation binding the contract event 0x9e65a0567c076077e687e74e4eed0b9db0bb2f5f81311e9a5d385b9e0ad189d6.
//
// Solidity: event RetryPrepareConfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) WatchRetryPrepareConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryPrepareConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryPrepareConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryPrepareConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryPrepareConfirmCM is a log parse operation binding the contract event 0x9e65a0567c076077e687e74e4eed0b9db0bb2f5f81311e9a5d385b9e0ad189d6.
//
// Solidity: event RetryPrepareConfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) ParseRetryPrepareConfirmCM(log types.Log) (*SR2PCRetryPrepareConfirmCM, error) {
	event := new(SR2PCRetryPrepareConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryPrepareUnconfirmCMIterator is returned from FilterRetryPrepareUnconfirmCM and is used to iterate over the raw logs and unpacked data for RetryPrepareUnconfirmCM events raised by the SR2PC contract.
type SR2PCRetryPrepareUnconfirmCMIterator struct {
	Event *SR2PCRetryPrepareUnconfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryPrepareUnconfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryPrepareUnconfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryPrepareUnconfirmCM represents a RetryPrepareUnconfirmCM event raised by the SR2PC contract.
type SR2PCRetryPrepareUnconfirmCM struct {
	Cm       CrossMessage
	Root     [32]byte
	CmHash   [32]byte
	LockHash [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRetryPrepareUnconfirmCM is a free log retrieval operation binding the contract event 0x51179d47c490a3093a9124fa92819aa00f97bb2dbde51a9f3a06835d87d14f0a.
//
// Solidity: event RetryPrepareUnconfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 root, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) FilterRetryPrepareUnconfirmCM(opts *bind.FilterOpts) (*SR2PCRetryPrepareUnconfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryPrepareUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryPrepareUnconfirmCMIterator{contract: _SR2PC.contract, event: "RetryPrepareUnconfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryPrepareUnconfirmCM is a free log subscription operation binding the contract event 0x51179d47c490a3093a9124fa92819aa00f97bb2dbde51a9f3a06835d87d14f0a.
//
// Solidity: event RetryPrepareUnconfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 root, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) WatchRetryPrepareUnconfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryPrepareUnconfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryPrepareUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryPrepareUnconfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareUnconfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryPrepareUnconfirmCM is a log parse operation binding the contract event 0x51179d47c490a3093a9124fa92819aa00f97bb2dbde51a9f3a06835d87d14f0a.
//
// Solidity: event RetryPrepareUnconfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 root, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) ParseRetryPrepareUnconfirmCM(log types.Log) (*SR2PCRetryPrepareUnconfirmCM, error) {
	event := new(SR2PCRetryPrepareUnconfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareUnconfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryRollbackConfirmCMIterator is returned from FilterRetryRollbackConfirmCM and is used to iterate over the raw logs and unpacked data for RetryRollbackConfirmCM events raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCMIterator struct {
	Event *SR2PCRetryRollbackConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryRollbackConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryRollbackConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryRollbackConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryRollbackConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryRollbackConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryRollbackConfirmCM represents a RetryRollbackConfirmCM event raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCM struct {
	Cm       CrossMessage
	CmHash   [32]byte
	LockHash [32]byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRetryRollbackConfirmCM is a free log retrieval operation binding the contract event 0x995c193329004d81b8fcb0be4e8400e9d069e11842fc6315ffcc6fbfb8419a72.
//
// Solidity: event RetryRollbackConfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) FilterRetryRollbackConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryRollbackConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryRollbackConfirmCMIterator{contract: _SR2PC.contract, event: "RetryRollbackConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryRollbackConfirmCM is a free log subscription operation binding the contract event 0x995c193329004d81b8fcb0be4e8400e9d069e11842fc6315ffcc6fbfb8419a72.
//
// Solidity: event RetryRollbackConfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) WatchRetryRollbackConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryRollbackConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryRollbackConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryRollbackConfirmCM is a log parse operation binding the contract event 0x995c193329004d81b8fcb0be4e8400e9d069e11842fc6315ffcc6fbfb8419a72.
//
// Solidity: event RetryRollbackConfirmCM((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes32 cmHash, bytes32 lockHash)
func (_SR2PC *SR2PCFilterer) ParseRetryRollbackConfirmCM(log types.Log) (*SR2PCRetryRollbackConfirmCM, error) {
	event := new(SR2PCRetryRollbackConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRollbackConfirmedIterator is returned from FilterRollbackConfirmed and is used to iterate over the raw logs and unpacked data for RollbackConfirmed events raised by the SR2PC contract.
type SR2PCRollbackConfirmedIterator struct {
	Event *SR2PCRollbackConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRollbackConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRollbackConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRollbackConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRollbackConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRollbackConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRollbackConfirmed represents a RollbackConfirmed event raised by the SR2PC contract.
type SR2PCRollbackConfirmed struct {
	CmHash [32]byte
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollbackConfirmed is a free log retrieval operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) FilterRollbackConfirmed(opts *bind.FilterOpts) (*SR2PCRollbackConfirmedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return &SR2PCRollbackConfirmedIterator{contract: _SR2PC.contract, event: "RollbackConfirmed", logs: logs, sub: sub}, nil
}

// WatchRollbackConfirmed is a free log subscription operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) WatchRollbackConfirmed(opts *bind.WatchOpts, sink chan<- *SR2PCRollbackConfirmed) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRollbackConfirmed)
				if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollbackConfirmed is a log parse operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) ParseRollbackConfirmed(log types.Log) (*SR2PCRollbackConfirmed, error) {
	event := new(SR2PCRollbackConfirmed)
	if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSendCMHashIterator is returned from FilterSendCMHash and is used to iterate over the raw logs and unpacked data for SendCMHash events raised by the SR2PC contract.
type SR2PCSendCMHashIterator struct {
	Event *SR2PCSendCMHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSendCMHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSendCMHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSendCMHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSendCMHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSendCMHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSendCMHash represents a SendCMHash event raised by the SR2PC contract.
type SR2PCSendCMHash struct {
	CmHash [32]byte
	Status uint8
	Cm     CrossMessage
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSendCMHash is a free log retrieval operation binding the contract event 0x7fff4144471887d41c7129df4504c2a47dc58c4e883091e283b4989491dd4ac5.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm)
func (_SR2PC *SR2PCFilterer) FilterSendCMHash(opts *bind.FilterOpts) (*SR2PCSendCMHashIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return &SR2PCSendCMHashIterator{contract: _SR2PC.contract, event: "SendCMHash", logs: logs, sub: sub}, nil
}

// WatchSendCMHash is a free log subscription operation binding the contract event 0x7fff4144471887d41c7129df4504c2a47dc58c4e883091e283b4989491dd4ac5.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm)
func (_SR2PC *SR2PCFilterer) WatchSendCMHash(opts *bind.WatchOpts, sink chan<- *SR2PCSendCMHash) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSendCMHash)
				if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCMHash is a log parse operation binding the contract event 0x7fff4144471887d41c7129df4504c2a47dc58c4e883091e283b4989491dd4ac5.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm)
func (_SR2PC *SR2PCFilterer) ParseSendCMHash(log types.Log) (*SR2PCSendCMHash, error) {
	event := new(SR2PCSendCMHash)
	if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCShadowStoreIterator is returned from FilterShadowStore and is used to iterate over the raw logs and unpacked data for ShadowStore events raised by the SR2PC contract.
type SR2PCShadowStoreIterator struct {
	Event *SR2PCShadowStore // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCShadowStoreIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCShadowStore)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCShadowStore)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCShadowStoreIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCShadowStoreIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCShadowStore represents a ShadowStore event raised by the SR2PC contract.
type SR2PCShadowStore struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterShadowStore is a free log retrieval operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterShadowStore(opts *bind.FilterOpts) (*SR2PCShadowStoreIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return &SR2PCShadowStoreIterator{contract: _SR2PC.contract, event: "ShadowStore", logs: logs, sub: sub}, nil
}

// WatchShadowStore is a free log subscription operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchShadowStore(opts *bind.WatchOpts, sink chan<- *SR2PCShadowStore) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCShadowStore)
				if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShadowStore is a log parse operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseShadowStore(log types.Log) (*SR2PCShadowStore, error) {
	event := new(SR2PCShadowStore)
	if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSyncHeaderIterator is returned from FilterSyncHeader and is used to iterate over the raw logs and unpacked data for SyncHeader events raised by the SR2PC contract.
type SR2PCSyncHeaderIterator struct {
	Event *SR2PCSyncHeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSyncHeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSyncHeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSyncHeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSyncHeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSyncHeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSyncHeader represents a SyncHeader event raised by the SR2PC contract.
type SR2PCSyncHeader struct {
	ChainId *big.Int
	Height  *big.Int
	Root    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSyncHeader is a free log retrieval operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) FilterSyncHeader(opts *bind.FilterOpts) (*SR2PCSyncHeaderIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return &SR2PCSyncHeaderIterator{contract: _SR2PC.contract, event: "SyncHeader", logs: logs, sub: sub}, nil
}

// WatchSyncHeader is a free log subscription operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) WatchSyncHeader(opts *bind.WatchOpts, sink chan<- *SR2PCSyncHeader) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSyncHeader)
				if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncHeader is a log parse operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) ParseSyncHeader(log types.Log) (*SR2PCSyncHeader, error) {
	event := new(SR2PCSyncHeader)
	if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCUnlockShadowLockIterator is returned from FilterUnlockShadowLock and is used to iterate over the raw logs and unpacked data for UnlockShadowLock events raised by the SR2PC contract.
type SR2PCUnlockShadowLockIterator struct {
	Event *SR2PCUnlockShadowLock // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCUnlockShadowLockIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCUnlockShadowLock)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCUnlockShadowLock)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCUnlockShadowLockIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCUnlockShadowLockIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCUnlockShadowLock represents a UnlockShadowLock event raised by the SR2PC contract.
type SR2PCUnlockShadowLock struct {
	LockHash [32]byte
	ChainId  *big.Int
	Height   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUnlockShadowLock is a free log retrieval operation binding the contract event 0x23ae5d541512dbced3ef578dd616af8f33a5821dbc76be5e420f995a9ebeb272.
//
// Solidity: event UnlockShadowLock(bytes32 lockHash, uint256 chainId, uint256 height)
func (_SR2PC *SR2PCFilterer) FilterUnlockShadowLock(opts *bind.FilterOpts) (*SR2PCUnlockShadowLockIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "UnlockShadowLock")
	if err != nil {
		return nil, err
	}
	return &SR2PCUnlockShadowLockIterator{contract: _SR2PC.contract, event: "UnlockShadowLock", logs: logs, sub: sub}, nil
}

// WatchUnlockShadowLock is a free log subscription operation binding the contract event 0x23ae5d541512dbced3ef578dd616af8f33a5821dbc76be5e420f995a9ebeb272.
//
// Solidity: event UnlockShadowLock(bytes32 lockHash, uint256 chainId, uint256 height)
func (_SR2PC *SR2PCFilterer) WatchUnlockShadowLock(opts *bind.WatchOpts, sink chan<- *SR2PCUnlockShadowLock) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "UnlockShadowLock")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCUnlockShadowLock)
				if err := _SR2PC.contract.UnpackLog(event, "UnlockShadowLock", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnlockShadowLock is a log parse operation binding the contract event 0x23ae5d541512dbced3ef578dd616af8f33a5821dbc76be5e420f995a9ebeb272.
//
// Solidity: event UnlockShadowLock(bytes32 lockHash, uint256 chainId, uint256 height)
func (_SR2PC *SR2PCFilterer) ParseUnlockShadowLock(log types.Log) (*SR2PCUnlockShadowLock, error) {
	event := new(SR2PCUnlockShadowLock)
	if err := _SR2PC.contract.UnpackLog(event, "UnlockShadowLock", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCWarningIterator is returned from FilterWarning and is used to iterate over the raw logs and unpacked data for Warning events raised by the SR2PC contract.
type SR2PCWarningIterator struct {
	Event *SR2PCWarning // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCWarningIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCWarning)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCWarning)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCWarningIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCWarningIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCWarning represents a Warning event raised by the SR2PC contract.
type SR2PCWarning struct {
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWarning is a free log retrieval operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterWarning(opts *bind.FilterOpts) (*SR2PCWarningIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return &SR2PCWarningIterator{contract: _SR2PC.contract, event: "Warning", logs: logs, sub: sub}, nil
}

// WatchWarning is a free log subscription operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchWarning(opts *bind.WatchOpts, sink chan<- *SR2PCWarning) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCWarning)
				if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWarning is a log parse operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseWarning(log types.Log) (*SR2PCWarning, error) {
	event := new(SR2PCWarning)
	if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
