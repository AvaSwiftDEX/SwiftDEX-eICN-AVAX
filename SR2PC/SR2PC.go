// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SR2PC

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CrossMessage is an auto generated low-level Go binding around an user-defined struct.
type CrossMessage struct {
	SourceChainId  *big.Int
	TargetChainId  *big.Int
	Phase          uint8
	SourceHeight   *big.Int
	Nonce          *big.Int
	Payload        [][]byte
	CmInputHash    [32]byte
	CmInputHeight  *big.Int
	RespPayload    [32]byte
	ExpectedHeight *big.Int
}

// SR2PCBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type SR2PCBlockHeader struct {
	Height *big.Int
	Root   [32]byte
}

// SR2PCMetaData contains all meta data concerning the SR2PC contract.
var SR2PCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedTrustDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.MetricsCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isConfirmed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byHeader\",\"type\":\"bool\"}],\"name\":\"Metrics\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryPrepareConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryPrepareUnconfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"RetryRollbackConfirmCM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RollbackConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.CMStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SendCMHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"ShadowStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"SyncHeader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"others\",\"type\":\"bytes\"}],\"name\":\"Warning\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"CrossRetry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"calculateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"}],\"name\":\"cmToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"crossReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_appIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_appValueId\",\"type\":\"uint256\"}],\"name\":\"crossSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"getCMByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getHeader\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"}],\"name\":\"getTranStatus\",\"outputs\":[{\"internalType\":\"enumWorkerStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransSuccessNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_transactionHash\",\"type\":\"bytes32\"}],\"name\":\"getUcfStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getUncfmQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_identifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"registerApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"}],\"name\":\"syncHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumCMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expectedHeight\",\"type\":\"uint256\"}],\"internalType\":\"structCrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052600060035560006007553480156200001b57600080fd5b5060405162005e3d38038062005e3d8339810160408190526200003e9162000052565b600291909155600060035560045562000076565b6000806040838503121562000065578182fd5b505080516020909101519092909150565b615db780620000866000396000f3fe6080604052600436106100f75760003560e01c80638660c3761161008a578063ca8bad9111610059578063ca8bad9114610348578063cc38a48214610368578063d3b4fbbb1461039a578063f678f80d146103ba57610136565b80638660c3761461028e578063a2ed3122146102ae578063ab1e2689146102e6578063ac676d321461031357610136565b806344b9bd89116100c657806344b9bd89146101e05780634a6bc702146102005780636c55d0d4146102405780636e53670a1461025357610136565b80630c8b9b121461013b578063111343841461016e57806311ba08d71461018e578063366c7d43146101b057610136565b3661013657604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561014757600080fd5b5061015b6101563660046150d5565b6103da565b6040519081526020015b60405180910390f35b34801561017a57600080fd5b5061015b610189366004614f68565b61043e565b34801561019a57600080fd5b506101ae6101a936600461502c565b61045e565b005b3480156101bc57600080fd5b506101d06101cb36600461506e565b610ae0565b6040519015158152602001610165565b3480156101ec57600080fd5b5061015b6101fb3660046151fb565b610aea565b34801561020c57600080fd5b5061023361021b366004614f68565b6000908152600b602052604090206001015460ff1690565b6040516101659190615535565b6101ae61024e366004614deb565b610af5565b34801561025f57600080fd5b5061027361026e366004615251565b610eff565b60408051825181526020928301519281019290925201610165565b34801561029a57600080fd5b506101ae6102a93660046151fb565b610f40565b3480156102ba57600080fd5b5061015b6102c9366004615251565b6000918252600a6020908152604080842092845291905290205490565b3480156102f257600080fd5b50610306610301366004614f68565b61102f565b60405161016591906155d9565b34801561031f57600080fd5b5061033361032e366004615251565b6111d0565b60408051928352602083019190915201610165565b34801561035457600080fd5b506101ae610363366004614fd2565b611293565b34801561037457600080fd5b50610388610383366004614f68565b611315565b60405160ff9091168152602001610165565b3480156103a657600080fd5b506101ae6103b5366004615272565b611365565b3480156103c657600080fd5b5061015b6103d5366004614f68565b611532565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c0151975160009b6104209b909a999101615ae5565b6040516020818303038152906040528051906020012090505b919050565b600060025482604051602001610420929190918252602082015260400190565b6040517f526574727950726570617265556e636f6e6669726d434d000000000000000000602082015260370160405160208183030381529060405280519060200120826040516020016104b191906153c1565b604051602081830303815290604052805190602001201415610689576000818152600d60205260408082208151610180810183528154928101928352600182015460608201526002820154909283918390608084019060ff16600481111561052957634e487b7160e01b600052602160045260246000fd5b600481111561054857634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156106315783829060005260206000200180546105a490615c6c565b80601f01602080910402602001604051908101604052809291908181526020018280546105d090615c6c565b801561061d5780601f106105f25761010080835404028352916020019161061d565b820191906000526020600020905b81548152906001019060200180831161060057829003601f168201915b505050505081526020019060010190610585565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250508152602001600a82015481525050905061068381600001518260200151611582565b50610adc565b60405174526574727950726570617265436f6e6669726d434d60581b602082015260350160405160208183030381529060405280519060200120826040516020016106d491906153c1565b604051602081830303815290604052805190602001201415610889576000818152600e60209081526040808320815161014081018352815481526001820154938101939093526002810154909183019060ff16600481111561074657634e487b7160e01b600052602160045260246000fd5b600481111561076557634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b8282101561084e5783829060005260206000200180546107c190615c6c565b80601f01602080910402602001604051908101604052809291908181526020018280546107ed90615c6c565b801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b5050505050815260200190600101906107a2565b505050508152602001600682015481526020016007820154815260200160088201548152602001600982015481525050905061068381611c5e565b604051755265747279526f6c6c6261636b436f6e6669726d434d60501b602082015260360160405160208183030381529060405280519060200120826040516020016108d591906153c1565b604051602081830303815290604052805190602001201415610a8c576000818152600f60209081526040808320815161014081018352815481526001820154938101939093526002810154909183019060ff16600481111561094757634e487b7160e01b600052602160045260246000fd5b600481111561096657634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610a4f5783829060005260206000200180546109c290615c6c565b80601f01602080910402602001604051908101604052809291908181526020018280546109ee90615c6c565b8015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b5050505050815260200190600101906109a3565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050610683816000612333565b610a94614884565b600080516020615d228339815191528183604051602001610ab791815260200190565b60408051601f1981840301815290829052610ad29291615763565b60405180910390a1505b5050565b60015b9392505050565b6000610ae3826128a5565b600160076000828254610b089190615c11565b909155505060025460075460408051602081019390935282015260009060600160408051601f198184030181529181528151602092830120875160008281526008909452918320600180820193909355805460ff191690921790915591505b8551811015610ef7576000868281518110610b9257634e487b7160e01b600052603260045260246000fd5b60200260200101519050610ba4614884565b6002548152602081018290524360608201526003805460019190600090610bcc908490615c11565b909155505060035460808201526000604082018190525060408051600480825260a0820190925290816020015b6060815260200190600190039081610bf95790505060a08201526040805160208101899052016040516020818303038152906040528160a00151600081518110610c5357634e487b7160e01b600052603260045260246000fd5b602002602001018190525083604051602001610c7191815260200190565b6040516020818303038152906040528160a00151600181518110610ca557634e487b7160e01b600052603260045260246000fd5b602002602001018190525084604051602001610cc391815260200190565b6040516020818303038152906040528160a00151600281518110610cf757634e487b7160e01b600052603260045260246000fd5b602002602001018190525085604051602001610d139190615522565b6040516020818303038152906040528160a00151600381518110610d4757634e487b7160e01b600052603260045260246000fd5b602002602001018190525060045443610d609190615c11565b6101208201526000610d71826103da565b90508160056000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690836004811115610dd357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051610e079160058401916020909101906148f5565b5060c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050508060066000600354815260200190815260200160002081905550600080516020615d62833981519152816000604051610e6f9291906154bc565b60405180910390a1600080516020615d428339815191528582600254436000806000604051610ea49796959493929190615478565b60405180910390a160008581526008602090815260408083208784526003810183528184208590559383526004909301905220805460ff1916600117905550819050610eef81615ca7565b915050610b67565b505050505050565b604080518082018252600080825260209182018190529384526010815281842092845291825291829020825180840190935280548352600101549082015290565b600254826020015114610f995760405162461bcd60e51b815260206004820152601960248201527f77726f6e6720746172676574436861696e496420696e20636d00000000000000604482015260640160405180910390fd5b6000610fae8360000151846101200151610eff565b61012084015181519192501415611010576000610fcc828585610ae0565b90508061100157600080516020615d228339815191528484604051610ff2929190615a38565b60405180910390a15050610adc565b61100a846128c1565b5061102a565b600061101c8484610aea565b90506110288482612a01565b505b505050565b611037614884565b600082815260056020908152604091829020825161014081018452815481526001820154928101929092526002810154919290919083019060ff16600481111561109157634e487b7160e01b600052602160045260246000fd5b60048111156110b057634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b8282101561119957838290600052602060002001805461110c90615c6c565b80601f016020809104026020016040519081016040528092919081815260200182805461113890615c6c565b80156111855780601f1061115a57610100808354040283529160200191611185565b820191906000526020600020905b81548152906001019060200180831161116857829003601f168201915b5050505050815260200190600101906110ed565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b600082815260096020908152604080832084845290915281206002015481908190815b81811015611288576000878152600960209081526040808320898452909152812060020180548390811061123757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548a83526009825260408084208b855283528084208285526001019092529120549091506112729085615c11565b935050808061128090615ca7565b9150506111f3565b509590945092505050565b806000836040516112a491906153c1565b9081526040516020918190038201902080546001600160a01b0319166001600160a01b039390931692909217909155600180548082018255600091909152835161102a927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920191850190614952565b60008060025483604051602001611336929190918252602082015260400190565b60408051808303601f1901815291815281516020928301206000908152600890925290205460ff169392505050565b6000611375838360000151610eff565b8051835191925014156113db5781516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7916113c191869190602001918252602082015260400190565b60408051601f1981840301815290829052610ad291615548565b600083815260106020526040902060010154158015906113fb5750815115155b1561147b576000611417846001856000015161026e9190615c29565b80519091506114795782516040517f10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c79161145f91879190602001918252602082015260400190565b60408051601f1981840301815290829052610ff291615587565b505b600083815260106020818152604080842086518552808352908420865181558287015160019182015593879052919052015482518110156114cb5782516000858152601060205260409020600101555b6114de8484600001518560200151612a46565b825160208401516040517f22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b9192611524928883526020830191909152604082015260600190565b60405180910390a150505050565b60008060025483604051602001611553929190918252602082015260400190565b60408051808303601f190181529181528151602092830120600090815260089092529020600201549392505050565b60008260a001516001815181106115a957634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906115c49190614f80565b905060006115d1846103da565b845161012086015160405163302c1e4360e21b8152600a600482015260248101929092526044820152606481018290526084810184905260a48101859052909150600090819073ff3cdd50ad238282548abb7d4ba9472caad48c9e9063c0b0790c9060c40160006040518083038186803b15801561164e57600080fd5b505af4158015611662573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261168a9190810190614f27565b91509150816116c357600080516020615d2283398151915286826040516116b292919061560e565b60405180910390a150505050610adc565b60008660a001516003815181106116ea57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906117059190614f98565b905060006001600160a01b031660008260405161172291906153c1565b908152604051908190036020019020546001600160a01b0316141561178f57600080516020615d2283398151915287826040516020016117629190615522565b60408051601f198184030181529082905261177d9291615970565b60405180910390a15050505050610adc565b600080826040516117a091906153c1565b9081526040519081900360200181205463febc046f60e01b82526001600160a01b0316915060009081908190849063febc046f906117e4908e908e906004016155ec565b600060405180830381600087803b1580156117fe57600080fd5b505af1158015611812573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261183a9190810190615107565b9250925092508015611970576000888152600d6020526040902054611962576040805180820182528c815260208082018d905260008b8152600d8252839020825180518255918201516001808301919091559382015160028201805494959294859360ff19909116908360048111156118c357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516118f79160058401916020909101906148f5565b5060c0820151600682015560e08201516007820155610100820151600882015561012090910151600990910155602091820151600a909101556040518981527f2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43910160405180910390a15b505050505050505050610adc565b6000888152600d602052604081208181556001810182905560028101805460ff1916905560038101829055600481018290559081816119b260058301826149d2565b5060006006820181905560078201819055600882018190556009909101819055600a929092018290555060025484528b51602085015260038054600192906119fb908490615c11565b90915550506003546080840152611a118b6103da565b60c08401526060808c015160e085015243908401819052600454611a3491615c11565b6101208401528115611a4c5760016040840152611a54565b600260408401525b6000611a5f846103da565b60035460009081526006602090815260408083208490558383526005825291829020875181559087015160018083019190915591870151600282018054949550889492939192909160ff1990911690836004811115611ace57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611b029160058401916020909101906148f5565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020615d62833981519152816001604051611b509291906154bc565b60405180910390a1600080516020615d428339815191528a82600254436001600080604051611b859796959493929190615478565b60405180910390a1604080516060810182526101208e01518152602081018d90529081018a90528315611c01578c516000908152600a602090815260408083208e845282528083208054600181810183559185529383902085516003909502019384559184015191830191909155820151600290910155611c4f565b8c516000908152600a602090815260408083208e8452600190810183528184208054808301825590855293839020855160039095020193845591840151918301919091558201516002909101555b50505050505050505050505050565b60008160a00151600181518110611c8557634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611ca09190614f80565b905060008073ff3cdd50ad238282548abb7d4ba9472caad48c9e631747fef4600a8660000151876101200151611cd5896103da565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084810186905260a40160006040518083038186803b158015611d2557600080fd5b505af4158015611d39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d619190810190614f27565b9150915081611d9957600080516020615d228339815191528482604051611d8992919061560e565b60405180910390a1505050612330565b6000611da4856103da565b905060008560a00151600381518110611dcd57634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190611de89190614f98565b905060006001600160a01b0316600082604051611e0591906153c1565b908152604051908190036020019020546001600160a01b03161415611e7257600080516020615d228339815191528682604051602001611e459190615522565b60408051601f1981840301815290829052611e60929161564b565b60405180910390a15050505050612330565b60008060008084604051611e8691906153c1565b90815260405190819003602001812054630296961d60e61b82526001600160a01b03169063a5a5874090611ebe908c906004016155d9565b600060405180830381600087803b158015611ed857600080fd5b505af1158015611eec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f149190810190615107565b925092509250801561202b576000858152600e602052604090205461201e576000858152600e60209081526040918290208b518155908b0151600180830191909155918b01516002820180548d9460ff1990911690836004811115611f8957634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051611fbd9160058401916020909101906148f5565b5060c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101556040518581527f345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e9060200160405180910390a15b5050505050505050612330565b6000858152600e602052604081208181556001810182905560028101805460ff1916905560038101829055600481018290559061206b60058301826149d2565b50600060068201819055600782018190556008820181905560099091015560025483528851602084015281156120a757600160408401526120af565b600260408401525b6001600360008282546120c29190615c11565b909155505060035460808401526120d8896103da565b60c08401526060808a015160e0850152439084018190526004546120fb91615c11565b610120840152600061210c846103da565b60035460009081526006602090815260408083208490558383526005825291829020875181559087015160018083019190915591870151600282018054949550889492939192909160ff199091169083600481111561217b57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516121af9160058401916020909101906148f5565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020615d628339815191528160016040516121fd9291906154bc565b60405180910390a160028054604051600080516020615d4283398151915292612231928d9286924391600190600090615478565b60405180910390a160405180606001604052808b610120015181526020018461225b57600261225e565b60015b600481111561227d57634e487b7160e01b600052602160045260246000fd5b8152602090810183905260008b8152600b825260409020825181559082015160018281018054909160ff19909116908360048111156122cc57634e487b7160e01b600052602160045260246000fd5b02179055506040918201516002909101558a516000908152600a60209081528282208c835290529081206122ff916149f0565b89516000908152600a602090815260408083208c84526001019091528120612326916149f0565b5050505050505050505b50565b600061233e836103da565b905060008360a0015160018151811061236757634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906123829190614f80565b84516000908152600a6020908152604080832084845260030190915281209192506123ad91906149f0565b83516101208501516040516380d0324760e01b8152600a60048201526024810192909252604482015260648101839052608481018290526000908190819073ff3cdd50ad238282548abb7d4ba9472caad48c9e906380d032479060a40160006040518083038186803b15801561242257600080fd5b505af4158015612436573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261245e9190810190614ecc565b9250925092508261248857600080516020615d22833981519152878260405161177d92919061560e565b81156127695760008760a001516003815181106124b557634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906124d09190614f98565b905060006001600160a01b03166000826040516124ed91906153c1565b908152604051908190036020019020546001600160a01b0316141561255b57600080516020615d22833981519152888260405160200161252d9190615522565b60408051601f198184030181529082905261254892916159db565b60405180910390a1505050505050610adc565b6000808260405161256c91906153c1565b90815260405190819003602001812054632ca93d7560e21b82526001600160a01b03169063b2a4f5d4906125a4908c906004016155d9565b602060405180830381600087803b1580156125be57600080fd5b505af11580156125d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f69190614eb2565b90508015612708576000878152600f60205260409020546126fc576000878152600f60209081526040918290208b518155908b0151600180830191909155918b01516002820180548d9460ff199091169083600481111561266757634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a0820151805161269b9160058401916020909101906148f5565b5060c0820151600682015560e082015160078201556101008201516008820155610120909101516009909101556040518781527f4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d126459060200160405180910390a15b50505050505050610adc565b6000878152600f602052604081208181556001810182905560028101805460ff1916905560038101829055600481018290559061274860058301826149d2565b50600060068201819055600782018190556008820181905560099091015550505b60008760a0015160008151811061279057634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906127ab9190614f80565b90507f43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f56127d7896103da565b60408051918252602082018490520160405180910390a1600080516020615d428339815191528560025443600c60018c604051612819969594939291906154e0565b60405180910390a160408051606081019091526101208901518152602081016004815260209081018890526000878152600b825260409020825181559082015160018281018054909160ff199091169083600481111561288957634e487b7160e01b600052602160045260246000fd5b0217905550604082015181600201559050505050505050505050565b60008151600014156128b957506000610439565b506020015190565b6000816040015160048111156128e757634e487b7160e01b600052602160045260246000fd5b14156128fb576128f681611c5e565b612330565b60018160400151600481111561292157634e487b7160e01b600052602160045260246000fd5b1415612932576128f6816000613174565b60028160400151600481111561295857634e487b7160e01b600052602160045260246000fd5b1415612969576128f6816000613879565b60038160400151600481111561298f57634e487b7160e01b600052602160045260246000fd5b14156129a0576128f6816000613f62565b6004816040015160048111156129c657634e487b7160e01b600052602160045260246000fd5b14156129d7576128f6816000612333565b600080516020615d22833981519152816040516129f491906156b1565b60405180910390a1612330565b600082604001516004811115612a2757634e487b7160e01b600052602160045260246000fd5b1415612a3c57612a378282611582565b610adc565b610adc828261429d565b60005b600154811015612de45760008060018381548110612a7757634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051612a8e91906153dd565b90815260405190819003602001812054637c656c9960e11b82526004820187905260248201869052604482018590526001600160a01b031691506000908190839063f8cad93290606401600060405180830381600087803b158015612af257600080fd5b505af1158015612b06573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b2e9190810190614d8b565b9150915060005b8251811015612c525786600a6001016000858481518110612b6657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600001819055506001600a6001016000858481518110612bac57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060010160006101000a81548160ff02191690836004811115612bf457634e487b7160e01b600052602160045260246000fd5b02179055506000600a6001016000858481518110612c2257634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600201819055508080612c4a90615ca7565b915050612b35565b5060005b8151811015612d735786600a6001016000848481518110612c8757634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600001819055506002600a6001016000848481518110612ccd57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060010160006101000a81548160ff02191690836004811115612d1557634e487b7160e01b600052602160045260246000fd5b02179055506000600a6001016000848481518110612d4357634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600201819055508080612d6b90615ca7565b915050612c56565b50815181516040805160208101939093528201527f31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec4709060600160408051601f1981840301815290829052612dc691615522565b60405180910390a15050508080612ddc90615ca7565b915050612a49565b5060008381526009602090815260408083208584529091528120905b600083815260018301602052604090205481101561314c5760008381526001830160205260408120805483908110612e4857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600a02016040518061014001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166004811115612ea857634e487b7160e01b600052602160045260246000fd5b6004811115612ec757634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015612fb0578382906000526020600020018054612f2390615c6c565b80601f0160208091040260200160405190810160405280929190818152602001828054612f4f90615c6c565b8015612f9c5780601f10612f7157610100808354040283529160200191612f9c565b820191906000526020600020905b815481529060010190602001808311612f7f57829003601f168201915b505050505081526020019060010190612f04565b50505090825250600682015460208201526007820154604082015260088201546060820152600990910154608090910152905060018160400151600481111561300957634e487b7160e01b600052602160045260246000fd5b141561301f5761301a816001613174565b613138565b60028160400151600481111561304557634e487b7160e01b600052602160045260246000fd5b14156130565761301a816001613879565b60048160400151600481111561307c57634e487b7160e01b600052602160045260246000fd5b141561308d5761301a816001612333565b6003816040015160048111156130b357634e487b7160e01b600052602160045260246000fd5b14156130c45761301a816001613f62565b6000816040015160048111156130ea57634e487b7160e01b600052602160045260246000fd5b141561311b57600080516020615d228339815191528160405161310d919061587d565b60405180910390a15061313a565b600080516020615d228339815191528160405161310d91906156b1565b505b8061314481615ca7565b915050612e00565b506000848152600960209081526040808320868452909152812090610ef76002830182614a11565b60008260a0015160018151811061319b57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906131b69190614f80565b60008181526008602052604090205490915060ff166131ec57600080516020615d2283398151915283604051610ad29190615704565b600081815260086020908152604080832060c0870151845260040190915290205460ff1661323157600080516020615d2283398151915283604051610ad2919061580b565b600081815260086020526040902054600160ff909116111561326a57600080516020615d2283398151915283604051610ad291906158f9565b600081815260086020908152604080832060c0870151845260040190915290205460ff16600214156132b357600080516020615d2283398151915283604051610ad291906157b3565b600081815260086020818152604080842060c08801518552600481018352908420805460ff1916600290811790915585855292909152018054600192906132fb908490615c11565b9091555050600254604051600080516020615d428339815191529161332c91849190439060049060019089906154e0565b60405180910390a160008181526008602052604090206001810154600290910154141561102a576000818152600860205260408120805460ff191660021790555b600082815260086020526040902060010154811015611028576000828152600860209081526040808320848452600301825280832054808452600583528184208251610140810184528154815260018201549481019490945260028101549194939290919083019060ff1660048111156133f757634e487b7160e01b600052602160045260246000fd5b600481111561341657634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156134ff57838290600052602060002001805461347290615c6c565b80601f016020809104026020016040519081016040528092919081815260200182805461349e90615c6c565b80156134eb5780601f106134c0576101008083540402835291602001916134eb565b820191906000526020600020905b8154815290600101906020018083116134ce57829003601f168201915b505050505081526020019060010190613453565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050613539614884565b60025481526020828101519082015260036040820181815250506001600360008282546135669190615c11565b9091555050600354608082015260408051600480825260a0820190925290816020015b6060815260200190600190039081613589579050508160a001819052508160a001516000815181106135cb57634e487b7160e01b600052603260045260246000fd5b60200260200101518160a001516000815181106135f857634e487b7160e01b600052603260045260246000fd5b60200260200101819052508460405160200161361691815260200190565b6040516020818303038152906040528160a0015160018151811061364a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508160a0015160028151811061367a57634e487b7160e01b600052603260045260246000fd5b60200260200101518160a001516002815181106136a757634e487b7160e01b600052603260045260246000fd5b60200260200101819052508160a001516003815181106136d757634e487b7160e01b600052603260045260246000fd5b60200260200101518160a0015160038151811061370457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152436060820181905260045461372391615c11565b6101208201526000613734826103da565b60035460009081526006602090815260408083208490558383526005825291829020855181559085015160018083019190915591850151600282018054949550869492939192909160ff19909116908360048111156137a357634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516137d79160058401916020909101906148f5565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020615d628339815191528160026040516138259291906154bc565b60405180910390a1600080516020615d42833981519152868260025443600660018d60405161385a9796959493929190615478565b60405180910390a150505050808061387190615ca7565b91505061336d565b60008260a001516001815181106138a057634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906138bb9190614f80565b60008181526008602052604090205490915060ff166138f157600080516020615d2283398151915283604051610ad29190615704565b600081815260086020908152604080832060c0870151845260040190915290205460ff1661393657600080516020615d2283398151915283604051610ad2919061580b565b600081815260086020526040902054600160ff909116111561396f57600080516020615d2283398151915283604051610ad291906158f9565b600081815260086020908152604080832060c08701518452600401909152902054600160ff90911611156139ba57600080516020615d2283398151915283604051610ad291906157b3565b60008181526008602090815260408083208054600360ff199182168117835560c0890151865260049283019094529382902080549094169092179092556002549151600080516020615d4283398151915292613a1f92859243919060019089906154e0565b60405180910390a160005b60008281526008602052604090206001015481101561102857600082815260086020908152604080832084845260030190915290205460c0850151811415613a725750613f50565b600083815260086020908152604080832084845260049081018352818420805460ff19168217905560058352818420825161014081018452815481526001820154948101949094526002810154909284019160ff90911690811115613ae757634e487b7160e01b600052602160045260246000fd5b6004811115613b0657634e487b7160e01b600052602160045260246000fd5b8152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015613bef578382906000526020600020018054613b6290615c6c565b80601f0160208091040260200160405190810160405280929190818152602001828054613b8e90615c6c565b8015613bdb5780601f10613bb057610100808354040283529160200191613bdb565b820191906000526020600020905b815481529060010190602001808311613bbe57829003601f168201915b505050505081526020019060010190613b43565b5050505081526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050613c29614884565b60025481526020828101518183015260046040808401829052805182815260a081019091529182015b6060815260200190600190039081613c52579050508160a001819052508160a00151600081518110613c9457634e487b7160e01b600052603260045260246000fd5b60200260200101518160a00151600081518110613cc157634e487b7160e01b600052603260045260246000fd5b602002602001018190525084604051602001613cdf91815260200190565b6040516020818303038152906040528160a00151600181518110613d1357634e487b7160e01b600052603260045260246000fd5b60200260200101819052508160a00151600281518110613d4357634e487b7160e01b600052603260045260246000fd5b60200260200101518160a00151600281518110613d7057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508160a00151600381518110613da057634e487b7160e01b600052603260045260246000fd5b60200260200101518160a00151600381518110613dcd57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250600160036000828254613deb9190615c11565b909155505060035460808201524360608201819052600454613e0c91615c11565b6101208201526000613e1d826103da565b60035460009081526006602090815260408083208490558383526005825291829020855181559085015160018083019190915591850151600282018054949550869492939192909160ff1990911690836004811115613e8c57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a08201518051613ec09160058401916020909101906148f5565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090155905050600080516020615d62833981519152816002604051613f0e9291906154bc565b60405180910390a1600080516020615d42833981519152868260025443600860018d604051613f439796959493929190615478565b60405180910390a1505050505b80613f5a81615ca7565b915050613a2a565b60008260a00151600181518110613f8957634e487b7160e01b600052603260045260246000fd5b6020026020010151806020019051810190613fa49190614f80565b90506000613fb1846103da565b84516000908152600a602090815260408083208684526002019091528120919250613fdc91906149f0565b8351610120850151604051637997da9b60e01b8152600a6004820152602481019290925260448201526064810182905260848101839052600090819073ff3cdd50ad238282548abb7d4ba9472caad48c9e90637997da9b9060a40160006040518083038186803b15801561404f57600080fd5b505af4158015614063573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261408b9190810190614f27565b91509150816140b357600080516020615d2283398151915286826040516116b292919061560e565b60008660a001516003815181106140da57634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906140f59190614f98565b905060006001600160a01b031660008260405161411291906153c1565b908152604051908190036020019020546001600160a01b0316141561416d57600080516020615d2283398151915287826040516020016141529190615522565b60408051601f198184030181529082905261177d9291615a88565b60008160405161417d91906153c1565b908152604051908190036020018120546364f3931d60e11b82526001600160a01b03169063c9e7263a906141b5908a906004016155d9565b600060405180830381600087803b1580156141cf57600080fd5b505af11580156141e3573d6000803e3d6000fd5b50505050600080516020615d428339815191528560025443600a60018b604051614212969594939291906154e0565b60405180910390a160408051606081019091526101208801518152602081016003815260209081018690526000878152600b825260409020825181559082015160018281018054909160ff199091169083600481111561428257634e487b7160e01b600052602160045260246000fd5b02179055506040820151816002015590505050505050505050565b6000806142aa84846144e5565b91509150816142d257600080516020615d228339815191528482604051610ff292919061560e565b60006142dd856103da565b855160009081526009602090815260408083206101208a01518452825280832088845282528083208484529091529020549091501561431e57505050610adc565b84516000908152600960209081526040808320610120890151845282528083208784526001908101835281842080548083018255908552938390208951600a90950201938455918801518383015587015160028301805489949360ff199091169083600481111561439f57634e487b7160e01b600052602160045260246000fd5b0217905550606082015160038201556080820151600482015560a082015180516143d39160058401916020909101906148f5565b5060c0820151600682015560e082015160078201556101008201516008820155610120918201516009918201558651600090815260208281526040808320948a0180518452948252808320600201805460018082018355918552838520018a90558a5184528483528184208651855283528184208a855281018352818420548b5185529483528184208651855283528184208a8552835281842087855283528184209490945589518352600c825280832094518352938152838220888352815290839020805460ff191690921790915590518281527fce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab910160405180910390a16144de858583614722565b5050505050565b6000606060008460a0015160018151811061451057634e487b7160e01b600052603260045260246000fd5b602002602001015180602001905181019061452b9190614f80565b90506000614538866103da565b604080516020810190915260008152600195509350905060038660400151600481111561457557634e487b7160e01b600052602160045260246000fd5b141561463657855161012087015160405163d029eff560e01b8152600a600482015260248101929092526044820152606481018290526084810183905260a4810186905273ff3cdd50ad238282548abb7d4ba9472caad48c9e9063d029eff59060c40160006040518083038186803b1580156145f057600080fd5b505af4158015614604573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261462c9190810190614f27565b9094509250614719565b60048660400151600481111561465c57634e487b7160e01b600052602160045260246000fd5b1415614719578551610120870151604051630535c60760e51b8152600a600482015260248101929092526044820152606481018290526084810183905260a4810186905273ff3cdd50ad238282548abb7d4ba9472caad48c9e9063a6b8c0e09060c40160006040518083038186803b1580156146d757600080fd5b505af41580156146eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147139190810190614f27565b90945092505b50509250929050565b60008360a0015160018151811061474957634e487b7160e01b600052603260045260246000fd5b60200260200101518060200190518101906147649190614f80565b604080516060810182526101208701518152602081018690529081018490529091506003856040015160048111156147ac57634e487b7160e01b600052602160045260246000fd5b14156148035784516000908152600a602090815260408083208584526002908101835281842080546001818101835591865294849020865160039096020194855592850151928401929092558301519101556144de565b60048560400151600481111561482957634e487b7160e01b600052602160045260246000fd5b14156144de5784516000908152600a60209081526040808320858452600390810183528184208054600181810183559186529484902086519590920290910193845591840151918301919091558201516002909101556144de565b6040518061014001604052806000815260200160008152602001600060048111156148bf57634e487b7160e01b600052602160045260246000fd5b8152600060208201819052604082018190526060808301526080820181905260a0820181905260c0820181905260e09091015290565b828054828255906000526020600020908101928215614942579160200282015b828111156149425782518051614932918491602090910190614952565b5091602001919060010190614915565b5061494e929150614a2f565b5090565b82805461495e90615c6c565b90600052602060002090601f01602090048101928261498057600085556149c6565b82601f1061499957805160ff19168380011785556149c6565b828001600101855582156149c6579182015b828111156149c65782518255916020019190600101906149ab565b5061494e929150614a4c565b50805460008255906000526020600020908101906123309190614a2f565b50805460008255600302906000526020600020908101906123309190614a61565b50805460008255906000526020600020908101906123309190614a4c565b8082111561494e576000614a438282614a83565b50600101614a2f565b5b8082111561494e5760008155600101614a4d565b5b8082111561494e576000808255600182018190556002820155600301614a62565b508054614a8f90615c6c565b6000825580601f10614aa15750612330565b601f0160209004906000526020600020908101906123309190614a4c565b6000614ad2614acd84615bea565b615b97565b9050828152838383011115614ae657600080fd5b610ae3836020830184615c40565b600082601f830112614b04578081fd5b81516020614b14614acd83615bc7565b8281528181019085830183850287018401881015614b30578586fd5b855b85811015614b4e57815184529284019290840190600101614b32565b5090979650505050505050565b600082601f830112614b6b578081fd5b81356020614b7b614acd83615bc7565b82815281810190858301855b85811015614b4e57614b9e898684358b0101614c2a565b84529284019290840190600101614b87565b600082601f830112614bc0578081fd5b81516020614bd0614acd83615bc7565b82815281810190858301855b85811015614b4e578151880189603f820112614bf6578788fd5b614c078a8783015160408401614abf565b8552509284019290840190600101614bdc565b8051801515811461043957600080fd5b600082601f830112614c3a578081fd5b8135614c48614acd82615bea565b818152846020838601011115614c5c578283fd5b816020850160208301379081016020019190915292915050565b803561043981615d14565b805161043981615d14565b600082601f830112614c9c578081fd5b610ae383835160208501614abf565b600060408284031215614cbc578081fd5b614cc66040615b97565b9050813581526020820135602082015292915050565b6000610140808385031215614cef578182fd5b614cf881615b97565b9150508135815260208201356020820152614d1560408301614c76565b6040820152606082013560608201526080820135608082015260a08201356001600160401b03811115614d4757600080fd5b614d5384828501614b5b565b60a08301525060c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b60008060408385031215614d9d578182fd5b82516001600160401b0380821115614db3578384fd5b614dbf86838701614af4565b93506020850151915080821115614dd4578283fd5b50614de185828601614af4565b9150509250929050565b60008060008060808587031215614e00578182fd5b84356001600160401b0380821115614e16578384fd5b818701915087601f830112614e29578384fd5b81356020614e39614acd83615bc7565b82815281810190858301838502870184018d1015614e55578889fd5b8896505b84871015614e77578035835260019690960195918301918301614e59565b509850508801359550506040870135915080821115614e94578384fd5b50614ea187828801614c2a565b949793965093946060013593505050565b600060208284031215614ec3578081fd5b610ae382614c1a565b600080600060608486031215614ee0578081fd5b614ee984614c1a565b9250614ef760208501614c1a565b915060408401516001600160401b03811115614f11578182fd5b614f1d86828701614c8c565b9150509250925092565b60008060408385031215614f39578182fd5b614f4283614c1a565b915060208301516001600160401b03811115614f5c578182fd5b614de185828601614c8c565b600060208284031215614f79578081fd5b5035919050565b600060208284031215614f91578081fd5b5051919050565b600060208284031215614fa9578081fd5b81516001600160401b03811115614fbe578182fd5b614fca84828501614c8c565b949350505050565b60008060408385031215614fe4578182fd5b82356001600160401b03811115614ff9578283fd5b61500585828601614c2a565b92505060208301356001600160a01b0381168114615021578182fd5b809150509250929050565b6000806040838503121561503e578182fd5b82356001600160401b03811115615053578283fd5b61505f85828601614c2a565b95602094909401359450505050565b600080600060808486031215615082578081fd5b61508c8585614cab565b925060408401356001600160401b03808211156150a7578283fd5b6150b387838801614cdc565b935060608601359150808211156150c8578283fd5b50614f1d86828701614c2a565b6000602082840312156150e6578081fd5b81356001600160401b038111156150fb578182fd5b614fca84828501614cdc565b60008060006060848603121561511b578081fd5b83516001600160401b0380821115615131578283fd5b8186019150610140808389031215615147578384fd5b61515081615b97565b9050825181526020830151602082015261516c60408401614c81565b6040820152606083015160608201526080830151608082015260a083015182811115615196578485fd5b6151a289828601614bb0565b60a08301525060c0838101519082015260e08084015190820152610100808401519082015261012092830151928101929092525092506151e460208501614c1a565b91506151f260408501614c1a565b90509250925092565b6000806040838503121561520d578182fd5b82356001600160401b0380821115615223578384fd5b61522f86838701614cdc565b93506020850135915080821115615244578283fd5b50614de185828601614c2a565b60008060408385031215615263578182fd5b50508035926020909101359150565b60008060608385031215615284578182fd5b823591506152958460208501614cab565b90509250929050565b6000815180845260208085018081965082840281019150828601855b858110156152e45782840389526152d28483516152f1565b988501989350908401906001016152ba565b5091979650505050505050565b60008151808452615309816020860160208601615c40565b601f01601f19169290920160200192915050565b61532681615d04565b9052565b600d811061532657615326615cd8565b60006101408251845260208301516020850152604083015161535f604086018261531d565b50606083015160608501526080830151608085015260a08301518160a086015261538b8286018261529e565b60c0858101519087015260e080860151908701526101008086015190870152610120948501519490950193909352509192915050565b600082516153d3818460208701615c40565b9190910192915050565b81546000908190600281046001808316806153f957607f831692505b602080841082141561541957634e487b7160e01b87526022600452602487fd5b81801561542d576001811461543e5761546a565b60ff1986168952848901965061546a565b60008a815260209020885b868110156154625781548b820152908501908301615449565b505084890196505b509498975050505050505050565b600060e0820190508882528760208301528660408301528560608301526154a2608083018661532a565b92151560a082015290151560c09091015295945050505050565b82815260408101600483106154d3576154d3615cd8565b8260208301529392505050565b86815260006020820152604081018690526060810185905260e08101615509608083018661532a565b92151560a082015290151560c090910152949350505050565b600060208252610ae360208301846152f1565b6020810161554283615d04565b91905290565b60006040825260156040830152741d1a19481a195859195c881a5cc8195e1a5cdd1959605a1b606083015260806020830152610ae360808301846152f1565b600060408252602260408301527f7468652070726576696f757320686561646572206973206e6f74206578697374606083015261195960f21b608083015260a06020830152610ae360a08301846152f1565b600060208252610ae3602083018461533a565b6000604082526155ff604083018561533a565b90508260208301529392505050565b600060608252615621606083018561533a565b828103602084015261563381856152f1565b83810360409094019390935250815260200192915050565b60006060825261565e606083018561533a565b828103806020850152601a82527f617070206e6f7420666f756e64207768656e20507265706172650000000000006020830152604081016040850152506156a860408201856152f1565b95945050505050565b6000606082526156c4606083018461533a565b8281036020808501829052601183527077726f6e6720706861736520696e20636d60781b9083015260409081019381019390935291820152606001919050565b600060608252615717606083018461533a565b8281036020808501829052601a83527f746865207472616e73616374696f6e20697320696e76616c69640000000000009083015260409081019381019390935291820152606001919050565b600060608252615776606083018561533a565b828103806020850152601082526f3bb937b7339034b232b73a34b334b2b960811b6020830152604081016040850152506156a860408201856152f1565b6000606082526157c6606083018461533a565b828103602080850182905260168352751d1a194818db481a185cc81899595b881919585b195960521b9083015260409081019381019390935291820152606001919050565b60006060825261581e606083018461533a565b828103806020850152602682527f74686520636d206973206e6f7420696e20746865207472616e73616374696f6e60208301526502067726f75760d41b6040830152606081016040850152508160608201526080810191505092915050565b600060608252615890606083018461533a565b828103806020850152603082527f50524550415245206d657373616765206d757374206e6f7420626520696e207560208301526f6e636f6e6669726d656420717565756560801b6040830152606081016040850152508160608201526080810191505092915050565b60006060825261590c606083018461533a565b828103806020850152602b82527f746865207472616e73616374696f6e20686173206265656e20636f6d6d69742060208301526a6f7220726f6c6c6261636b60a81b6040830152606081016040850152508160608201526080810191505092915050565b600060608252615983606083018561533a565b828103806020850152602582527f617070206e6f7420666f756e64207768656e2050726570617265556e636f6e666020830152641a5c9b595960da1b6040830152606081016040850152506156a860608201856152f1565b6000606082526159ee606083018561533a565b828103806020850152601b82527f617070206e6f7420666f756e64207768656e20526f6c6c6261636b00000000006020830152604081016040850152506156a860408201856152f1565b600060608252615a4b606083018561533a565b828103806020850152601082526f18db481d995c9a599e4819985a5b195960821b6020830152604081016040850152506156a860408201856152f1565b600060608252615a9b606083018561533a565b828103806020850152601982527f617070206e6f7420666f756e64207768656e20436f6d6d6974000000000000006020830152604081016040850152506156a860408201856152f1565b60006101408083018d845260208d81860152615b008d615d04565b8c60408601528b60608601528a60808601528260a0860152819250895180835261016092508286019350828282028701019250818b01855b82811015615b675761015f19888603018652615b558583516152f1565b95840195945090830190600101615b38565b5050505060c0840197909752505060e0810193909352610100830191909152610120909101529695505050505050565b604051601f8201601f191681016001600160401b0381118282101715615bbf57615bbf615cee565b604052919050565b60006001600160401b03821115615be057615be0615cee565b5060209081020190565b60006001600160401b03821115615c0357615c03615cee565b50601f01601f191660200190565b60008219821115615c2457615c24615cc2565b500190565b600082821015615c3b57615c3b615cc2565b500390565b60005b83811015615c5b578181015183820152602001615c43565b838111156110285750506000910152565b600281046001821680615c8057607f821691505b60208210811415615ca157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615cbb57615cbb615cc2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6005811061233057612330615cd8565b6005811061233057600080fdfee224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99ef2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb823abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9a26469706673582212207153b019c30fc43caa782e43997b5cb9d6dab0617bc9408ea655f426f4a2769664736f6c63430008020033",
}

// SR2PCABI is the input ABI used to generate the binding from.
// Deprecated: Use SR2PCMetaData.ABI instead.
var SR2PCABI = SR2PCMetaData.ABI

// SR2PCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SR2PCMetaData.Bin instead.
var SR2PCBin = SR2PCMetaData.Bin

// DeploySR2PC deploys a new Ethereum contract, binding an instance of SR2PC to it.
func DeploySR2PC(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId *big.Int, _expectedTrustDelta *big.Int) (common.Address, *types.Transaction, *SR2PC, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SR2PCBin), backend, _chainId, _expectedTrustDelta)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// SR2PC is an auto generated Go binding around an Ethereum contract.
type SR2PC struct {
	SR2PCCaller     // Read-only binding to the contract
	SR2PCTransactor // Write-only binding to the contract
	SR2PCFilterer   // Log filterer for contract events
}

// SR2PCCaller is an auto generated read-only Go binding around an Ethereum contract.
type SR2PCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SR2PCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SR2PCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SR2PCSession struct {
	Contract     *SR2PC            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SR2PCCallerSession struct {
	Contract *SR2PCCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SR2PCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SR2PCTransactorSession struct {
	Contract     *SR2PCTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCRaw is an auto generated low-level Go binding around an Ethereum contract.
type SR2PCRaw struct {
	Contract *SR2PC // Generic contract binding to access the raw methods on
}

// SR2PCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SR2PCCallerRaw struct {
	Contract *SR2PCCaller // Generic read-only contract binding to access the raw methods on
}

// SR2PCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SR2PCTransactorRaw struct {
	Contract *SR2PCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSR2PC creates a new instance of SR2PC, bound to a specific deployed contract.
func NewSR2PC(address common.Address, backend bind.ContractBackend) (*SR2PC, error) {
	contract, err := bindSR2PC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// NewSR2PCCaller creates a new read-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCCaller(address common.Address, caller bind.ContractCaller) (*SR2PCCaller, error) {
	contract, err := bindSR2PC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCCaller{contract: contract}, nil
}

// NewSR2PCTransactor creates a new write-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCTransactor(address common.Address, transactor bind.ContractTransactor) (*SR2PCTransactor, error) {
	contract, err := bindSR2PC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCTransactor{contract: contract}, nil
}

// NewSR2PCFilterer creates a new log filterer instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCFilterer(address common.Address, filterer bind.ContractFilterer) (*SR2PCFilterer, error) {
	contract, err := bindSR2PC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SR2PCFilterer{contract: contract}, nil
}

// bindSR2PC binds a generic wrapper to an already deployed contract.
func bindSR2PC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.SR2PCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transact(opts, method, params...)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x44b9bd89.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CalculateRoot(opts *bind.CallOpts, cm CrossMessage, proof []byte) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "calculateRoot", cm, proof)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateRoot is a free data retrieval call binding the contract method 0x44b9bd89.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CalculateRoot(cm CrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x44b9bd89.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CalculateRoot(cm CrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CmToHash is a free data retrieval call binding the contract method 0x0c8b9b12.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CmToHash(opts *bind.CallOpts, cm CrossMessage) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "cmToHash", cm)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CmToHash is a free data retrieval call binding the contract method 0x0c8b9b12.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CmToHash(cm CrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// CmToHash is a free data retrieval call binding the contract method 0x0c8b9b12.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CmToHash(cm CrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256))
func (_SR2PC *SR2PCCaller) GetCMByHash(opts *bind.CallOpts, cmHash [32]byte) (CrossMessage, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getCMByHash", cmHash)

	if err != nil {
		return *new(CrossMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(CrossMessage)).(*CrossMessage)

	return out0, err

}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256))
func (_SR2PC *SR2PCSession) GetCMByHash(cmHash [32]byte) (CrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256))
func (_SR2PC *SR2PCCallerSession) GetCMByHash(cmHash [32]byte) (CrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetHeader(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getHeader", _chainId, _height)

	if err != nil {
		return *new(SR2PCBlockHeader), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCBlockHeader)).(*SR2PCBlockHeader)

	return out0, err

}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetTranStatus is a free data retrieval call binding the contract method 0x4a6bc702.
//
// Solidity: function getTranStatus(bytes32 _transactionHash) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTranStatus(opts *bind.CallOpts, _transactionHash [32]byte) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTranStatus", _transactionHash)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTranStatus is a free data retrieval call binding the contract method 0x4a6bc702.
//
// Solidity: function getTranStatus(bytes32 _transactionHash) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTranStatus(_transactionHash [32]byte) (uint8, error) {
	return _SR2PC.Contract.GetTranStatus(&_SR2PC.CallOpts, _transactionHash)
}

// GetTranStatus is a free data retrieval call binding the contract method 0x4a6bc702.
//
// Solidity: function getTranStatus(bytes32 _transactionHash) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTranStatus(_transactionHash [32]byte) (uint8, error) {
	return _SR2PC.Contract.GetTranStatus(&_SR2PC.CallOpts, _transactionHash)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTransStatus(opts *bind.CallOpts, _transactionPoint *big.Int) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransStatus", _transactionPoint)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetTransSuccessNumber(opts *bind.CallOpts, _transactionPoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransSuccessNumber", _transactionPoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCaller) GetTransactionHash(opts *bind.CallOpts, _point *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransactionHash", _point)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCallerSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetUcfStatus is a free data retrieval call binding the contract method 0xa2ed3122.
//
// Solidity: function getUcfStatus(uint256 _chainId, bytes32 _transactionHash) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetUcfStatus(opts *bind.CallOpts, _chainId *big.Int, _transactionHash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUcfStatus", _chainId, _transactionHash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUcfStatus is a free data retrieval call binding the contract method 0xa2ed3122.
//
// Solidity: function getUcfStatus(uint256 _chainId, bytes32 _transactionHash) view returns(uint256)
func (_SR2PC *SR2PCSession) GetUcfStatus(_chainId *big.Int, _transactionHash [32]byte) (*big.Int, error) {
	return _SR2PC.Contract.GetUcfStatus(&_SR2PC.CallOpts, _chainId, _transactionHash)
}

// GetUcfStatus is a free data retrieval call binding the contract method 0xa2ed3122.
//
// Solidity: function getUcfStatus(uint256 _chainId, bytes32 _transactionHash) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetUcfStatus(_chainId *big.Int, _transactionHash [32]byte) (*big.Int, error) {
	return _SR2PC.Contract.GetUcfStatus(&_SR2PC.CallOpts, _chainId, _transactionHash)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256, uint256)
func (_SR2PC *SR2PCCaller) GetUncfmQueueLength(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUncfmQueueLength", _chainId, _height)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256, uint256)
func (_SR2PC *SR2PCSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, *big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256, uint256)
func (_SR2PC *SR2PCCallerSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, *big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// Verify is a free data retrieval call binding the contract method 0x366c7d43.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCaller) Verify(opts *bind.CallOpts, header SR2PCBlockHeader, cm CrossMessage, proof []byte) (bool, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "verify", header, cm, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x366c7d43.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCSession) Verify(header SR2PCBlockHeader, cm CrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// Verify is a free data retrieval call binding the contract method 0x366c7d43.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCallerSession) Verify(header SR2PCBlockHeader, cm CrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x11ba08d7.
//
// Solidity: function CrossRetry(string identifier, bytes32 cmHash) returns()
func (_SR2PC *SR2PCTransactor) CrossRetry(opts *bind.TransactOpts, identifier string, cmHash [32]byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "CrossRetry", identifier, cmHash)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x11ba08d7.
//
// Solidity: function CrossRetry(string identifier, bytes32 cmHash) returns()
func (_SR2PC *SR2PCSession) CrossRetry(identifier string, cmHash [32]byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossRetry(&_SR2PC.TransactOpts, identifier, cmHash)
}

// CrossRetry is a paid mutator transaction binding the contract method 0x11ba08d7.
//
// Solidity: function CrossRetry(string identifier, bytes32 cmHash) returns()
func (_SR2PC *SR2PCTransactorSession) CrossRetry(identifier string, cmHash [32]byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossRetry(&_SR2PC.TransactOpts, identifier, cmHash)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactor) CrossReceive(opts *bind.TransactOpts, cm CrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossReceive", cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCSession) CrossReceive(cm CrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0x8660c376.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactorSession) CrossReceive(cm CrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossSend is a paid mutator transaction binding the contract method 0x6c55d0d4.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value, string _appIdentifier, uint256 _appValueId) payable returns()
func (_SR2PC *SR2PCTransactor) CrossSend(opts *bind.TransactOpts, _targetChainIds []*big.Int, _value *big.Int, _appIdentifier string, _appValueId *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossSend", _targetChainIds, _value, _appIdentifier, _appValueId)
}

// CrossSend is a paid mutator transaction binding the contract method 0x6c55d0d4.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value, string _appIdentifier, uint256 _appValueId) payable returns()
func (_SR2PC *SR2PCSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int, _appIdentifier string, _appValueId *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value, _appIdentifier, _appValueId)
}

// CrossSend is a paid mutator transaction binding the contract method 0x6c55d0d4.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value, string _appIdentifier, uint256 _appValueId) payable returns()
func (_SR2PC *SR2PCTransactorSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int, _appIdentifier string, _appValueId *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value, _appIdentifier, _appValueId)
}

// RegisterApp is a paid mutator transaction binding the contract method 0xca8bad91.
//
// Solidity: function registerApp(string _identifier, address _app) returns()
func (_SR2PC *SR2PCTransactor) RegisterApp(opts *bind.TransactOpts, _identifier string, _app common.Address) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "registerApp", _identifier, _app)
}

// RegisterApp is a paid mutator transaction binding the contract method 0xca8bad91.
//
// Solidity: function registerApp(string _identifier, address _app) returns()
func (_SR2PC *SR2PCSession) RegisterApp(_identifier string, _app common.Address) (*types.Transaction, error) {
	return _SR2PC.Contract.RegisterApp(&_SR2PC.TransactOpts, _identifier, _app)
}

// RegisterApp is a paid mutator transaction binding the contract method 0xca8bad91.
//
// Solidity: function registerApp(string _identifier, address _app) returns()
func (_SR2PC *SR2PCTransactorSession) RegisterApp(_identifier string, _app common.Address) (*types.Transaction, error) {
	return _SR2PC.Contract.RegisterApp(&_SR2PC.TransactOpts, _identifier, _app)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactor) SyncHeader(opts *bind.TransactOpts, _chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "syncHeader", _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactorSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactorSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// SR2PCDebugIterator is returned from FilterDebug and is used to iterate over the raw logs and unpacked data for Debug events raised by the SR2PC contract.
type SR2PCDebugIterator struct {
	Event *SR2PCDebug // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCDebugIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCDebug)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCDebug)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCDebugIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCDebugIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCDebug represents a Debug event raised by the SR2PC contract.
type SR2PCDebug struct {
	Msg []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDebug is a free log retrieval operation binding the contract event 0x31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470.
//
// Solidity: event Debug(bytes msg)
func (_SR2PC *SR2PCFilterer) FilterDebug(opts *bind.FilterOpts) (*SR2PCDebugIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return &SR2PCDebugIterator{contract: _SR2PC.contract, event: "Debug", logs: logs, sub: sub}, nil
}

// WatchDebug is a free log subscription operation binding the contract event 0x31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470.
//
// Solidity: event Debug(bytes msg)
func (_SR2PC *SR2PCFilterer) WatchDebug(opts *bind.WatchOpts, sink chan<- *SR2PCDebug) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCDebug)
				if err := _SR2PC.contract.UnpackLog(event, "Debug", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDebug is a log parse operation binding the contract event 0x31fe5ce544784f2e2e62fd1c70cb1ebe6cd1f8e17a185909f82c430b6c7ec470.
//
// Solidity: event Debug(bytes msg)
func (_SR2PC *SR2PCFilterer) ParseDebug(log types.Log) (*SR2PCDebug, error) {
	event := new(SR2PCDebug)
	if err := _SR2PC.contract.UnpackLog(event, "Debug", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCErrorIterator is returned from FilterError and is used to iterate over the raw logs and unpacked data for Error events raised by the SR2PC contract.
type SR2PCErrorIterator struct {
	Event *SR2PCError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCError represents a Error event raised by the SR2PC contract.
type SR2PCError struct {
	Cm     CrossMessage
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterError is a free log retrieval operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterError(opts *bind.FilterOpts) (*SR2PCErrorIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return &SR2PCErrorIterator{contract: _SR2PC.contract, event: "Error", logs: logs, sub: sub}, nil
}

// WatchError is a free log subscription operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchError(opts *bind.WatchOpts, sink chan<- *SR2PCError) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Error")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCError)
				if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseError is a log parse operation binding the contract event 0xe224507a4980b0a6f50ad34ed253fcb52c9cfad21814c4766f4aeb197a8ca99e.
//
// Solidity: event Error((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32,uint256) cm, string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseError(log types.Log) (*SR2PCError, error) {
	event := new(SR2PCError)
	if err := _SR2PC.contract.UnpackLog(event, "Error", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCMetricsIterator is returned from FilterMetrics and is used to iterate over the raw logs and unpacked data for Metrics events raised by the SR2PC contract.
type SR2PCMetricsIterator struct {
	Event *SR2PCMetrics // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCMetricsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCMetrics)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCMetrics)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCMetricsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCMetricsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCMetrics represents a Metrics event raised by the SR2PC contract.
type SR2PCMetrics struct {
	TransactionHash [32]byte
	CmHash          [32]byte
	ChainId         *big.Int
	Height          *big.Int
	Phase           uint8
	IsConfirmed     bool
	ByHeader        bool
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMetrics is a free log retrieval operation binding the contract event 0xf2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb8.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, uint256 chainId, uint256 height, uint8 phase, bool isConfirmed, bool byHeader)
func (_SR2PC *SR2PCFilterer) FilterMetrics(opts *bind.FilterOpts) (*SR2PCMetricsIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Metrics")
	if err != nil {
		return nil, err
	}
	return &SR2PCMetricsIterator{contract: _SR2PC.contract, event: "Metrics", logs: logs, sub: sub}, nil
}

// WatchMetrics is a free log subscription operation binding the contract event 0xf2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb8.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, uint256 chainId, uint256 height, uint8 phase, bool isConfirmed, bool byHeader)
func (_SR2PC *SR2PCFilterer) WatchMetrics(opts *bind.WatchOpts, sink chan<- *SR2PCMetrics) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Metrics")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCMetrics)
				if err := _SR2PC.contract.UnpackLog(event, "Metrics", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetrics is a log parse operation binding the contract event 0xf2bcef60c1a184b35a45f1db4b155de3753d0b5026d715379c8786b42a422fb8.
//
// Solidity: event Metrics(bytes32 transactionHash, bytes32 cmHash, uint256 chainId, uint256 height, uint8 phase, bool isConfirmed, bool byHeader)
func (_SR2PC *SR2PCFilterer) ParseMetrics(log types.Log) (*SR2PCMetrics, error) {
	event := new(SR2PCMetrics)
	if err := _SR2PC.contract.UnpackLog(event, "Metrics", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the SR2PC contract.
type SR2PCReceivedIterator struct {
	Event *SR2PCReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCReceived represents a Received event raised by the SR2PC contract.
type SR2PCReceived struct {
	User  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) FilterReceived(opts *bind.FilterOpts) (*SR2PCReceivedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &SR2PCReceivedIterator{contract: _SR2PC.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *SR2PCReceived) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCReceived)
				if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) ParseReceived(log types.Log) (*SR2PCReceived, error) {
	event := new(SR2PCReceived)
	if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryPrepareConfirmCMIterator is returned from FilterRetryPrepareConfirmCM and is used to iterate over the raw logs and unpacked data for RetryPrepareConfirmCM events raised by the SR2PC contract.
type SR2PCRetryPrepareConfirmCMIterator struct {
	Event *SR2PCRetryPrepareConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryPrepareConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryPrepareConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryPrepareConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryPrepareConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryPrepareConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryPrepareConfirmCM represents a RetryPrepareConfirmCM event raised by the SR2PC contract.
type SR2PCRetryPrepareConfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryPrepareConfirmCM is a free log retrieval operation binding the contract event 0x345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e.
//
// Solidity: event RetryPrepareConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryPrepareConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryPrepareConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryPrepareConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryPrepareConfirmCMIterator{contract: _SR2PC.contract, event: "RetryPrepareConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryPrepareConfirmCM is a free log subscription operation binding the contract event 0x345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e.
//
// Solidity: event RetryPrepareConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryPrepareConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryPrepareConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryPrepareConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryPrepareConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryPrepareConfirmCM is a log parse operation binding the contract event 0x345aea0bf74e2344d3f3547f9ef5832e4a2cc5a3297f5686b3159ef813ae713e.
//
// Solidity: event RetryPrepareConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryPrepareConfirmCM(log types.Log) (*SR2PCRetryPrepareConfirmCM, error) {
	event := new(SR2PCRetryPrepareConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryPrepareUnconfirmCMIterator is returned from FilterRetryPrepareUnconfirmCM and is used to iterate over the raw logs and unpacked data for RetryPrepareUnconfirmCM events raised by the SR2PC contract.
type SR2PCRetryPrepareUnconfirmCMIterator struct {
	Event *SR2PCRetryPrepareUnconfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryPrepareUnconfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryPrepareUnconfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryPrepareUnconfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryPrepareUnconfirmCM represents a RetryPrepareUnconfirmCM event raised by the SR2PC contract.
type SR2PCRetryPrepareUnconfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryPrepareUnconfirmCM is a free log retrieval operation binding the contract event 0x2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43.
//
// Solidity: event RetryPrepareUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryPrepareUnconfirmCM(opts *bind.FilterOpts) (*SR2PCRetryPrepareUnconfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryPrepareUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryPrepareUnconfirmCMIterator{contract: _SR2PC.contract, event: "RetryPrepareUnconfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryPrepareUnconfirmCM is a free log subscription operation binding the contract event 0x2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43.
//
// Solidity: event RetryPrepareUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryPrepareUnconfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryPrepareUnconfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryPrepareUnconfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryPrepareUnconfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareUnconfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryPrepareUnconfirmCM is a log parse operation binding the contract event 0x2c2594e875eeaed5ded7fa4a9d293824109e1b547324755ade16329c14745b43.
//
// Solidity: event RetryPrepareUnconfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryPrepareUnconfirmCM(log types.Log) (*SR2PCRetryPrepareUnconfirmCM, error) {
	event := new(SR2PCRetryPrepareUnconfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryPrepareUnconfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRetryRollbackConfirmCMIterator is returned from FilterRetryRollbackConfirmCM and is used to iterate over the raw logs and unpacked data for RetryRollbackConfirmCM events raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCMIterator struct {
	Event *SR2PCRetryRollbackConfirmCM // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRetryRollbackConfirmCMIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRetryRollbackConfirmCM)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRetryRollbackConfirmCM)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRetryRollbackConfirmCMIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRetryRollbackConfirmCMIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRetryRollbackConfirmCM represents a RetryRollbackConfirmCM event raised by the SR2PC contract.
type SR2PCRetryRollbackConfirmCM struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRetryRollbackConfirmCM is a free log retrieval operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterRetryRollbackConfirmCM(opts *bind.FilterOpts) (*SR2PCRetryRollbackConfirmCMIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return &SR2PCRetryRollbackConfirmCMIterator{contract: _SR2PC.contract, event: "RetryRollbackConfirmCM", logs: logs, sub: sub}, nil
}

// WatchRetryRollbackConfirmCM is a free log subscription operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchRetryRollbackConfirmCM(opts *bind.WatchOpts, sink chan<- *SR2PCRetryRollbackConfirmCM) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RetryRollbackConfirmCM")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRetryRollbackConfirmCM)
				if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRetryRollbackConfirmCM is a log parse operation binding the contract event 0x4b7df6005d4bab53aed002486f045106a579e3cb80250c37c2cfd9b424d12645.
//
// Solidity: event RetryRollbackConfirmCM(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseRetryRollbackConfirmCM(log types.Log) (*SR2PCRetryRollbackConfirmCM, error) {
	event := new(SR2PCRetryRollbackConfirmCM)
	if err := _SR2PC.contract.UnpackLog(event, "RetryRollbackConfirmCM", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRollbackConfirmedIterator is returned from FilterRollbackConfirmed and is used to iterate over the raw logs and unpacked data for RollbackConfirmed events raised by the SR2PC contract.
type SR2PCRollbackConfirmedIterator struct {
	Event *SR2PCRollbackConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRollbackConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRollbackConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRollbackConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRollbackConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRollbackConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRollbackConfirmed represents a RollbackConfirmed event raised by the SR2PC contract.
type SR2PCRollbackConfirmed struct {
	CmHash [32]byte
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollbackConfirmed is a free log retrieval operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) FilterRollbackConfirmed(opts *bind.FilterOpts) (*SR2PCRollbackConfirmedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return &SR2PCRollbackConfirmedIterator{contract: _SR2PC.contract, event: "RollbackConfirmed", logs: logs, sub: sub}, nil
}

// WatchRollbackConfirmed is a free log subscription operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) WatchRollbackConfirmed(opts *bind.WatchOpts, sink chan<- *SR2PCRollbackConfirmed) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRollbackConfirmed)
				if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollbackConfirmed is a log parse operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) ParseRollbackConfirmed(log types.Log) (*SR2PCRollbackConfirmed, error) {
	event := new(SR2PCRollbackConfirmed)
	if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSendCMHashIterator is returned from FilterSendCMHash and is used to iterate over the raw logs and unpacked data for SendCMHash events raised by the SR2PC contract.
type SR2PCSendCMHashIterator struct {
	Event *SR2PCSendCMHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSendCMHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSendCMHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSendCMHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSendCMHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSendCMHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSendCMHash represents a SendCMHash event raised by the SR2PC contract.
type SR2PCSendCMHash struct {
	CmHash [32]byte
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSendCMHash is a free log retrieval operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) FilterSendCMHash(opts *bind.FilterOpts) (*SR2PCSendCMHashIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return &SR2PCSendCMHashIterator{contract: _SR2PC.contract, event: "SendCMHash", logs: logs, sub: sub}, nil
}

// WatchSendCMHash is a free log subscription operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) WatchSendCMHash(opts *bind.WatchOpts, sink chan<- *SR2PCSendCMHash) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSendCMHash)
				if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCMHash is a log parse operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) ParseSendCMHash(log types.Log) (*SR2PCSendCMHash, error) {
	event := new(SR2PCSendCMHash)
	if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCShadowStoreIterator is returned from FilterShadowStore and is used to iterate over the raw logs and unpacked data for ShadowStore events raised by the SR2PC contract.
type SR2PCShadowStoreIterator struct {
	Event *SR2PCShadowStore // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCShadowStoreIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCShadowStore)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCShadowStore)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCShadowStoreIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCShadowStoreIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCShadowStore represents a ShadowStore event raised by the SR2PC contract.
type SR2PCShadowStore struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterShadowStore is a free log retrieval operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterShadowStore(opts *bind.FilterOpts) (*SR2PCShadowStoreIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return &SR2PCShadowStoreIterator{contract: _SR2PC.contract, event: "ShadowStore", logs: logs, sub: sub}, nil
}

// WatchShadowStore is a free log subscription operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchShadowStore(opts *bind.WatchOpts, sink chan<- *SR2PCShadowStore) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCShadowStore)
				if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShadowStore is a log parse operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseShadowStore(log types.Log) (*SR2PCShadowStore, error) {
	event := new(SR2PCShadowStore)
	if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSyncHeaderIterator is returned from FilterSyncHeader and is used to iterate over the raw logs and unpacked data for SyncHeader events raised by the SR2PC contract.
type SR2PCSyncHeaderIterator struct {
	Event *SR2PCSyncHeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSyncHeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSyncHeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSyncHeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSyncHeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSyncHeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSyncHeader represents a SyncHeader event raised by the SR2PC contract.
type SR2PCSyncHeader struct {
	ChainId *big.Int
	Height  *big.Int
	Root    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSyncHeader is a free log retrieval operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) FilterSyncHeader(opts *bind.FilterOpts) (*SR2PCSyncHeaderIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return &SR2PCSyncHeaderIterator{contract: _SR2PC.contract, event: "SyncHeader", logs: logs, sub: sub}, nil
}

// WatchSyncHeader is a free log subscription operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) WatchSyncHeader(opts *bind.WatchOpts, sink chan<- *SR2PCSyncHeader) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSyncHeader)
				if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncHeader is a log parse operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) ParseSyncHeader(log types.Log) (*SR2PCSyncHeader, error) {
	event := new(SR2PCSyncHeader)
	if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCWarningIterator is returned from FilterWarning and is used to iterate over the raw logs and unpacked data for Warning events raised by the SR2PC contract.
type SR2PCWarningIterator struct {
	Event *SR2PCWarning // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCWarningIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCWarning)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCWarning)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCWarningIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCWarningIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCWarning represents a Warning event raised by the SR2PC contract.
type SR2PCWarning struct {
	Reason string
	Others []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWarning is a free log retrieval operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) FilterWarning(opts *bind.FilterOpts) (*SR2PCWarningIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return &SR2PCWarningIterator{contract: _SR2PC.contract, event: "Warning", logs: logs, sub: sub}, nil
}

// WatchWarning is a free log subscription operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) WatchWarning(opts *bind.WatchOpts, sink chan<- *SR2PCWarning) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Warning")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCWarning)
				if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWarning is a log parse operation binding the contract event 0x10763ad1908af266ad129ef554d37fcfcc5df0c353a85d75bf094c2fe20ba0c7.
//
// Solidity: event Warning(string reason, bytes others)
func (_SR2PC *SR2PCFilterer) ParseWarning(log types.Log) (*SR2PCWarning, error) {
	event := new(SR2PCWarning)
	if err := _SR2PC.contract.UnpackLog(event, "Warning", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
