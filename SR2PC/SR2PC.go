// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package SR2PC

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SR2PCBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type SR2PCBlockHeader struct {
	Height *big.Int
	Root   [32]byte
}

// SR2PCCrossMessage is an auto generated low-level Go binding around an user-defined struct.
type SR2PCCrossMessage struct {
	SourceChainId *big.Int
	TargetChainId *big.Int
	Phase         uint8
	SourceHeight  *big.Int
	Nonce         *big.Int
	Payload       [][]byte
	CmInputHash   [32]byte
	CmInputHeight *big.Int
	RespPayload   [32]byte
}

// SR2PCShadowLock is an auto generated low-level Go binding around an user-defined struct.
type SR2PCShadowLock struct {
	ChainId *big.Int
	Height  *big.Int
}

// SR2PCMetaData contains all meta data concerning the SR2PC contract.
var SR2PCMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RollbackConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enumSR2PC.CMStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"SendCMHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"ShadowStore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"SyncHeader\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"calculateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"}],\"name\":\"cmToHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"crossReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_targetChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"crossSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"cmHash\",\"type\":\"bytes32\"}],\"name\":\"getCMByHash\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getHeader\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShadowLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"internalType\":\"structSR2PC.ShadowLock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionPoint\",\"type\":\"uint256\"}],\"name\":\"getTransSuccessNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getUncfmQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"}],\"name\":\"syncHeader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"test_updateValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.BlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumSR2PC.CMPhase\",\"name\":\"phase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sourceHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"payload\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"cmInputHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cmInputHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"respPayload\",\"type\":\"bytes32\"}],\"internalType\":\"structSR2PC.CrossMessage\",\"name\":\"cm\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// SR2PCABI is the input ABI used to generate the binding from.
// Deprecated: Use SR2PCMetaData.ABI instead.
var SR2PCABI = SR2PCMetaData.ABI

// SR2PCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SR2PCMetaData.Bin instead.
var SR2PCBin = SR2PCMetaData.Bin

// DeploySR2PC deploys a new Ethereum contract, binding an instance of SR2PC to it.
func DeploySR2PC(auth *bind.TransactOpts, backend bind.ContractBackend, _chainId *big.Int) (common.Address, *types.Transaction, *SR2PC, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SR2PCBin), backend, _chainId)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// SR2PC is an auto generated Go binding around an Ethereum contract.
type SR2PC struct {
	SR2PCCaller     // Read-only binding to the contract
	SR2PCTransactor // Write-only binding to the contract
	SR2PCFilterer   // Log filterer for contract events
}

// SR2PCCaller is an auto generated read-only Go binding around an Ethereum contract.
type SR2PCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SR2PCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SR2PCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SR2PCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SR2PCSession struct {
	Contract     *SR2PC            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SR2PCCallerSession struct {
	Contract *SR2PCCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SR2PCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SR2PCTransactorSession struct {
	Contract     *SR2PCTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SR2PCRaw is an auto generated low-level Go binding around an Ethereum contract.
type SR2PCRaw struct {
	Contract *SR2PC // Generic contract binding to access the raw methods on
}

// SR2PCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SR2PCCallerRaw struct {
	Contract *SR2PCCaller // Generic read-only contract binding to access the raw methods on
}

// SR2PCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SR2PCTransactorRaw struct {
	Contract *SR2PCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSR2PC creates a new instance of SR2PC, bound to a specific deployed contract.
func NewSR2PC(address common.Address, backend bind.ContractBackend) (*SR2PC, error) {
	contract, err := bindSR2PC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SR2PC{SR2PCCaller: SR2PCCaller{contract: contract}, SR2PCTransactor: SR2PCTransactor{contract: contract}, SR2PCFilterer: SR2PCFilterer{contract: contract}}, nil
}

// NewSR2PCCaller creates a new read-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCCaller(address common.Address, caller bind.ContractCaller) (*SR2PCCaller, error) {
	contract, err := bindSR2PC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCCaller{contract: contract}, nil
}

// NewSR2PCTransactor creates a new write-only instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCTransactor(address common.Address, transactor bind.ContractTransactor) (*SR2PCTransactor, error) {
	contract, err := bindSR2PC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SR2PCTransactor{contract: contract}, nil
}

// NewSR2PCFilterer creates a new log filterer instance of SR2PC, bound to a specific deployed contract.
func NewSR2PCFilterer(address common.Address, filterer bind.ContractFilterer) (*SR2PCFilterer, error) {
	contract, err := bindSR2PC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SR2PCFilterer{contract: contract}, nil
}

// bindSR2PC binds a generic wrapper to an already deployed contract.
func bindSR2PC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SR2PCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.SR2PCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.SR2PCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SR2PC *SR2PCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SR2PC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SR2PC *SR2PCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SR2PC *SR2PCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SR2PC.Contract.contract.Transact(opts, method, params...)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x34e7d36b.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CalculateRoot(opts *bind.CallOpts, cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "calculateRoot", cm, proof)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateRoot is a free data retrieval call binding the contract method 0x34e7d36b.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CalculateRoot(cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CalculateRoot is a free data retrieval call binding the contract method 0x34e7d36b.
//
// Solidity: function calculateRoot((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CalculateRoot(cm SR2PCCrossMessage, proof []byte) ([32]byte, error) {
	return _SR2PC.Contract.CalculateRoot(&_SR2PC.CallOpts, cm, proof)
}

// CmToHash is a free data retrieval call binding the contract method 0x2a8c5646.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCaller) CmToHash(opts *bind.CallOpts, cm SR2PCCrossMessage) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "cmToHash", cm)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CmToHash is a free data retrieval call binding the contract method 0x2a8c5646.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm) pure returns(bytes32)
func (_SR2PC *SR2PCSession) CmToHash(cm SR2PCCrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// CmToHash is a free data retrieval call binding the contract method 0x2a8c5646.
//
// Solidity: function cmToHash((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm) pure returns(bytes32)
func (_SR2PC *SR2PCCallerSession) CmToHash(cm SR2PCCrossMessage) ([32]byte, error) {
	return _SR2PC.Contract.CmToHash(&_SR2PC.CallOpts, cm)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetCMByHash(opts *bind.CallOpts, cmHash [32]byte) (SR2PCCrossMessage, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getCMByHash", cmHash)

	if err != nil {
		return *new(SR2PCCrossMessage), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCCrossMessage)).(*SR2PCCrossMessage)

	return out0, err

}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32))
func (_SR2PC *SR2PCSession) GetCMByHash(cmHash [32]byte) (SR2PCCrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetCMByHash is a free data retrieval call binding the contract method 0xab1e2689.
//
// Solidity: function getCMByHash(bytes32 cmHash) view returns((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetCMByHash(cmHash [32]byte) (SR2PCCrossMessage, error) {
	return _SR2PC.Contract.GetCMByHash(&_SR2PC.CallOpts, cmHash)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCaller) GetHeader(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getHeader", _chainId, _height)

	if err != nil {
		return *new(SR2PCBlockHeader), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCBlockHeader)).(*SR2PCBlockHeader)

	return out0, err

}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetHeader is a free data retrieval call binding the contract method 0x6e53670a.
//
// Solidity: function getHeader(uint256 _chainId, uint256 _height) view returns((uint256,bytes32))
func (_SR2PC *SR2PCCallerSession) GetHeader(_chainId *big.Int, _height *big.Int) (SR2PCBlockHeader, error) {
	return _SR2PC.Contract.GetHeader(&_SR2PC.CallOpts, _chainId, _height)
}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCCaller) GetShadowLock(opts *bind.CallOpts) (SR2PCShadowLock, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getShadowLock")

	if err != nil {
		return *new(SR2PCShadowLock), err
	}

	out0 := *abi.ConvertType(out[0], new(SR2PCShadowLock)).(*SR2PCShadowLock)

	return out0, err

}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCSession) GetShadowLock() (SR2PCShadowLock, error) {
	return _SR2PC.Contract.GetShadowLock(&_SR2PC.CallOpts)
}

// GetShadowLock is a free data retrieval call binding the contract method 0xa1f2c288.
//
// Solidity: function getShadowLock() view returns((uint256,uint256))
func (_SR2PC *SR2PCCallerSession) GetShadowLock() (SR2PCShadowLock, error) {
	return _SR2PC.Contract.GetShadowLock(&_SR2PC.CallOpts)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCaller) GetTransStatus(opts *bind.CallOpts, _transactionPoint *big.Int) (uint8, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransStatus", _transactionPoint)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransStatus is a free data retrieval call binding the contract method 0xcc38a482.
//
// Solidity: function getTransStatus(uint256 _transactionPoint) view returns(uint8)
func (_SR2PC *SR2PCCallerSession) GetTransStatus(_transactionPoint *big.Int) (uint8, error) {
	return _SR2PC.Contract.GetTransStatus(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetTransSuccessNumber(opts *bind.CallOpts, _transactionPoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransSuccessNumber", _transactionPoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransSuccessNumber is a free data retrieval call binding the contract method 0xf678f80d.
//
// Solidity: function getTransSuccessNumber(uint256 _transactionPoint) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetTransSuccessNumber(_transactionPoint *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetTransSuccessNumber(&_SR2PC.CallOpts, _transactionPoint)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCaller) GetTransactionHash(opts *bind.CallOpts, _point *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getTransactionHash", _point)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0x11134384.
//
// Solidity: function getTransactionHash(uint256 _point) view returns(bytes32)
func (_SR2PC *SR2PCCallerSession) GetTransactionHash(_point *big.Int) ([32]byte, error) {
	return _SR2PC.Contract.GetTransactionHash(&_SR2PC.CallOpts, _point)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCCaller) GetUncfmQueueLength(opts *bind.CallOpts, _chainId *big.Int, _height *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getUncfmQueueLength", _chainId, _height)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetUncfmQueueLength is a free data retrieval call binding the contract method 0xac676d32.
//
// Solidity: function getUncfmQueueLength(uint256 _chainId, uint256 _height) view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetUncfmQueueLength(_chainId *big.Int, _height *big.Int) (*big.Int, error) {
	return _SR2PC.Contract.GetUncfmQueueLength(&_SR2PC.CallOpts, _chainId, _height)
}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCCaller) GetValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "getValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCSession) GetValue() (*big.Int, error) {
	return _SR2PC.Contract.GetValue(&_SR2PC.CallOpts)
}

// GetValue is a free data retrieval call binding the contract method 0x20965255.
//
// Solidity: function getValue() view returns(uint256)
func (_SR2PC *SR2PCCallerSession) GetValue() (*big.Int, error) {
	return _SR2PC.Contract.GetValue(&_SR2PC.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCCaller) Value(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "value")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCSession) Value() (*big.Int, error) {
	return _SR2PC.Contract.Value(&_SR2PC.CallOpts)
}

// Value is a free data retrieval call binding the contract method 0x3fa4f245.
//
// Solidity: function value() view returns(uint256)
func (_SR2PC *SR2PCCallerSession) Value() (*big.Int, error) {
	return _SR2PC.Contract.Value(&_SR2PC.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0x73edc6c7.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCaller) Verify(opts *bind.CallOpts, header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	var out []interface{}
	err := _SR2PC.contract.Call(opts, &out, "verify", header, cm, proof)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x73edc6c7.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCSession) Verify(header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// Verify is a free data retrieval call binding the contract method 0x73edc6c7.
//
// Solidity: function verify((uint256,bytes32) header, (uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) pure returns(bool)
func (_SR2PC *SR2PCCallerSession) Verify(header SR2PCBlockHeader, cm SR2PCCrossMessage, proof []byte) (bool, error) {
	return _SR2PC.Contract.Verify(&_SR2PC.CallOpts, header, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0xe7f2e573.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactor) CrossReceive(opts *bind.TransactOpts, cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossReceive", cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0xe7f2e573.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) returns()
func (_SR2PC *SR2PCSession) CrossReceive(cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossReceive is a paid mutator transaction binding the contract method 0xe7f2e573.
//
// Solidity: function crossReceive((uint256,uint256,uint8,uint256,uint256,bytes[],bytes32,uint256,bytes32) cm, bytes proof) returns()
func (_SR2PC *SR2PCTransactorSession) CrossReceive(cm SR2PCCrossMessage, proof []byte) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossReceive(&_SR2PC.TransactOpts, cm, proof)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCTransactor) CrossSend(opts *bind.TransactOpts, _targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "crossSend", _targetChainIds, _value)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value)
}

// CrossSend is a paid mutator transaction binding the contract method 0x4d522c51.
//
// Solidity: function crossSend(uint256[] _targetChainIds, uint256 _value) payable returns()
func (_SR2PC *SR2PCTransactorSession) CrossSend(_targetChainIds []*big.Int, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.CrossSend(&_SR2PC.TransactOpts, _targetChainIds, _value)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactor) SyncHeader(opts *bind.TransactOpts, _chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "syncHeader", _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// SyncHeader is a paid mutator transaction binding the contract method 0xd3b4fbbb.
//
// Solidity: function syncHeader(uint256 _chainId, (uint256,bytes32) header) returns()
func (_SR2PC *SR2PCTransactorSession) SyncHeader(_chainId *big.Int, header SR2PCBlockHeader) (*types.Transaction, error) {
	return _SR2PC.Contract.SyncHeader(&_SR2PC.TransactOpts, _chainId, header)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCTransactor) TestUpdateValue(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _SR2PC.contract.Transact(opts, "test_updateValue", _value)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCSession) TestUpdateValue(_value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.TestUpdateValue(&_SR2PC.TransactOpts, _value)
}

// TestUpdateValue is a paid mutator transaction binding the contract method 0xeb6724e4.
//
// Solidity: function test_updateValue(uint256 _value) returns()
func (_SR2PC *SR2PCTransactorSession) TestUpdateValue(_value *big.Int) (*types.Transaction, error) {
	return _SR2PC.Contract.TestUpdateValue(&_SR2PC.TransactOpts, _value)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SR2PC.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_SR2PC *SR2PCTransactorSession) Receive() (*types.Transaction, error) {
	return _SR2PC.Contract.Receive(&_SR2PC.TransactOpts)
}

// SR2PCReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the SR2PC contract.
type SR2PCReceivedIterator struct {
	Event *SR2PCReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCReceived represents a Received event raised by the SR2PC contract.
type SR2PCReceived struct {
	User  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) FilterReceived(opts *bind.FilterOpts) (*SR2PCReceivedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &SR2PCReceivedIterator{contract: _SR2PC.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *SR2PCReceived) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCReceived)
				if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address _user, uint256 _value)
func (_SR2PC *SR2PCFilterer) ParseReceived(log types.Log) (*SR2PCReceived, error) {
	event := new(SR2PCReceived)
	if err := _SR2PC.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCRollbackConfirmedIterator is returned from FilterRollbackConfirmed and is used to iterate over the raw logs and unpacked data for RollbackConfirmed events raised by the SR2PC contract.
type SR2PCRollbackConfirmedIterator struct {
	Event *SR2PCRollbackConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCRollbackConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCRollbackConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCRollbackConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCRollbackConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCRollbackConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCRollbackConfirmed represents a RollbackConfirmed event raised by the SR2PC contract.
type SR2PCRollbackConfirmed struct {
	CmHash [32]byte
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRollbackConfirmed is a free log retrieval operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) FilterRollbackConfirmed(opts *bind.FilterOpts) (*SR2PCRollbackConfirmedIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return &SR2PCRollbackConfirmedIterator{contract: _SR2PC.contract, event: "RollbackConfirmed", logs: logs, sub: sub}, nil
}

// WatchRollbackConfirmed is a free log subscription operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) WatchRollbackConfirmed(opts *bind.WatchOpts, sink chan<- *SR2PCRollbackConfirmed) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "RollbackConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCRollbackConfirmed)
				if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRollbackConfirmed is a log parse operation binding the contract event 0x43922a183a65b77bec455c1e5d5a4fa7c95a54d5477cacf9add6208e4c9f39f5.
//
// Solidity: event RollbackConfirmed(bytes32 cmHash, uint256 value)
func (_SR2PC *SR2PCFilterer) ParseRollbackConfirmed(log types.Log) (*SR2PCRollbackConfirmed, error) {
	event := new(SR2PCRollbackConfirmed)
	if err := _SR2PC.contract.UnpackLog(event, "RollbackConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSendCMHashIterator is returned from FilterSendCMHash and is used to iterate over the raw logs and unpacked data for SendCMHash events raised by the SR2PC contract.
type SR2PCSendCMHashIterator struct {
	Event *SR2PCSendCMHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSendCMHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSendCMHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSendCMHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSendCMHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSendCMHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSendCMHash represents a SendCMHash event raised by the SR2PC contract.
type SR2PCSendCMHash struct {
	CmHash [32]byte
	Status uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSendCMHash is a free log retrieval operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) FilterSendCMHash(opts *bind.FilterOpts) (*SR2PCSendCMHashIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return &SR2PCSendCMHashIterator{contract: _SR2PC.contract, event: "SendCMHash", logs: logs, sub: sub}, nil
}

// WatchSendCMHash is a free log subscription operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) WatchSendCMHash(opts *bind.WatchOpts, sink chan<- *SR2PCSendCMHash) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SendCMHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSendCMHash)
				if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendCMHash is a log parse operation binding the contract event 0x23abd749a6758ff8777a71b3742428e5475261726f8aec2370d7baa32463b3f9.
//
// Solidity: event SendCMHash(bytes32 cmHash, uint8 status)
func (_SR2PC *SR2PCFilterer) ParseSendCMHash(log types.Log) (*SR2PCSendCMHash, error) {
	event := new(SR2PCSendCMHash)
	if err := _SR2PC.contract.UnpackLog(event, "SendCMHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCShadowStoreIterator is returned from FilterShadowStore and is used to iterate over the raw logs and unpacked data for ShadowStore events raised by the SR2PC contract.
type SR2PCShadowStoreIterator struct {
	Event *SR2PCShadowStore // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCShadowStoreIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCShadowStore)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCShadowStore)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCShadowStoreIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCShadowStoreIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCShadowStore represents a ShadowStore event raised by the SR2PC contract.
type SR2PCShadowStore struct {
	CmHash [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterShadowStore is a free log retrieval operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) FilterShadowStore(opts *bind.FilterOpts) (*SR2PCShadowStoreIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return &SR2PCShadowStoreIterator{contract: _SR2PC.contract, event: "ShadowStore", logs: logs, sub: sub}, nil
}

// WatchShadowStore is a free log subscription operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) WatchShadowStore(opts *bind.WatchOpts, sink chan<- *SR2PCShadowStore) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "ShadowStore")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCShadowStore)
				if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseShadowStore is a log parse operation binding the contract event 0xce20d733426fcf364edc4dd0bb604257720c6fa14d0b39c497ff2859aad19cab.
//
// Solidity: event ShadowStore(bytes32 cmHash)
func (_SR2PC *SR2PCFilterer) ParseShadowStore(log types.Log) (*SR2PCShadowStore, error) {
	event := new(SR2PCShadowStore)
	if err := _SR2PC.contract.UnpackLog(event, "ShadowStore", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SR2PCSyncHeaderIterator is returned from FilterSyncHeader and is used to iterate over the raw logs and unpacked data for SyncHeader events raised by the SR2PC contract.
type SR2PCSyncHeaderIterator struct {
	Event *SR2PCSyncHeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SR2PCSyncHeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SR2PCSyncHeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SR2PCSyncHeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SR2PCSyncHeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SR2PCSyncHeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SR2PCSyncHeader represents a SyncHeader event raised by the SR2PC contract.
type SR2PCSyncHeader struct {
	ChainId *big.Int
	Height  *big.Int
	Root    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSyncHeader is a free log retrieval operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) FilterSyncHeader(opts *bind.FilterOpts) (*SR2PCSyncHeaderIterator, error) {

	logs, sub, err := _SR2PC.contract.FilterLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return &SR2PCSyncHeaderIterator{contract: _SR2PC.contract, event: "SyncHeader", logs: logs, sub: sub}, nil
}

// WatchSyncHeader is a free log subscription operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) WatchSyncHeader(opts *bind.WatchOpts, sink chan<- *SR2PCSyncHeader) (event.Subscription, error) {

	logs, sub, err := _SR2PC.contract.WatchLogs(opts, "SyncHeader")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SR2PCSyncHeader)
				if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncHeader is a log parse operation binding the contract event 0x22ea432488530abc0e7f184503ff9191fec6a038267d2da62d08c09e13f20b91.
//
// Solidity: event SyncHeader(uint256 _chainId, uint256 _height, bytes32 _root)
func (_SR2PC *SR2PCFilterer) ParseSyncHeader(log types.Log) (*SR2PCSyncHeader, error) {
	event := new(SR2PCSyncHeader)
	if err := _SR2PC.contract.UnpackLog(event, "SyncHeader", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
